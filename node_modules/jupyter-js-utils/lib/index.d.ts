/**
 * Copy the contents of one object to another, recursively.
 *
 * From [stackoverflow](http://stackoverflow.com/a/12317051).
 */
export declare function extend(target: any, source: any): any;
/**
 * Get a copy of an object, or null.
 */
export declare function copy(object: any): any;
/**
 * Check for shallow equality of two objects.
 */
export declare function shallowEquals(o1: any, o2: any): boolean;
/**
 * Get a random 32 character hex string (not a formal UUID)
 */
export declare function uuid(): string;
/**
 * Join a sequence of url components with `'/'`.
 */
export declare function urlPathJoin(...paths: string[]): string;
/**
 * Encode just the components of a multi-segment uri.
 *
 * Preserves the `'/'` separators.
 */
export declare function encodeURIComponents(uri: string): string;
/**
 * Encode and join a sequence of url components with `'/'`.
 */
export declare function urlJoinEncode(...args: string[]): string;
/**
 * Return a serialized object string suitable for a query.
 *
 * From [stackoverflow](http://stackoverflow.com/a/30707423).
 */
export declare function jsonToQueryString(json: any): string;
/**
 * Input settings for an AJAX request.
 */
export interface IAjaxSettings {
    /**
     * The HTTP method to use.  Defaults to `'GET'`.
     */
    method?: string;
    /**
     * The return data type (used to parse the return data).
     */
    dataType?: string;
    /**
     * The outgoing content type, used to set the `Content-Type` header.
     */
    contentType?: string;
    /**
     * The request data.
     */
    data?: any;
    /**
     * Whether to cache the response. Defaults to `true`.
     */
    cache?: boolean;
    /**
     * The number of milliseconds a request can take before automatically
     * being terminated.  A value of 0 (which is the default) means there is
     * no timeout.
     */
    timeout?: number;
    /**
     * A mapping of request headers, used via `setRequestHeader`.
     */
    requestHeaders?: {
        [key: string]: string;
    };
    /**
     * Is a Boolean that indicates whether or not cross-site Access-Control
     * requests should be made using credentials such as cookies or
     * authorization headers.  Defaults to `false`.
     */
    withCredentials?: boolean;
    /**
     * The user name associated with the request.  Defaults to `''`.
     */
    user?: string;
    /**
     * The password associated with the request.  Defaults to `''`.
     */
    password?: string;
}
/**
 * Success handler for AJAX request.
 */
export interface IAjaxSuccess {
    /**
     * The data returned by the ajax call.
     */
    data: any;
    /**
     * The status text of the response.
     */
    statusText: string;
    /**
     * The XHR object.
     */
    xhr: XMLHttpRequest;
}
/**
 * Error handler for AJAX request.
 */
export interface IAjaxError {
    /**
     * The XHR object.
     */
    xhr: XMLHttpRequest;
    /**
     * The status text of the response.
     */
    statusText: string;
    /**
     * The response error object.
     */
    error: ErrorEvent;
}
/**
 * Asynchronous XMLHTTPRequest handler.
 *
 * @param url - The url to request.
 *
 * @param settings - The settings to apply to the request and response.
 *
 * #### Notes
 * Based on this [example](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promisifying-xmlhttprequest).
 */
export declare function ajaxRequest(url: string, settings: IAjaxSettings): Promise<IAjaxSuccess>;
/**
 * Try to load an object from a module or a registry.
 *
 * Try to load an object from a module asynchronously if a module
 * is specified, otherwise tries to load an object from the global
 * registry, if the global registry is provided.
 */
export declare function loadObject(name: string, moduleName: string, registry?: {
    [key: string]: any;
}): Promise<any>;
/**
 * A Promise that can be resolved or rejected by another object.
 */
export declare class PromiseDelegate<T> {
    /**
     * Construct a new Promise delegate.
     */
    constructor();
    /**
     * Get the underlying Promise.
     */
    promise: Promise<T>;
    /**
     * Resolve the underlying Promise with an optional value or another Promise.
     */
    resolve(value?: T | Thenable<T>): void;
    /**
     * Reject the underlying Promise with an optional reason.
     */
    reject(reason?: any): void;
    private _promise;
    private _resolve;
    private _reject;
}
/**
 * Get global configuration data for the Jupyter application.
 *
 * @param name - The name of the configuration option.
 *
 * @returns The config value or `undefined` if not found.
 *
 * #### Notes
 * For browser based applications, it is assumed that the page HTML
 * includes a script tag with the id `jupyter-config-data` containing the
 * configuration as valid JSON.
 */
export declare function getConfigOption(name: string): string;
/**
 * Get the base URL for a Jupyter application.
 */
export declare function getBaseUrl(): string;
/**
 * Get the base websocket URL for a Jupyter application.
 */
export declare function getWsUrl(baseUrl?: string): string;
