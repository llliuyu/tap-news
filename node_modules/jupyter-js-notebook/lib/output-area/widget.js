// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var phosphor_observablelist_1 = require('phosphor-observablelist');
var phosphor_panel_1 = require('phosphor-panel');
var phosphor_widget_1 = require('phosphor-widget');
var sanitizer_1 = require('sanitizer');
/**
 * The class name added to an output area widget.
 */
var OUTPUT_AREA_CLASS = 'jp-OutputArea';
/**
 * The class name added to an output area output.
 */
var OUTPUT_CLASS = 'jp-OutputArea-output';
/**
 * The class name added to an execute result.
 */
var EXECUTE_CLASS = 'jp-OutputArea-executeResult';
/**
 * The class name added to display data.
 */
var DISPLAY_CLASS = 'jp-OutputArea-displayData';
/**
 * The class name added to stdout data.
 */
var STDOUT_CLASS = 'jp-OutputArea-stdout';
/**
 * The class name added to stderr data.
 */
var STDERR_CLASS = 'jp-OutputArea-stderr';
/**
 * The class anme added to error data.
 */
var ERROR_CLASS = 'jp-Output-error';
/**
 * The class name added to fixed height output areas.
 */
var FIXED_HEIGHT_CLASS = 'jp-mod-fixedHeight';
/**
 * The class name added to collaped output areas.
 */
var COLLAPSED_CLASS = 'jp-mod-collapsed';
/**
 * The class name added to output area prompts.
 */
var PROMPT_CLASS = 'jp-OutputArea-prompt';
/**
 * The class name added to output area results.
 */
var RESULT_CLASS = 'jp-OutputArea-result';
/**
 * A list of outputs considered safe.
 */
var safeOutputs = ['text/plain', 'text/latex', 'image/png', 'image/jpeg',
    'application/vnd.jupyter.console-text'];
/**
 * A list of outputs that are sanitizable.
 */
var sanitizable = ['text/svg', 'text/html'];
/**
 * An output area widget.
 */
var OutputAreaWidget = (function (_super) {
    __extends(OutputAreaWidget, _super);
    /**
     * Construct an output area widget.
     */
    function OutputAreaWidget(outputs, rendermime) {
        _super.call(this);
        this._sanitized = false; // true if sanitized outputs are displayed
        this._trusted = false;
        this._fixedHeight = false;
        this._collapsed = false;
        this._outputs = null;
        this._rendermime = null;
        this.addClass(OUTPUT_AREA_CLASS);
        this._rendermime = rendermime;
        this.layout = new phosphor_panel_1.PanelLayout();
        for (var i = 0; i < outputs.length; i++) {
            var widget = this.createOutput(outputs.get(i));
            this.layout.addChild(widget);
        }
        outputs.changed.connect(this.outputsChanged, this);
        this._outputs = outputs;
    }
    Object.defineProperty(OutputAreaWidget.prototype, "trusted", {
        /**
         * The trusted state of the widget.
         */
        get: function () {
            return this._trusted;
        },
        set: function (value) {
            if (this._trusted === value) {
                return;
            }
            this._trusted = value;
            // Re-render only if necessary.
            if ((this._sanitized && value) || (!value)) {
                var layout = this.layout;
                for (var i = 0; i < layout.childCount(); i++) {
                    layout.childAt(0).dispose();
                }
                var outputs = this._outputs;
                for (var i = 0; i < outputs.length; i++) {
                    layout.addChild(this.createOutput(outputs.get(i)));
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OutputAreaWidget.prototype, "collapsed", {
        /**
         * The collapsed state of the widget.
         */
        get: function () {
            return this._collapsed;
        },
        set: function (value) {
            if (this._collapsed === value) {
                return;
            }
            this._collapsed = value;
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OutputAreaWidget.prototype, "fixedHeight", {
        /**
         * The fixed height state of the widget.
         */
        get: function () {
            return this._fixedHeight;
        },
        set: function (value) {
            if (this._fixedHeight === value) {
                return;
            }
            this._fixedHeight = value;
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources held by the widget.
     */
    OutputAreaWidget.prototype.dispose = function () {
        // Do nothing if already disposed.
        if (this.isDisposed) {
            return;
        }
        this._outputs = null;
        this._rendermime = null;
        _super.prototype.dispose.call(this);
    };
    /**
     * Create an output node from an output model.
     */
    OutputAreaWidget.prototype.createOutput = function (output) {
        var widget = new phosphor_panel_1.Panel();
        widget.addClass(OUTPUT_CLASS);
        var bundle;
        this._sanitized = false;
        switch (output.output_type) {
            case 'execute_result':
                bundle = output.data;
                widget.addClass(EXECUTE_CLASS);
                var prompt_1 = new phosphor_widget_1.Widget();
                prompt_1.addClass(PROMPT_CLASS);
                var count = output.execution_count;
                prompt_1.node.textContent = "Out[" + (count === null ? ' ' : count) + "]:";
                widget.addChild(prompt_1);
                break;
            case 'display_data':
                bundle = output.data;
                widget.addClass(DISPLAY_CLASS);
                break;
            case 'stream':
                bundle = { 'application/vnd.jupyter.console-text': output.text };
                if (output.name === 'stdout') {
                    widget.addClass(STDOUT_CLASS);
                }
                else {
                    widget.addClass(STDERR_CLASS);
                }
                break;
            case 'error':
                var out = output;
                var traceback = out.traceback.join('\n');
                bundle = { 'application/vnd.jupyter.console-text': traceback || out.ename + ": " + out.evalue };
                widget.addClass(ERROR_CLASS);
                break;
            default:
                console.error("Unrecognized output type: " + output.output_type);
                bundle = {};
        }
        // Sanitize outputs as needed.
        if (!this.trusted) {
            var keys = Object.keys(bundle);
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                var key = keys_1[_i];
                if (safeOutputs.indexOf(key) !== -1) {
                    continue;
                }
                else if (sanitizable.indexOf(key) !== -1) {
                    this._sanitized = true;
                    var out = bundle[key];
                    if (typeof out === 'string') {
                        bundle[key] = sanitizer_1.sanitize(out);
                    }
                    else {
                        console.log('Ignoring unsanitized ' + key + ' output; could not sanitize because output is not a string.');
                        delete bundle[key];
                    }
                }
                else {
                    this._sanitized = true;
                    // Don't display if we don't know how to sanitize it.
                    console.log('Ignoring untrusted ' + key + ' output.');
                    delete bundle[key];
                }
            }
        }
        if (bundle) {
            var child = this._rendermime.render(bundle);
            if (child) {
                child.addClass(RESULT_CLASS);
                widget.addChild(child);
            }
            else {
                console.log('Did not find renderer for output mimebundle.');
                console.log(bundle);
            }
        }
        return widget;
    };
    /**
     * Follow changes to the outputs list.
     */
    OutputAreaWidget.prototype.outputsChanged = function (sender, args) {
        var layout = this.layout;
        var widget;
        switch (args.type) {
            case phosphor_observablelist_1.ListChangeType.Add:
                var value = args.newValue;
                layout.insertChild(args.newIndex, this.createOutput(value));
                break;
            case phosphor_observablelist_1.ListChangeType.Move:
                layout.insertChild(args.newIndex, layout.childAt(args.oldIndex));
                break;
            case phosphor_observablelist_1.ListChangeType.Remove:
                widget = layout.childAt(args.oldIndex);
                layout.removeChild(widget);
                widget.dispose();
                break;
            case phosphor_observablelist_1.ListChangeType.Replace:
                var oldValues = args.oldValue;
                for (var i = args.oldIndex; i < oldValues.length; i++) {
                    widget = layout.childAt(args.oldIndex);
                    layout.removeChild(widget);
                    widget.dispose();
                }
                var newValues = args.newValue;
                for (var i = newValues.length; i < 0; i--) {
                    layout.insertChild(args.newIndex, this.createOutput(newValues[i]));
                }
                break;
            case phosphor_observablelist_1.ListChangeType.Set:
                widget = layout.childAt(args.newIndex);
                layout.removeChild(widget);
                widget.dispose();
                widget = this.createOutput(args.newValue);
                layout.insertChild(args.newIndex, widget);
                break;
            default:
                break;
        }
    };
    /**
     * Handle `update_request` messages.
     */
    OutputAreaWidget.prototype.onUpdateRequest = function (msg) {
        _super.prototype.onUpdateRequest.call(this, msg);
        if (this.collapsed) {
            this.addClass(COLLAPSED_CLASS);
        }
        else {
            this.removeClass(COLLAPSED_CLASS);
        }
        if (this.fixedHeight) {
            this.addClass(FIXED_HEIGHT_CLASS);
        }
        else {
            this.removeClass(FIXED_HEIGHT_CLASS);
        }
    };
    return OutputAreaWidget;
}(phosphor_widget_1.Widget));
exports.OutputAreaWidget = OutputAreaWidget;
