// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var phosphor_panel_1 = require('phosphor-panel');
var phosphor_widget_1 = require('phosphor-widget');
/**
 * The class name added to tooltip widgets.
 */
var TOOLTIP_CLASS = 'jp-ConsoleTooltip';
/**
 * A tooltip widget for a console.
 */
var ConsoleTooltip = (function (_super) {
    __extends(ConsoleTooltip, _super);
    /**
     * Construct a console tooltip widget.
     */
    function ConsoleTooltip() {
        _super.call(this);
        this._reference = null;
        this._content = null;
        this.addClass(TOOLTIP_CLASS);
        this.layout = new phosphor_panel_1.PanelLayout();
        this.hide();
    }
    Object.defineProperty(ConsoleTooltip.prototype, "reference", {
        /**
         * The semantic parent of the tooltip, its reference widget.
         */
        get: function () {
            return this._reference;
        },
        set: function (widget) {
            this._reference = widget;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConsoleTooltip.prototype, "content", {
        /**
         * The text of the tooltip.
         */
        get: function () {
            return this._content;
        },
        set: function (newValue) {
            if (newValue === this._content) {
                return;
            }
            if (this._content) {
                this._content.dispose();
            }
            this._content = newValue;
            if (this._content) {
                var layout = this.layout;
                layout.addChild(this._content);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handle the DOM events for the widget.
     *
     * @param event - The DOM event sent to the widget.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the dock panel's node. It should
     * not be called directly by user code.
     */
    ConsoleTooltip.prototype.handleEvent = function (event) {
        switch (event.type) {
            case 'keydown':
                this._evtKeydown(event);
                break;
            case 'mousedown':
                this._evtMousedown(event);
                break;
            case 'scroll':
                this._evtScroll(event);
                break;
            default:
                break;
        }
    };
    /**
     * Handle `after_attach` messages for the widget.
     *
     * #### Notes
     * Captures window events in capture phase to dismiss the tooltip widget.
     *
     * Because its parent (reference) widgets use window listeners instead of
     * document listeners, the tooltip widget must also use window listeners
     * in the capture phase.
     */
    ConsoleTooltip.prototype.onAfterAttach = function (msg) {
        window.addEventListener('keydown', this, true);
        window.addEventListener('mousedown', this, true);
        window.addEventListener('scroll', this, true);
    };
    /**
     * Handle `before_detach` messages for the widget.
     */
    ConsoleTooltip.prototype.onBeforeDetach = function (msg) {
        window.removeEventListener('keydown', this);
        window.removeEventListener('mousedown', this);
        window.removeEventListener('scroll', this);
    };
    /**
     * Handle `update_request` messages.
     */
    ConsoleTooltip.prototype.onUpdateRequest = function (msg) {
        this.show();
    };
    /**
     * Handle keydown events for the widget.
     *
     * #### Notes
     * Hides the tooltip if a keydown happens anywhere on the document outside
     * of either the tooltip or its parent.
     */
    ConsoleTooltip.prototype._evtKeydown = function (event) {
        var target = event.target;
        if (!this._reference) {
            this.hide();
            return;
        }
        if (this.isHidden) {
            return;
        }
        while (target !== document.documentElement) {
            if (target === this._reference.node) {
                if (event.keyCode === 27) {
                    this.hide();
                }
                return;
            }
            target = target.parentElement;
        }
        this.hide();
    };
    /**
     * Handle mousedown events for the widget.
     *
     * #### Notes
     * Hides the tooltip if a mousedown happens anywhere outside the tooltip.
     */
    ConsoleTooltip.prototype._evtMousedown = function (event) {
        var target = event.target;
        while (target !== document.documentElement) {
            if (target === this.node) {
                return;
            }
            target = target.parentElement;
        }
        this.hide();
    };
    /**
     * Handle scroll events for the widget
     */
    ConsoleTooltip.prototype._evtScroll = function (event) {
        if (!this._reference || this.isHidden) {
            this.hide();
            return;
        }
        var target = event.target;
        while (target !== document.documentElement) {
            // If the scroll event happened in the tooltip widget, allow it.
            if (target === this.node) {
                return;
            }
            target = target.parentElement;
        }
        this.hide();
    };
    return ConsoleTooltip;
}(phosphor_widget_1.Widget));
exports.ConsoleTooltip = ConsoleTooltip;
