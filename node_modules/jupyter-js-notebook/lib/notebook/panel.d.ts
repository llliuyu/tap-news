import { IKernel } from 'jupyter-js-services';
import { IDocumentContext } from 'jupyter-js-ui/lib/docmanager';
import { RenderMime } from 'jupyter-js-ui/lib/rendermime';
import { MimeData as IClipboard } from 'phosphor-dragdrop';
import { IChangedArgs } from 'phosphor-properties';
import { Widget } from 'phosphor-widget';
import { CellEditorWidget, ITextChange, ICompletionRequest } from '../cells/editor';
import { CompletionWidget } from '../completion';
import { INotebookModel } from './model';
import { NotebookToolbar } from './toolbar';
import { ActiveNotebook } from './widget';
/**
 * A widget that hosts a notebook toolbar and content area.
 *
 * #### Notes
 * The widget keeps the document metadata in sync with the current
 * kernel on the context.
 */
export declare class NotebookPanel extends Widget {
    /**
     * Create a new content area for the notebook.
     */
    static createContent(model: INotebookModel, rendermime: RenderMime<Widget>): ActiveNotebook;
    /**
     * Create a new toolbar for the notebook.
     */
    static createToolbar(): NotebookToolbar;
    /**
     * Create a new completion widget.
     */
    static createCompletion(): CompletionWidget;
    /**
     * Construct a new notebook panel.
     */
    constructor(model: INotebookModel, rendermime: RenderMime<Widget>, context: IDocumentContext, clipboard: IClipboard);
    /**
     * Get the toolbar used by the widget.
     */
    toolbar: NotebookToolbar;
    /**
     * Get the content area used by the widget.
     *
     * #### Notes
     * This is a read-only property.
     */
    content: ActiveNotebook;
    /**
     * Get the rendermime instance used by the widget.
     *
     * #### Notes
     * This is a read-only property.
     */
    rendermime: RenderMime<Widget>;
    /**
     * Get the clipboard instance used by the widget.
     *
     * #### Notes
     * This is a read-only property.
     */
    clipboard: IClipboard;
    /**
     * Get the model used by the widget.
     *
     * #### Notes
     * This is a read-only property.
     */
    model: INotebookModel;
    /**
     * Get the document context for the widget.
     *
     * #### Notes
     * This is a read-only property.
     */
    context: IDocumentContext;
    /**
     * Dispose of the resources used by the widget.
     */
    dispose(): void;
    /**
     * Restart the kernel on the panel.
     */
    restart(): Promise<boolean>;
    /**
     * Handle a change in the kernel by updating the document metadata.
     */
    protected handleKernelChange(kernel: IKernel): void;
    /**
     * Handle a change in the content area.
     */
    protected onContentChanged(sender: ActiveNotebook, args: IChangedArgs<any>): void;
    /**
     * Handle a text changed signal from an editor.
     */
    protected onTextChange(editor: CellEditorWidget, change: ITextChange): void;
    /**
     * Handle a completion requested signal from an editor.
     */
    protected onCompletionRequest(editor: CellEditorWidget, change: ICompletionRequest): void;
    /**
     * Handle a completion selected signal from the completion widget.
     */
    protected onCompletionSelect(widget: CompletionWidget, value: string): void;
    private _rendermime;
    private _context;
    private _model;
    private _content;
    private _toolbar;
    private _clipboard;
    private _completion;
    private _pendingComplete;
}
