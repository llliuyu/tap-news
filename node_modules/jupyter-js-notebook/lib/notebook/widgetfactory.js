// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
'use strict';
var docmanager_1 = require('jupyter-js-ui/lib/docmanager');
var default_toolbar_1 = require('./default-toolbar');
var panel_1 = require('./panel');
/**
 * A widget factory for notebook panels.
 */
var NotebookWidgetFactory = (function () {
    /**
     * Construct a new notebook widget factory.
     */
    function NotebookWidgetFactory(rendermime, clipboard) {
        this._rendermime = null;
        this._clipboard = null;
        this._rendermime = rendermime.clone();
        this._clipboard = clipboard;
    }
    Object.defineProperty(NotebookWidgetFactory.prototype, "isDisposed", {
        /**
         * Get whether the factory has been disposed.
         */
        get: function () {
            return this._rendermime === null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources used by the factory.
     */
    NotebookWidgetFactory.prototype.dispose = function () {
        this._rendermime = null;
        this._clipboard = null;
    };
    /**
     * Create a new widget.
     */
    NotebookWidgetFactory.prototype.createNew = function (model, context, kernel) {
        var rendermime = this._rendermime.clone();
        if (kernel) {
            context.changeKernel(kernel);
        }
        else {
            var name_1 = docmanager_1.findKernel(model.defaultKernelName, model.defaultKernelLanguage, context.kernelspecs);
            context.changeKernel({ name: name_1 });
        }
        var panel = new panel_1.NotebookPanel(model, rendermime, context, this._clipboard);
        default_toolbar_1.ToolbarItems.populateDefaults(panel);
        return panel;
    };
    /**
     * Take an action on a widget before closing it.
     *
     * @returns A promise that resolves to true if the document should close
     *   and false otherwise.
     */
    NotebookWidgetFactory.prototype.beforeClose = function (model, context, widget) {
        // No special action required.
        return Promise.resolve(true);
    };
    return NotebookWidgetFactory;
}());
exports.NotebookWidgetFactory = NotebookWidgetFactory;
