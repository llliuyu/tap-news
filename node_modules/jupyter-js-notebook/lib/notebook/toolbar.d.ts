import { Message } from 'phosphor-messaging';
import { Widget } from 'phosphor-widget';
/**
 * A class which provides a notebook toolbar widget.
 */
export declare class NotebookToolbar extends Widget {
    /**
     * Construct a new toolbar widget.
     */
    constructor();
    /**
     * Add an item to the toolbar.
     *
     * @param name - The name of the widget to add to the toolbar.
     *
     * @param widget - The widget to add to the toolbar.
     *
     * @param after - The optional name of the item to insert after.
     *
     * #### Notes
     * An error is thrown if a widget of the same name is already given.
     * If `after` is not given, or the named widget is not in the toolbar,
     * the widget will be added to the end of the toolbar.
     */
    add(name: string, widget: Widget, after?: string): void;
    /**
     * List the names of the toolbar items.
     *
     * @returns A new array of the current toolbar item names.
     */
    list(): string[];
}
/**
 * A widget which acts as a button in a toolbar.
 */
export declare class ToolbarButton extends Widget {
    /**
     * Create the node for the toolbar button.
     */
    static createNode(): HTMLElement;
    /**
     * Construct a new toolbar button.
     */
    constructor(className: string, onClick: () => void, tooltip?: string);
    /**
     * Dispose of the resources held by the widget.
     */
    dispose(): void;
    /**
     * Handle the DOM events for the widget.
     *
     * @param event - The DOM event sent to the widget.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the dock panel's node. It should
     * not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * Handle `after_attach` messages for the widget.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * Handle `before_detach` messages for the widget.
     */
    protected onBeforeDetach(msg: Message): void;
    private _onClick;
}
