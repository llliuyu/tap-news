import { IDocumentModel } from 'jupyter-js-ui/lib/docmanager';
import { IObservableList, IListChangedArgs } from 'phosphor-observablelist';
import { IChangedArgs } from 'phosphor-properties';
import { ISignal } from 'phosphor-signaling';
import { ICellModel, CodeCellModel, RawCellModel, MarkdownCellModel } from '../cells/model';
import { IMetadataCursor } from '../common/metadata';
import { OberservableUndoableList } from '../common/undo';
import { nbformat } from './nbformat';
/**
 * The definition of a model object for a notebook widget.
 */
export interface INotebookModel extends IDocumentModel {
    /**
     * A signal emitted when a model state changes.
     */
    stateChanged: ISignal<IDocumentModel, IChangedArgs<any>>;
    /**
     * A signal emitted when a metadata field changes.
     */
    metadataChanged: ISignal<IDocumentModel, IChangedArgs<any>>;
    /**
     * The list of cells in the notebook.
     *
     * #### Notes
     * This is a read-only property.
     */
    cells: OberservableUndoableList<ICellModel>;
    /**
     * The major version number of the nbformat.
     *
     * #### Notes
     * This is a read-only property.
     */
    nbformat: number;
    /**
     * The minor version number of the nbformat.
     *
     * #### Notes
     * This is a read-only property.
     */
    nbformatMinor: number;
    /**
     * Get a metadata cursor for the notebook.
     *
     * #### Notes
     * This method is used to interact with a namespaced
     * set of metadata on the notebook.
     */
    getMetadata(namespace: string): IMetadataCursor;
    /**
     * List the metadata namespace keys for the notebook.
     *
     * #### Notes
     * Metadata associated with the nbformat are not included.
     */
    listMetadata(): string[];
    /**
     * A factory for creating a new code cell.
     *
     * @param source - The data to use for the original source data.
     *
     * @returns A new code cell. If a source cell is provided, the
     *   new cell will be intialized with the data from the source.
     *
     * #### Notes
     * If the source argument does not give an input mimetype, the code cell
     * defaults to the notebook [[defaultMimetype]].
     */
    createCodeCell(source?: nbformat.IBaseCell): CodeCellModel;
    /**
     * A factory for creating a new Markdown cell.
     *
     * @param source - The data to use for the original source data.
     *
     * @returns A new markdown cell. If a source cell is provided, the
     *   new cell will be intialized with the data from the source.
     */
    createMarkdownCell(source?: nbformat.IBaseCell): MarkdownCellModel;
    /**
     * A factory for creating a new raw cell.
     *
     * @param source - The data to use for the original source data.
     *
     * @returns A new raw cell. If a source cell is provided, the
     *   new cell will be intialized with the data from the source.
     */
    createRawCell(source?: nbformat.IBaseCell): RawCellModel;
}
/**
 * An implementation of a notebook Model.
 */
export declare class NotebookModel implements INotebookModel {
    /**
     * Construct a new notebook model.
     */
    constructor(languagePreference?: string);
    /**
     * A signal emitted when the document content changes.
     */
    contentChanged: ISignal<INotebookModel, void>;
    /**
     * A signal emitted when a model state changes.
     */
    stateChanged: ISignal<IDocumentModel, IChangedArgs<any>>;
    /**
     * A signal emitted when a metadata field changes.
     */
    metadataChanged: ISignal<IDocumentModel, IChangedArgs<any>>;
    /**
     * Get the observable list of notebook cells.
     *
     * #### Notes
     * This is a read-only property.
     */
    cells: OberservableUndoableList<ICellModel>;
    /**
     * The major version number of the nbformat.
     *
     * #### Notes
     * This is a read-only property.
     */
    nbformat: number;
    /**
     * The minor version number of the nbformat.
     *
     * #### Notes
     * This is a read-only property.
     */
    nbformatMinor: number;
    /**
     * The dirty state of the model.
     *
     * #### Notes
     * This should be cleared when the document is loaded from
     * or saved to disk.
     */
    dirty: boolean;
    /**
     * The read-only state of the model.
     */
    readOnly: boolean;
    /**
     * The default kernel name of the document.
     *
     * #### Notes
     * This is a read-only property.
     */
    defaultKernelName: string;
    /**
     * The default kernel language of the document.
     *
     * #### Notes
     * This is a read-only property.
     */
    defaultKernelLanguage: string;
    /**
     * Get whether the model is disposed.
     *
     * #### Notes
     * This is a read-only property.
     */
    isDisposed: boolean;
    /**
     * Dispose of the resources held by the model.
     */
    dispose(): void;
    /**
     * Serialize the model to a string.
     */
    toString(): string;
    /**
     * Deserialize the model from a string.
     *
     * #### Notes
     * Should emit a [contentChanged] signal.
     */
    fromString(value: string): void;
    /**
     * Serialize the model to JSON.
     */
    toJSON(): nbformat.INotebookContent;
    /**
     * Deserialize the model from JSON.
     *
     * #### Notes
     * Should emit a [contentChanged] signal.
     */
    fromJSON(value: nbformat.INotebookContent): void;
    /**
     * Initialize the model state.
     */
    initialize(): void;
    /**
     * A factory for creating a new code cell.
     *
     * @param source - The data to use for the original source data.
     *
     * @returns A new code cell. If a source cell is provided, the
     *   new cell will be intialized with the data from the source.
     *
     * #### Notes
     * If the source argument does not give an input mimetype, the code cell
     * defaults to the notebook [[defaultMimetype]].
     */
    createCodeCell(source?: nbformat.IBaseCell): CodeCellModel;
    /**
     * A factory for creating a new Markdown cell.
     *
     * @param source - The data to use for the original source data.
     *
     * @returns A new markdown cell. If a source cell is provided, the
     *   new cell will be intialized with the data from the source.
     */
    createMarkdownCell(source?: nbformat.IBaseCell): MarkdownCellModel;
    /**
     * A factory for creating a new raw cell.
     *
     * @param source - The data to use for the original source data.
     *
     * @returns A new raw cell. If a source cell is provided, the
     *   new cell will be intialized with the data from the source.
     */
    createRawCell(source?: nbformat.IBaseCell): RawCellModel;
    /**
     * Get a metadata cursor for the notebook.
     *
     * #### Notes
     * Metadata associated with the nbformat spec are set directly
     * on the model.  This method is used to interact with a namespaced
     * set of metadata on the notebook.
     */
    getMetadata(name: string): IMetadataCursor;
    /**
     * List the metadata namespace keys for the notebook.
     */
    listMetadata(): string[];
    /**
     * Handle a change in the cells list.
     */
    protected onCellsChanged(list: IObservableList<ICellModel>, change: IListChangedArgs<ICellModel>): void;
    /**
     * Handle a change to a cell state.
     */
    protected onCellChanged(cell: ICellModel, change: any): void;
    /**
     * Set the cursor data for a given field.
     */
    protected setCursorData(name: string, newValue: any): void;
    private _cells;
    private _metadata;
    private _dirty;
    private _readOnly;
    private _cursors;
    private _nbformat;
    private _nbformatMinor;
}
