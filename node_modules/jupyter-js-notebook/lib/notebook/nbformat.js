// Notebook format interfaces
// https://nbformat.readthedocs.org/en/latest/format_description.html
// https://github.com/jupyter/nbformat/blob/master/nbformat/v4/nbformat.v4.schema.json
"use strict";
/**
 * A namespace for nbformat interfaces.
 */
var nbformat;
(function (nbformat) {
    /**
     * The major version of the notebook format.
     */
    nbformat.MAJOR_VERSION = 4;
    /**
     * The minor version of the notebook format.
     */
    nbformat.MINOR_VERSION = 0;
    /**
     * Check if cell is of markdown type.
     */
    function isMarkdownCell(d) {
        return d.cell_type === 'markdown';
    }
    nbformat.isMarkdownCell = isMarkdownCell;
    /**
     * Check if cell is of code type.
     */
    function isCodeCell(d) {
        return d.cell_type === 'code';
    }
    nbformat.isCodeCell = isCodeCell;
    /**
     * Check if cell is of raw type.
     */
    function isRawCell(d) {
        return d.cell_type === 'raw';
    }
    nbformat.isRawCell = isRawCell;
    /**
     * Check if output is an `execute_result`.
     */
    function isExecuteResult(d) {
        return d.output_type === 'execute_result';
    }
    nbformat.isExecuteResult = isExecuteResult;
    /**
     * Check if output is a `display_data`.
     */
    function isDisplayData(d) {
        return d.output_type === 'display_data';
    }
    nbformat.isDisplayData = isDisplayData;
    /**
     * Check if output is `stream`.
     */
    function isStream(d) {
        return d.output_type === 'stream';
    }
    nbformat.isStream = isStream;
    /**
     * Check if output is `error`.
     */
    function isError(d) {
        return d.output_type === 'error';
    }
    nbformat.isError = isError;
})(nbformat = exports.nbformat || (exports.nbformat = {}));
