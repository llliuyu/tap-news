// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var jupyter_js_services_1 = require('jupyter-js-services');
var phosphor_widget_1 = require('phosphor-widget');
var toolbar_1 = require('./toolbar');
var actions_1 = require('./actions');
/**
 * The class name added to toolbar save button.
 */
var TOOLBAR_SAVE = 'jp-NBToolbar-save';
/**
 * The class name added to toolbar insert button.
 */
var TOOLBAR_INSERT = 'jp-NBToolbar-insert';
/**
 * The class name added to toolbar cut button.
 */
var TOOLBAR_CUT = 'jp-NBToolbar-cut';
/**
 * The class name added to toolbar copy button.
 */
var TOOLBAR_COPY = 'jp-NBToolbar-copy';
/**
 * The class name added to toolbar paste button.
 */
var TOOLBAR_PASTE = 'jp-NBToolbar-paste';
/**
 * The class name added to toolbar run button.
 */
var TOOLBAR_RUN = 'jp-NBToolbar-run';
/**
 * The class name added to toolbar interrupt button.
 */
var TOOLBAR_INTERRUPT = 'jp-NBToolbar-interrupt';
/**
 * The class name added to toolbar restart button.
 */
var TOOLBAR_RESTART = 'jp-NBToolbar-restart';
/**
 * The class name added to toolbar cell type dropdown wrapper.
 */
var TOOLBAR_CELL_WRAP = 'jp-NBToolbar-cellWrapper';
/**
 * The class name added to toolbar cell type dropdown.
 */
var TOOLBAR_CELL = 'jp-NBToolbar-cellType';
/**
 * The class name added to toolbar kernel name text.
 */
var TOOLBAR_KERNEL = 'jp-NBToolbar-kernelName';
/**
 * The class name added to toolbar kernel indicator icon.
 */
var TOOLBAR_INDICATOR = 'jp-NBToolbar-kernelIndicator';
/**
 * The class name added to a busy kernel indicator.
 */
var TOOLBAR_BUSY = 'jp-mod-busy';
/**
 * A namespace for the default toolbar items.
 */
var ToolbarItems;
(function (ToolbarItems) {
    /**
     * Create save button toolbar item.
     */
    function createSaveButton(panel) {
        return new toolbar_1.ToolbarButton(TOOLBAR_SAVE, function () {
            panel.context.save();
        }, 'Save the notebook contents');
    }
    ToolbarItems.createSaveButton = createSaveButton;
    /**
     * Create an insert toolbar item.
     */
    function createInsertButton(panel) {
        return new toolbar_1.ToolbarButton(TOOLBAR_INSERT, function () {
            actions_1.NotebookActions.insertBelow(panel.content);
        }, 'Insert a cell below');
    }
    ToolbarItems.createInsertButton = createInsertButton;
    /**
     * Create a cut toolbar item.
     */
    function createCutButton(panel) {
        return new toolbar_1.ToolbarButton(TOOLBAR_CUT, function () {
            actions_1.NotebookActions.cut(panel.content, panel.clipboard);
        }, 'Cut the selected cell(s)');
    }
    ToolbarItems.createCutButton = createCutButton;
    /**
     * Create a copy toolbar item.
     */
    function createCopyButton(panel) {
        return new toolbar_1.ToolbarButton(TOOLBAR_COPY, function () {
            actions_1.NotebookActions.copy(panel.content, panel.clipboard);
        }, 'Copy the selected cell(s)');
    }
    ToolbarItems.createCopyButton = createCopyButton;
    /**
     * Create a paste toolbar item.
     */
    function createPasteButton(panel) {
        return new toolbar_1.ToolbarButton(TOOLBAR_PASTE, function () {
            actions_1.NotebookActions.paste(panel.content, panel.clipboard);
        }, 'Paste cell(s) from the clipboard');
    }
    ToolbarItems.createPasteButton = createPasteButton;
    /**
     * Create a run toolbar item.
     */
    function createRunButton(panel) {
        return new toolbar_1.ToolbarButton(TOOLBAR_RUN, function () {
            actions_1.NotebookActions.runAndAdvance(panel.content, panel.context.kernel);
        }, 'Run the selected cell(s) and advance');
    }
    ToolbarItems.createRunButton = createRunButton;
    /**
     * Create an interrupt toolbar item.
     */
    function createInterruptButton(panel) {
        return new toolbar_1.ToolbarButton(TOOLBAR_INTERRUPT, function () {
            if (panel.context.kernel) {
                panel.context.kernel.interrupt();
            }
        }, 'Interrupt the kernel');
    }
    ToolbarItems.createInterruptButton = createInterruptButton;
    /**
     * Create a restart toolbar item.
     */
    function createRestartButton(panel) {
        return new toolbar_1.ToolbarButton(TOOLBAR_RESTART, function () {
            panel.restart();
        }, 'Restart the kernel');
    }
    ToolbarItems.createRestartButton = createRestartButton;
    /**
     * Create a cell type switcher item.
     */
    function createCellTypeItem(panel) {
        return new CellTypeSwitcher(panel);
    }
    ToolbarItems.createCellTypeItem = createCellTypeItem;
    /**
     * Create a kernel name indicator item.
     */
    function createKernelNameItem(panel) {
        var widget = new phosphor_widget_1.Widget();
        widget.addClass(TOOLBAR_KERNEL);
        widget.node.textContent = 'No Kernel!';
        if (panel.context.kernel) {
            panel.context.kernel.getKernelSpec().then(function (spec) {
                widget.node.textContent = spec.display_name;
            });
        }
        panel.context.kernelChanged.connect(function () {
            panel.context.kernel.getKernelSpec().then(function (spec) {
                widget.node.textContent = spec.display_name;
            });
        });
        return widget;
    }
    ToolbarItems.createKernelNameItem = createKernelNameItem;
    /**
     * Create a kernel status indicator item.
     */
    function createKernelStatusItem(panel) {
        return new KernelIndicator(panel.context);
    }
    ToolbarItems.createKernelStatusItem = createKernelStatusItem;
    /**
     * Add the default items to a toolbar.
     */
    function populateDefaults(panel) {
        var toolbar = panel.toolbar;
        toolbar.add('save', createSaveButton(panel));
        toolbar.add('insert', createInsertButton(panel));
        toolbar.add('cut', createCutButton(panel));
        toolbar.add('copy', createCopyButton(panel));
        toolbar.add('paste', createPasteButton(panel));
        toolbar.add('run', createRunButton(panel));
        toolbar.add('interrupt', createInterruptButton(panel));
        toolbar.add('restart', createRestartButton(panel));
        toolbar.add('cellType', createCellTypeItem(panel));
        toolbar.add('kernelName', createKernelNameItem(panel));
        toolbar.add('kernelStatus', createKernelStatusItem(panel));
    }
    ToolbarItems.populateDefaults = populateDefaults;
})(ToolbarItems = exports.ToolbarItems || (exports.ToolbarItems = {}));
/**
 * A toolbar widget that switches cell types.
 */
var CellTypeSwitcher = (function (_super) {
    __extends(CellTypeSwitcher, _super);
    /**
     * Construct a new cell type switcher.
     */
    function CellTypeSwitcher(panel) {
        var _this = this;
        _super.call(this);
        this._changeGuard = false;
        this.addClass(TOOLBAR_CELL_WRAP);
        var select = this.node.firstChild;
        // Set the initial value.
        var index = panel.content.activeCellIndex;
        select.value = panel.model.cells.get(index).type;
        // Follow the type of the current cell.
        panel.content.stateChanged.connect(function (sender, args) {
            if (args.name === 'activeCellIndex') {
                _this._changeGuard = true;
                select.value = panel.model.cells.get(args.newValue).type;
                _this._changeGuard = false;
            }
        });
        // Follow a change in the cells.
        panel.content.model.cells.changed.connect(function (sender, args) {
            index = panel.content.activeCellIndex;
            _this._changeGuard = true;
            select.value = panel.model.cells.get(index).type;
            _this._changeGuard = false;
        });
        // Change current cell type on a change in the dropdown.
        select.addEventListener('change', function (event) {
            if (!_this._changeGuard) {
                actions_1.NotebookActions.changeCellType(panel.content, select.value);
            }
        });
    }
    /**
     * Create the node for the cell type switcher.
     */
    CellTypeSwitcher.createNode = function () {
        var div = document.createElement('div');
        var select = document.createElement('select');
        for (var _i = 0, _a = ['Code', 'Markdown', 'Raw']; _i < _a.length; _i++) {
            var t = _a[_i];
            var option = document.createElement('option');
            option.value = t.toLowerCase();
            option.textContent = t;
            select.appendChild(option);
        }
        select.className = TOOLBAR_CELL;
        div.appendChild(select);
        return div;
    };
    return CellTypeSwitcher;
}(phosphor_widget_1.Widget));
/**
 * A toolbar item that displays kernel status.
 */
var KernelIndicator = (function (_super) {
    __extends(KernelIndicator, _super);
    /**
     * Construct a new kernel status widget.
     */
    function KernelIndicator(context) {
        var _this = this;
        _super.call(this);
        this.addClass(TOOLBAR_INDICATOR);
        if (context.kernel) {
            this._handleStatus(context.kernel, context.kernel.status);
            context.kernel.statusChanged.connect(this._handleStatus, this);
        }
        else {
            this.addClass(TOOLBAR_BUSY);
            this.node.title = 'No Kernel!';
        }
        context.kernelChanged.connect(function (c, kernel) {
            _this._handleStatus(kernel, kernel.status);
            kernel.statusChanged.connect(_this._handleStatus, _this);
        });
    }
    /**
     * Handle a status on a kernel.
     */
    KernelIndicator.prototype._handleStatus = function (kernel, status) {
        this.toggleClass(TOOLBAR_BUSY, status !== jupyter_js_services_1.KernelStatus.Idle);
        switch (status) {
            case jupyter_js_services_1.KernelStatus.Idle:
                this.node.title = 'Kernel Idle';
                break;
            case jupyter_js_services_1.KernelStatus.Busy:
                this.node.title = 'Kernel Busy';
                break;
            case jupyter_js_services_1.KernelStatus.Dead:
                this.node.title = 'Kernel Died';
                break;
            case jupyter_js_services_1.KernelStatus.Reconnecting:
                this.node.title = 'Kernel Reconnecting';
                break;
            case jupyter_js_services_1.KernelStatus.Restarting:
                this.node.title = 'Kernel Restarting';
                break;
            case jupyter_js_services_1.KernelStatus.Starting:
                this.node.title = 'Kernel Starting';
                break;
            default:
                this.node.title = 'Kernel Status Unknown';
                break;
        }
    };
    return KernelIndicator;
}(phosphor_widget_1.Widget));
