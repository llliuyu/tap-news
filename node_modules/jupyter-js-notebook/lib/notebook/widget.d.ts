import { RenderMime } from 'jupyter-js-ui/lib/rendermime';
import { Message } from 'phosphor-messaging';
import { IObservableList, IListChangedArgs } from 'phosphor-observablelist';
import { IChangedArgs } from 'phosphor-properties';
import { ISignal } from 'phosphor-signaling';
import { Widget } from 'phosphor-widget';
import { ICellModel, BaseCellWidget } from '../cells';
import { EdgeLocation } from '../cells/editor';
import { INotebookModel } from './model';
/**
 * The interactivity modes for the notebook.
 */
export declare type NotebookMode = 'command' | 'edit';
/**
 * A widget which renders notebooks.
 */
export declare class NotebookRenderer extends Widget {
    /**
     * Create a new cell widget given a cell model.
     */
    static createCell(cell: ICellModel, rendermime: RenderMime<Widget>): BaseCellWidget;
    /**
     * Construct a notebook widget.
     */
    constructor(model: INotebookModel, rendermime: RenderMime<Widget>);
    /**
     * Get the model for the widget.
     *
     * #### Notes
     * This is a read-only property.
     */
    model: INotebookModel;
    /**
     * Get the rendermime instance used by the widget.
     *
     * #### Notes
     * This is a read-only property.
     */
    rendermime: RenderMime<Widget>;
    /**
     * Get the child widget at the specified index.
     */
    childAt(index: number): BaseCellWidget;
    /**
     * Get the number of child widgets.
     */
    childCount(): number;
    /**
     * Dispose of the resources held by the widget.
     */
    dispose(): void;
    /**
     * Find the cell index containing the target html element.
     *
     * #### Notes
     * Returns -1 if the cell is not found.
     */
    protected findCell(node: HTMLElement): number;
    /**
     * Handle changes to the notebook model.
     */
    protected onMetadataChanged(model: INotebookModel, args: IChangedArgs<any>): void;
    /**
     * Handle a change cells event.
     */
    protected onCellsChanged(sender: IObservableList<ICellModel>, args: IListChangedArgs<ICellModel>): void;
    /**
     * The mime type for code cells.
     *
     * #### Notes
     * The default implementation uses the language info to set the
     * mimetype.
     */
    protected getMimetype(): string;
    /**
     * Initialize a cell widget.
     */
    protected initializeCellWidget(widget: BaseCellWidget): void;
    /**
     * Update the mimetype of code widgets.
     */
    private _updateMimetypes();
    private _model;
    private _rendermime;
    private _mimetype;
    private _langInfoCursor;
}
/**
 * A notebook widget that supports interactivity.
 */
export declare class ActiveNotebook extends NotebookRenderer {
    /**
     * A signal emitted when the state of the notebook changes.
     */
    stateChanged: ISignal<ActiveNotebook, IChangedArgs<any>>;
    /**
     * The interactivity mode of the notebook.
     */
    mode: NotebookMode;
    /**
     * The active cell index of the notebook.
     */
    activeCellIndex: number;
    /**
     * Select a cell widget.
     */
    select(widget: BaseCellWidget): void;
    /**
     * Deselect a cell widget.
     *
     * #### Notes
     * This has no effect on the "active" cell.
     */
    deselect(widget: BaseCellWidget): void;
    /**
     * Whether a cell is selected or is the active cell.
     */
    isSelected(widget: BaseCellWidget): boolean;
    /**
     * Handle the DOM events for the widget.
     *
     * @param event - The DOM event sent to the widget.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the dock panel's node. It should
     * not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * Handle `after_attach` messages for the widget.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * Handle `before_detach` messages for the widget.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * Handle `update-request` messages sent to the widget.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * Initialize a cell widget.
     */
    protected initializeCellWidget(widget: BaseCellWidget): void;
    /**
     * Handle edge request signals from cells.
     */
    protected onEdgeRequest(widget: Widget, location: EdgeLocation): void;
    /**
     * Handle `click` events for the widget.
     */
    private _evtClick(event);
    /**
     * Handle `dblclick` events for the widget.
     */
    private _evtDblClick(event);
    private _mode;
    private _activeCellIndex;
}
