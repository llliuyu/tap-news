import { IKernelId } from 'jupyter-js-services';
import { IWidgetFactory, IDocumentContext } from 'jupyter-js-ui/lib/docmanager';
import { RenderMime } from 'jupyter-js-ui/lib/rendermime';
import { MimeData as IClipboard } from 'phosphor-dragdrop';
import { Widget } from 'phosphor-widget';
import { INotebookModel } from './model';
import { NotebookPanel } from './panel';
/**
 * A widget factory for notebook panels.
 */
export declare class NotebookWidgetFactory implements IWidgetFactory<NotebookPanel> {
    /**
     * Construct a new notebook widget factory.
     */
    constructor(rendermime: RenderMime<Widget>, clipboard: IClipboard);
    /**
     * Get whether the factory has been disposed.
     */
    isDisposed: boolean;
    /**
     * Dispose of the resources used by the factory.
     */
    dispose(): void;
    /**
     * Create a new widget.
     */
    createNew(model: INotebookModel, context: IDocumentContext, kernel?: IKernelId): NotebookPanel;
    /**
     * Take an action on a widget before closing it.
     *
     * @returns A promise that resolves to true if the document should close
     *   and false otherwise.
     */
    beforeClose(model: INotebookModel, context: IDocumentContext, widget: NotebookPanel): Promise<boolean>;
    private _rendermime;
    private _clipboard;
}
