/**
 * A namespace for nbformat interfaces.
 */
export declare namespace nbformat {
    /**
     * The major version of the notebook format.
     */
    const MAJOR_VERSION: number;
    /**
     * The minor version of the notebook format.
     */
    const MINOR_VERSION: number;
    /**
     * The kernelspec metadata.
     */
    interface IKernelspecMetadata {
        name: string;
        display_name: string;
    }
    /**
     * The language info metatda
     */
    interface ILanguageInfoMetadata {
        name: string;
        codemirror_mode?: any;
        file_extension?: string;
        mimetype?: string;
        pygments_lexer?: string;
    }
    /**
     * The default metadata for the notebook.
     */
    interface INotebookMetadata {
        kernelspec: IKernelspecMetadata;
        language_info: ILanguageInfoMetadata;
        orig_nbformat: number;
    }
    /**
     * The notebook content.
     */
    interface INotebookContent {
        metadata: INotebookMetadata;
        nbformat_minor: number;
        nbformat: number;
        cells: ICell[];
    }
    /**
     * A type alias for a multiline string.
     *
     * #### Notes
     * On disk, this could be a string[] too.
     */
    type multilineString = string;
    /**
     * A mime-type keyed dictionary of data.
     */
    interface MimeBundle {
        [key: string]: multilineString;
        'application/json'?: any;
    }
    /**
     * A type which describes the type of cell.
     */
    type CellType = 'code' | 'markdown' | 'raw';
    /**
     * Cell-level metadata.
     */
    interface IBaseCellMetadata {
        /**
         * Whether the cell is trusted.
         *
         * #### Notes
         * This is not strictly part of the nbformat spec, but it is added by
         * the contents manager.
         *
         * See http://jupyter-notebook.readthedocs.org/en/latest/security.html.
         */
        trusted: boolean;
        /**
         * The cell's name. If present, must be a non-empty string.
         */
        name?: string;
        /**
         * The cell's tags. Tags must be unique, and must not contain commas.
         */
        tags?: string[];
    }
    /**
     * The base cell interface.
     */
    interface IBaseCell {
        /**
         * String identifying the type of cell.
         */
        cell_type: CellType;
        /**
         * Contents of the cell, represented as an array of lines.
         */
        source: multilineString;
        /**
         * Cell-level metadata.
         */
        metadata: ICellMetadata;
    }
    /**
     * Metadata for the raw cell.
     */
    interface IRawCellMetadata extends IBaseCellMetadata {
        /**
         * Raw cell metadata format for nbconvert.
         */
        format?: string;
    }
    /**
     * A raw cell.
     */
    interface IRawCell extends IBaseCell {
        /**
         * String identifying the type of cell.
         */
        cell_type: 'raw';
        /**
         * Cell-level metadata.
         */
        metadata: IRawCellMetadata;
    }
    /**
     * A markdown cell.
     */
    interface IMarkdownCell extends IBaseCell {
        /**
         * String identifying the type of cell.
         */
        cell_type: 'markdown';
    }
    /**
     * Metadata for a code cell.
     */
    interface ICodeCellMetadata extends IBaseCellMetadata {
        /**
         * Whether the cell is collapsed/expanded.
         */
        collapsed?: boolean;
        /**
         * Whether the cell's output is scrolled, unscrolled, or autoscrolled.
         */
        scrolled?: boolean | 'auto';
    }
    /**
     * A code cell.
     */
    interface ICodeCell extends IBaseCell {
        /**
         * String identifying the type of cell.
         */
        cell_type: 'code';
        /**
         * Cell-level metadata.
         */
        metadata: ICodeCellMetadata;
        /**
         * Execution, display, or stream outputs.
         */
        outputs: IOutput[];
        /**
         * The code cell's prompt number. Will be null if the cell has not been run.
         */
        execution_count: number;
    }
    /**
     * A cell union type.
     */
    type ICell = IBaseCell | IRawCell | IMarkdownCell | ICodeCell;
    /**
     * A union metadata type.
     */
    type ICellMetadata = IBaseCellMetadata | IRawCellMetadata | ICodeCellMetadata;
    /**
     * Check if cell is of markdown type.
     */
    function isMarkdownCell(d: IBaseCell): d is IMarkdownCell;
    /**
     * Check if cell is of code type.
     */
    function isCodeCell(d: IBaseCell): d is ICodeCell;
    /**
     * Check if cell is of raw type.
     */
    function isRawCell(d: IBaseCell): d is IRawCell;
    /**
     * The valid output types.
     */
    type OutputType = 'execute_result' | 'display_data' | 'stream' | 'error';
    /**
     * The base output type.
     */
    interface IBaseOutput {
        /**
         * Type of cell output.
         */
        output_type: OutputType;
    }
    /**
     * Result of executing a code cell.
     */
    interface IExecuteResult extends IBaseOutput {
        /**
         * Type of cell output.
         */
        output_type: 'execute_result';
        /**
         * A result's prompt number.
         */
        execution_count: number;
        /**
         * A mime-type keyed dictionary of data.
         */
        data: MimeBundle;
        /**
         * Cell output metadata.
         */
        metadata: {};
    }
    /**
     * Data displayed as a result of code cell execution.
     */
    interface IDisplayData extends IBaseOutput {
        /**
         * Type of cell output.
         */
        output_type: 'display_data';
        /**
         * A mime-type keyed dictionary of data.
         */
        data: MimeBundle;
        /**
         * Cell output metadata.
         */
        metadata: {};
    }
    /**
     * Stream output from a code cell.
     */
    interface IStream extends IBaseOutput {
        /**
         * Type of cell output.
         */
        output_type: 'stream';
        /**
         * The name of the stream.
         */
        name: 'stdout' | 'stderr';
        /**
         * The stream's text output.
         */
        text: multilineString;
    }
    /**
     * Output of an error that occurred during code cell execution.
     */
    interface IError extends IBaseOutput {
        /**
         * Type of cell output.
         */
        output_type: 'error';
        /**
         * The name of the error.
         */
        ename: string;
        /**
         * The value, or message, of the error.
         */
        evalue: string;
        /**
         * The error's traceback.
         */
        traceback: string[];
    }
    /**
     * An output union type.
     */
    type IOutput = IExecuteResult | IDisplayData | IStream | IError;
    /**
     * Check if output is an `execute_result`.
     */
    function isExecuteResult(d: IBaseOutput): d is IExecuteResult;
    /**
     * Check if output is a `display_data`.
     */
    function isDisplayData(d: IBaseOutput): d is IDisplayData;
    /**
     * Check if output is `stream`.
     */
    function isStream(d: IBaseOutput): d is IStream;
    /**
     * Check if output is `error`.
     */
    function isError(d: IBaseOutput): d is IError;
}
