import { Message } from 'phosphor-messaging';
import { ISignal } from 'phosphor-signaling';
import { Widget } from 'phosphor-widget';
import { ICompletionModel, ICompletionItem } from './model';
/**
 * A widget that enables text completion.
 */
export declare class CompletionWidget extends Widget {
    /**
     * Create the DOM node for a text completion menu.
     */
    static createNode(): HTMLElement;
    /**
     * Create an item node for a text completion menu.
     */
    static createItemNode(item: ICompletionItem): HTMLElement;
    /**
     * Construct a text completion menu widget.
     */
    constructor(model: ICompletionModel);
    /**
     * A signal emitted when a selection is made from the completion menu.
     */
    selected: ISignal<CompletionWidget, string>;
    /**
     * The model used by the completion widget.
     *
     * #### Notes
     * This is a read-only property.
     */
    model: ICompletionModel;
    /**
     * The semantic parent of the completion widget, its reference widget.
     */
    reference: Widget;
    /**
     * Dispose of the resources held by the completion widget.
     */
    dispose(): void;
    /**
     * Handle the DOM events for the widget.
     *
     * @param event - The DOM event sent to the widget.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the dock panel's node. It should
     * not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * Handle `after_attach` messages for the widget.
     *
     * #### Notes
     * Captures window events in capture phase to dismiss or navigate the
     * completion widget.
     *
     * Because its parent (reference) widgets use window listeners instead of
     * document listeners, the completion widget must also use window listeners
     * in the capture phase.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * Handle `before_detach` messages for the widget.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * Handle `update_request` messages.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * Handle mousedown events for the widget.
     */
    private _evtMousedown(event);
    /**
     * Handle keydown events for the widget.
     */
    private _evtKeydown(event);
    /**
     * Handle scroll events for the widget
     */
    private _evtScroll(event);
    private _activeIndex;
    private _model;
    private _reference;
}
