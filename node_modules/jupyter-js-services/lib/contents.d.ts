import { IAjaxSettings } from 'jupyter-js-utils';
/**
 * Options for a contents object.
 */
export interface IContentsOpts {
    /**
     * The type of file.
     *
     * #### Notes
     * One of `["directory", "file", "notebook"]`.
     */
    type?: string;
    /**
     * The format of the file `content`.
     *
     * #### Notes
     * One of `['json', text', 'base64']`.
     *
     * Only relevant for type: `'file'`.
     */
    format?: string;
    /**
     * The file content, or whether to include the file contents.
     *
     * #### Notes
     * Can either contain the content of a file for upload, or a boolean
     * indicating whether to include contents in the response.
     */
    content?: any;
    /**
     * The file extension, including a leading `.`.
     */
    ext?: string;
    /**
     * The name of the file.
     */
    name?: string;
}
/**
 * Contents model.
 *
 * #### Notes
 * If the model does not contain content, the `content`, `format`, and
 * `mimetype` keys will be `null`.
 */
export interface IContentsModel {
    /**
     * Name of the contents file.
     *
     * #### Notes
     *  Equivalent to the last part of the `path` field.
     */
    name: string;
    /**
     * The full file path.
     *
     * #### Notes
     * It will *not* start with `/`, and it will be `/`-delimited.
     */
    path: string;
    /**
     * The type of file.
     *
     * #### Notes
     * One of `["directory", "file", "notebook"]`
     */
    type: string;
    /**
     * Whether the requester has permission to edit the file they have requested.
     */
    writable?: boolean;
    /**
     * File creation timestamp.
     */
    created?: string;
    /**
     * Last modified timestamp.
     */
    last_modified?: string;
    /**
     * Specify the mime-type of file contents.
     *
     * #### Notes
     * Only non-`null` when `content` is present and `type` is `"file"`.
     */
    mimetype?: string;
    /**
     * The file content.
     */
    content?: any;
    /**
     * The format of the file `content`.
     *
     * #### Notes
     * One of `{ 'json', text', 'base64' }`
     *
     * Only relevant for type: 'file'
     */
    format?: string;
}
/**
 * Checkpoint model.
 */
export interface ICheckpointModel {
    /**
     * The unique identifier for the checkpoint.
     */
    id: string;
    /**
     * Last modified timestamp.
     */
    last_modified: string;
}
/**
 * Interface that a contents manager should implement.
 **/
export interface IContentsManager {
    /**
     * Get a file or directory.
     *
     * @param path: Path to the file or directory.
     *
     * @param options: The options describing the file.
     *   Use `options.content = true` to return file contents.
     *
     * @returns A promise which resolves with the file content.
     */
    get(path: string, options?: IContentsOpts): Promise<IContentsModel>;
    /**
     * Create a new untitled file or directory in the specified directory path.
     *
     * @param path: The directory in which to create the new file/directory.
     *
     * @param options: The options describing the new item.
     *
     * @returns A promise which resolves with the created file content when the
     *    file is created.
     */
    newUntitled(path: string, options: IContentsOpts): Promise<IContentsModel>;
    /**
     * Delete a file.
     *
     * @param path - The path to the file.
     *
     * @returns A promise which resolves when the file is deleted.
     */
    delete(path: string): Promise<void>;
    /**
     * Rename a file or directory.
     *
     * @param path - The original file path.
     *
     * @param newPath - The new file path.
     *
     * @returns A promise which resolves with the new file content model when the
     *   file is renamed.
     */
    rename(path: string, newPath: string): Promise<IContentsModel>;
    /**
     * Save a file.
     *
     * @param path - The desired file path.
     *
     * @param model - The file model to save.
     *
     * @returns A promise which resolves with the file content model when the
     *   file is saved.
     */
    save(path: string, model: any): Promise<IContentsModel>;
    /**
     * Copy a file into a given directory.
     *
     * @param path - The original file path.
     *
     * @param toDir - The destination directory path.
     *
     * @returns A promise which resolves with the new content model when the
     *  file is copied.
     */
    copy(path: string, toDir: string): Promise<IContentsModel>;
    /**
     * List notebooks and directories at a given path.
     *
     * @param: path - The path in which to list the contents.
     *
     * @returns A promise which resolves with a model with the directory content.
     */
    listContents(path: string): Promise<IContentsModel>;
    /**
     * Create a checkpoint for a file.
     *
     * @param path - The path of the file.
     *
     * @returns A promise which resolves with the new checkpoint model when the
     *   checkpoint is created.
     */
    createCheckpoint(path: string): Promise<ICheckpointModel>;
    /**
     * List available checkpoints for a file.
     *
     * @param path - The path of the file.
     *
     * @returns A promise which resolves with a list of checkpoint models for
     *    the file.
     */
    listCheckpoints(path: string): Promise<ICheckpointModel[]>;
    /**
     * Restore a file to a known checkpoint state.
     *
     * @param path - The path of the file.
     *
     * @param checkpointID - The id of the checkpoint to restore.
     *
     * @returns A promise which resolves when the checkpoint is restored.
     */
    restoreCheckpoint(path: string, checkpointID: string): Promise<void>;
    /**
     * Delete a checkpoint for a file.
     *
     * @param path - The path of the file.
     *
     * @param checkpointID - The id of the checkpoint to delete.
     *
     * @returns A promise which resolves when the checkpoint is deleted.
     */
    deleteCheckpoint(path: string, checkpointID: string): Promise<void>;
    /**
     * Optional default settings for ajax requests, if applicable.
     */
    ajaxSettings?: IAjaxSettings;
}
/**
 * A contents manager that passes file operations to the server.
 *
 * This includes checkpointing with the normal file operations.
 */
export declare class ContentsManager implements IContentsManager {
    /**
     * Construct a new contents manager object.
     *
     * @param baseUrl - The base URL for the server.
     *
     * @param ajaxSettings - Optional initial ajax settings.
     */
    constructor(baseUrl?: string, ajaxSettings?: IAjaxSettings);
    /**
     * Get a copy of the default ajax settings for the contents manager.
     */
    /**
     * Set the default ajax settings for the contents manager.
     */
    ajaxSettings: IAjaxSettings;
    /**
     * Get a file or directory.
     *
     * @param path: Path to the file or directory.
     *
     * @param options: The options describing the file.
     *   Use `options.content = true` to return file contents.
     *
     * @returns A promise which resolves with the file content.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    get(path: string, options?: IContentsOpts): Promise<IContentsModel>;
    /**
     * Create a new untitled file or directory in the specified directory path.
     *
     * @param path: The directory in which to create the new file/directory.
     *
     * @param options: The options describing the new item.
     *
     * @returns A promise which resolves with the created file content when the
     *    file is created.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    newUntitled(path: string, options?: IContentsOpts): Promise<IContentsModel>;
    /**
     * Delete a file.
     *
     * @param path - The path to the file.
     *
     * @returns A promise which resolves when the file is deleted.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).
     */
    delete(path: string): Promise<void>;
    /**
     * Rename a file or directory.
     *
     * @param path - The original file path.
     *
     * @param newPath - The new file path.
     *
     * @returns A promise which resolves with the new file contents model when
     *   the file is renamed.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    rename(path: string, newPath: string): Promise<IContentsModel>;
    /**
     * Save a file.
     *
     * @param path - The desired file path.
     *
     * @param model - The file model to save.
     *
     * @returns A promise which resolves with the file contents model when the
     *   file is saved.
     *
     * #### Notes
     * Ensure that `model.content` is populated for the file.
     *
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    save(path: string, model: IContentsOpts): Promise<IContentsModel>;
    /**
     * Copy a file into a given directory.
     *
     * @param path - The original file path.
     *
     * @param toDir - The destination directory path.
     *
     * @returns A promise which resolves with the new contents model when the
     *  file is copied.
     *
     * #### Notes
     * The server will select the name of the copied file.
     *
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    copy(fromFile: string, toDir: string): Promise<IContentsModel>;
    /**
     * List notebooks and directories at a given path.
     *
     * @param: path - The path in which to list the contents.
     *
     * @returns A promise which resolves with a model with the directory
     *    contents.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    listContents(path: string): Promise<IContentsModel>;
    /**
     * Create a checkpoint for a file.
     *
     * @param path - The path of the file.
     *
     * @returns A promise which resolves with the new checkpoint model when the
     *   checkpoint is created.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    createCheckpoint(path: string): Promise<ICheckpointModel>;
    /**
     * List available checkpoints for a file.
     *
     * @param path - The path of the file.
     *
     * @returns A promise which resolves with a list of checkpoint models for
     *    the file.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    listCheckpoints(path: string): Promise<ICheckpointModel[]>;
    /**
     * Restore a file to a known checkpoint state.
     *
     * @param path - The path of the file.
     *
     * @param checkpointID - The id of the checkpoint to restore.
     *
     * @returns A promise which resolves when the checkpoint is restored.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).
     */
    restoreCheckpoint(path: string, checkpointID: string): Promise<void>;
    /**
     * Delete a checkpoint for a file.
     *
     * @param path - The path of the file.
     *
     * @param checkpointID - The id of the checkpoint to delete.
     *
     * @returns A promise which resolves when the checkpoint is deleted.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).
     */
    deleteCheckpoint(path: string, checkpointID: string): Promise<void>;
    /**
     * Get a REST url for this file given a path.
     */
    private _getUrl(...args);
    private _apiUrl;
    private _ajaxSettings;
}
