import { DisposableDelegate } from 'phosphor-disposable';
import { IKernelMessage, IKernelFuture } from './ikernel';
/**
 * Implementation of a kernel future.
 */
export declare class KernelFutureHandler extends DisposableDelegate implements IKernelFuture {
    /**
     * Construct a new KernelFutureHandler.
     */
    constructor(cb: () => void, msg: IKernelMessage, expectShell: boolean, disposeOnDone: boolean);
    /**
     * Get the original outgoing message.
     */
    msg: IKernelMessage;
    /**
     * Check for message done state.
     */
    isDone: boolean;
    /**
     * Get the reply handler.
     */
    /**
     * Set the reply handler.
     */
    onReply: (msg: IKernelMessage) => void;
    /**
     * Get the iopub handler.
     */
    /**
     * Set the iopub handler.
     */
    onIOPub: (msg: IKernelMessage) => void;
    /**
     * Get the done handler.
     */
    /**
     * Set the done handler.
     */
    onDone: (msg: IKernelMessage) => void;
    /**
     * Get the stdin handler.
     */
    /**
     * Set the stdin handler.
     */
    onStdin: (msg: IKernelMessage) => void;
    /**
     * Dispose and unregister the future.
     */
    dispose(): void;
    /**
     * Handle an incoming kernel message.
     */
    handleMsg(msg: IKernelMessage): void;
    private _handleReply(msg);
    private _handleStdin(msg);
    private _handleIOPub(msg);
    private _handleDone(msg);
    /**
     * Test whether the given future flag is set.
     */
    private _testFlag(flag);
    /**
     * Set the given future flag.
     */
    private _setFlag(flag);
    private _msg;
    private _status;
    private _stdin;
    private _iopub;
    private _reply;
    private _done;
    private _disposeOnDone;
}
