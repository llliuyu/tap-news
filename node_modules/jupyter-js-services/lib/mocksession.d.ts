import { IAjaxSettings } from 'jupyter-js-utils';
import { ISignal } from 'phosphor-signaling';
import { INotebookSession } from './isession';
import { KernelStatus, IKernel, IKernelId, IKernelMessage } from './ikernel';
/**
 * A mock notebook session object that uses a mock kernel by default.
 */
export declare class MockSession implements INotebookSession {
    id: string;
    notebookPath: string;
    ajaxSettings: IAjaxSettings;
    constructor(path: string, kernel?: IKernel);
    /**
     * A signal emitted when the session dies.
     */
    sessionDied: ISignal<INotebookSession, void>;
    /**
     * A signal emitted when the kernel changes.
     */
    kernelChanged: ISignal<INotebookSession, IKernel>;
    /**
     * A signal emitted when the kernel status changes.
     */
    statusChanged: ISignal<INotebookSession, KernelStatus>;
    /**
     * A signal emitted for a kernel messages.
     */
    iopubMessage: ISignal<INotebookSession, IKernelMessage>;
    /**
     * A signal emitted for an unhandled kernel message.
     */
    unhandledMessage: ISignal<INotebookSession, IKernelMessage>;
    /**
     * A signal emitted when the notebook path changes.
     */
    notebookPathChanged: ISignal<INotebookSession, string>;
    /**
     * Get the session kernel object.
     */
    kernel: IKernel;
    /**
     * The current status of the session.
     */
    status: KernelStatus;
    /**
     * Test whether the session has been disposed.
     *
     * #### Notes
     * This is a read-only property which is always safe to access.
     */
    isDisposed: boolean;
    /**
     * Dispose of the resources held by the session.
     */
    dispose(): void;
    /**
     * Rename or move a notebook.
     */
    renameNotebook(path: string): Promise<void>;
    /**
     * Change the kernel.
     */
    changeKernel(options: IKernelId): Promise<IKernel>;
    /**
     * Kill the kernel and shutdown the session.
     */
    shutdown(): Promise<void>;
    /**
     * Handle to changes in the Kernel status.
     */
    protected onKernelStatus(sender: IKernel, state: KernelStatus): void;
    /**
     * Handle unhandled kernel messages.
     */
    protected onUnhandledMessage(sender: IKernel, msg: IKernelMessage): void;
    private _isDisposed;
    private _kernel;
}
