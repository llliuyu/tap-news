"use strict";
var utils = require('jupyter-js-utils');
var validate = require('./validate');
/**
 * The url for the contents service.
 */
var SERVICE_CONTENTS_URL = 'api/contents';
/**
 * A contents manager that passes file operations to the server.
 *
 * This includes checkpointing with the normal file operations.
 */
var ContentsManager = (function () {
    /**
     * Construct a new contents manager object.
     *
     * @param baseUrl - The base URL for the server.
     *
     * @param ajaxSettings - Optional initial ajax settings.
     */
    function ContentsManager(baseUrl, ajaxSettings) {
        this._apiUrl = 'unknown';
        this._ajaxSettings = '{}';
        baseUrl = baseUrl || utils.getBaseUrl();
        if (ajaxSettings)
            this.ajaxSettings = ajaxSettings;
        this._apiUrl = utils.urlPathJoin(baseUrl, SERVICE_CONTENTS_URL);
    }
    Object.defineProperty(ContentsManager.prototype, "ajaxSettings", {
        /**
         * Get a copy of the default ajax settings for the contents manager.
         */
        get: function () {
            return JSON.parse(this._ajaxSettings);
        },
        /**
         * Set the default ajax settings for the contents manager.
         */
        set: function (value) {
            this._ajaxSettings = JSON.stringify(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get a file or directory.
     *
     * @param path: Path to the file or directory.
     *
     * @param options: The options describing the file.
     *   Use `options.content = true` to return file contents.
     *
     * @returns A promise which resolves with the file content.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.get = function (path, options) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'GET';
        ajaxSettings.dataType = 'json';
        ajaxSettings.cache = false;
        var url = this._getUrl(path);
        if (options) {
            var params = {};
            if (options.type) {
                params.type = options.type;
            }
            if (options.format) {
                params.format = options.format;
            }
            if (options.content === false) {
                params.content = '0';
            }
            url += utils.jsonToQueryString(params);
        }
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 200) {
                throw Error('Invalid Status: ' + success.xhr.status);
            }
            validate.validateContentsModel(success.data);
            return success.data;
        });
    };
    /**
     * Create a new untitled file or directory in the specified directory path.
     *
     * @param path: The directory in which to create the new file/directory.
     *
     * @param options: The options describing the new item.
     *
     * @returns A promise which resolves with the created file content when the
     *    file is created.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.newUntitled = function (path, options) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'POST';
        ajaxSettings.dataType = 'json';
        if (options) {
            var data = JSON.stringify({
                ext: options.ext,
                type: options.type
            });
            ajaxSettings.data = data;
            ajaxSettings.contentType = 'application/json';
        }
        var url = this._getUrl(path);
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 201) {
                throw Error('Invalid Status: ' + success.xhr.status);
            }
            validate.validateContentsModel(success.data);
            return success.data;
        });
    };
    /**
     * Delete a file.
     *
     * @param path - The path to the file.
     *
     * @returns A promise which resolves when the file is deleted.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).
     */
    ContentsManager.prototype.delete = function (path) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'DELETE';
        ajaxSettings.dataType = 'json';
        var url = this._getUrl(path);
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 204) {
                throw Error('Invalid Status: ' + success.xhr.status);
            }
        }, function (error) {
            // Translate certain errors to more specific ones.
            // TODO: update IPEP27 to specify errors more precisely, so
            // that error types can be detected here with certainty.
            if (error.xhr.status === 400) {
                var err = JSON.parse(error.xhr.response);
                if (err.message) {
                    throw new Error(err.message);
                }
            }
            throw new Error(error.xhr.statusText);
        });
    };
    /**
     * Rename a file or directory.
     *
     * @param path - The original file path.
     *
     * @param newPath - The new file path.
     *
     * @returns A promise which resolves with the new file contents model when
     *   the file is renamed.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.rename = function (path, newPath) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'PATCH';
        ajaxSettings.dataType = 'json';
        ajaxSettings.contentType = 'application/json';
        ajaxSettings.data = JSON.stringify({ path: newPath });
        var url = this._getUrl(path);
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 200) {
                throw Error('Invalid Status: ' + success.xhr.status);
            }
            validate.validateContentsModel(success.data);
            return success.data;
        });
    };
    /**
     * Save a file.
     *
     * @param path - The desired file path.
     *
     * @param model - The file model to save.
     *
     * @returns A promise which resolves with the file contents model when the
     *   file is saved.
     *
     * #### Notes
     * Ensure that `model.content` is populated for the file.
     *
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.save = function (path, model) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'PUT';
        ajaxSettings.dataType = 'json';
        ajaxSettings.data = JSON.stringify(model);
        ajaxSettings.contentType = 'application/json';
        ajaxSettings.cache = false;
        var url = this._getUrl(path);
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            // will return 200 for an existing file and 201 for a new file
            if (success.xhr.status !== 200 && success.xhr.status !== 201) {
                throw Error('Invalid Status: ' + success.xhr.status);
            }
            validate.validateContentsModel(success.data);
            return success.data;
        });
    };
    /**
     * Copy a file into a given directory.
     *
     * @param path - The original file path.
     *
     * @param toDir - The destination directory path.
     *
     * @returns A promise which resolves with the new contents model when the
     *  file is copied.
     *
     * #### Notes
     * The server will select the name of the copied file.
     *
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.copy = function (fromFile, toDir) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'POST';
        ajaxSettings.data = JSON.stringify({ copy_from: fromFile });
        ajaxSettings.contentType = 'application/json';
        ajaxSettings.dataType = 'json';
        var url = this._getUrl(toDir);
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 201) {
                throw Error('Invalid Status: ' + success.xhr.status);
            }
            validate.validateContentsModel(success.data);
            return success.data;
        });
    };
    /**
     * List notebooks and directories at a given path.
     *
     * @param: path - The path in which to list the contents.
     *
     * @returns A promise which resolves with a model with the directory
     *    contents.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.listContents = function (path) {
        return this.get(path, { type: 'directory' });
    };
    /**
     * Create a checkpoint for a file.
     *
     * @param path - The path of the file.
     *
     * @returns A promise which resolves with the new checkpoint model when the
     *   checkpoint is created.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.createCheckpoint = function (path) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'POST';
        ajaxSettings.dataType = 'json';
        var url = this._getUrl(path, 'checkpoints');
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 201) {
                throw Error('Invalid Status: ' + success.xhr.status);
            }
            validate.validateCheckpointModel(success.data);
            return success.data;
        });
    };
    /**
     * List available checkpoints for a file.
     *
     * @param path - The path of the file.
     *
     * @returns A promise which resolves with a list of checkpoint models for
     *    the file.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.listCheckpoints = function (path) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'GET';
        ajaxSettings.dataType = 'json';
        ajaxSettings.cache = false;
        var url = this._getUrl(path, 'checkpoints');
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 200) {
                throw Error('Invalid Status: ' + success.xhr.status);
            }
            if (!Array.isArray(success.data)) {
                throw Error('Invalid Checkpoint list');
            }
            for (var i = 0; i < success.data.length; i++) {
                validate.validateCheckpointModel(success.data[i]);
            }
            return success.data;
        });
    };
    /**
     * Restore a file to a known checkpoint state.
     *
     * @param path - The path of the file.
     *
     * @param checkpointID - The id of the checkpoint to restore.
     *
     * @returns A promise which resolves when the checkpoint is restored.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).
     */
    ContentsManager.prototype.restoreCheckpoint = function (path, checkpointID) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'POST';
        ajaxSettings.dataType = 'json';
        var url = this._getUrl(path, 'checkpoints', checkpointID);
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 204) {
                throw Error('Invalid Status: ' + success.xhr.status);
            }
        });
    };
    /**
     * Delete a checkpoint for a file.
     *
     * @param path - The path of the file.
     *
     * @param checkpointID - The id of the checkpoint to delete.
     *
     * @returns A promise which resolves when the checkpoint is deleted.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).
     */
    ContentsManager.prototype.deleteCheckpoint = function (path, checkpointID) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'DELETE';
        ajaxSettings.dataType = 'json';
        var url = this._getUrl(path, 'checkpoints', checkpointID);
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 204) {
                throw Error('Invalid Status: ' + success.xhr.status);
            }
        });
    };
    /**
     * Get a REST url for this file given a path.
     */
    ContentsManager.prototype._getUrl = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        var url_parts = [].concat(Array.prototype.slice.apply(args));
        return utils.urlPathJoin(this._apiUrl, utils.urlJoinEncode.apply(null, url_parts));
    };
    return ContentsManager;
}());
exports.ContentsManager = ContentsManager;
