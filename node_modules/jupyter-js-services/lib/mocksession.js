"use strict";
var phosphor_signaling_1 = require('phosphor-signaling');
var mockkernel_1 = require('./mockkernel');
/**
 * A mock notebook session object that uses a mock kernel by default.
 */
var MockSession = (function () {
    function MockSession(path, kernel) {
        this.ajaxSettings = {};
        this._isDisposed = false;
        this._kernel = null;
        this.notebookPath = path;
        this._kernel = kernel || new mockkernel_1.MockKernel();
        this._kernel.statusChanged.connect(this.onKernelStatus, this);
        this._kernel.unhandledMessage.connect(this.onUnhandledMessage, this);
    }
    Object.defineProperty(MockSession.prototype, "sessionDied", {
        /**
         * A signal emitted when the session dies.
         */
        get: function () {
            return Private.sessionDiedSignal.bind(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MockSession.prototype, "kernelChanged", {
        /**
         * A signal emitted when the kernel changes.
         */
        get: function () {
            return Private.kernelChangedSignal.bind(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MockSession.prototype, "statusChanged", {
        /**
         * A signal emitted when the kernel status changes.
         */
        get: function () {
            return Private.statusChangedSignal.bind(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MockSession.prototype, "iopubMessage", {
        /**
         * A signal emitted for a kernel messages.
         */
        get: function () {
            return Private.iopubMessageSignal.bind(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MockSession.prototype, "unhandledMessage", {
        /**
         * A signal emitted for an unhandled kernel message.
         */
        get: function () {
            return Private.unhandledMessageSignal.bind(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MockSession.prototype, "notebookPathChanged", {
        /**
         * A signal emitted when the notebook path changes.
         */
        get: function () {
            return Private.notebookPathChangedSignal.bind(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MockSession.prototype, "kernel", {
        /**
         * Get the session kernel object.
         */
        get: function () {
            return this._kernel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MockSession.prototype, "status", {
        /**
         * The current status of the session.
         */
        get: function () {
            return this._kernel.status;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MockSession.prototype, "isDisposed", {
        /**
         * Test whether the session has been disposed.
         *
         * #### Notes
         * This is a read-only property which is always safe to access.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources held by the session.
     */
    MockSession.prototype.dispose = function () {
        this._isDisposed = true;
    };
    /**
     * Rename or move a notebook.
     */
    MockSession.prototype.renameNotebook = function (path) {
        this.notebookPath = path;
        return Promise.resolve(void 0);
    };
    /**
     * Change the kernel.
     */
    MockSession.prototype.changeKernel = function (options) {
        this._kernel.dispose();
        this._kernel = new mockkernel_1.MockKernel(options);
        this.kernelChanged.emit(this._kernel);
        return Promise.resolve(this._kernel);
    };
    /**
     * Kill the kernel and shutdown the session.
     */
    MockSession.prototype.shutdown = function () {
        this._kernel.dispose();
        this._kernel = null;
        this.sessionDied.emit(void 0);
        return Promise.resolve(void 0);
    };
    /**
     * Handle to changes in the Kernel status.
     */
    MockSession.prototype.onKernelStatus = function (sender, state) {
        this.statusChanged.emit(state);
    };
    /**
     * Handle unhandled kernel messages.
     */
    MockSession.prototype.onUnhandledMessage = function (sender, msg) {
        this.unhandledMessage.emit(msg);
    };
    return MockSession;
}());
exports.MockSession = MockSession;
/**
 * A namespace for notebook session private data.
 */
var Private;
(function (Private) {
    /**
     * A signal emitted when the session is shut down.
     */
    Private.sessionDiedSignal = new phosphor_signaling_1.Signal();
    /**
     * A signal emitted when the kernel changes.
     */
    Private.kernelChangedSignal = new phosphor_signaling_1.Signal();
    /**
     * A signal emitted when the session kernel status changes.
     */
    Private.statusChangedSignal = new phosphor_signaling_1.Signal();
    /**
     * A signal emitted for iopub kernel messages.
     */
    Private.iopubMessageSignal = new phosphor_signaling_1.Signal();
    /**
     * A signal emitted for an unhandled kernel message.
     */
    Private.unhandledMessageSignal = new phosphor_signaling_1.Signal();
    /**
     * A signal emitted when the notebook path changes.
     */
    Private.notebookPathChangedSignal = new phosphor_signaling_1.Signal();
})(Private || (Private = {}));
