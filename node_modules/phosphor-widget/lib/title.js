/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2015, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
'use strict';
var phosphor_properties_1 = require('phosphor-properties');
var phosphor_signaling_1 = require('phosphor-signaling');
/**
 * An object which holds data related to a widget title.
 *
 * #### Notes
 * A title object is intended to hold the data necessary to display a
 * header for a particular widget. A common example is the `TabPanel`,
 * which uses the widget title to populate the tab for a child widget.
 */
var Title = (function () {
    /**
     * Construct a new title.
     *
     * @param options - The options for initializing a title.
     */
    function Title(options) {
        if (options)
            TitlePrivate.initFrom(this, options);
    }
    Object.defineProperty(Title.prototype, "changed", {
        /**
         * A signal emitted when the title state changes.
         */
        get: function () {
            return TitlePrivate.changedSignal.bind(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Title.prototype, "text", {
        /**
         * Get the text for the title.
         *
         * #### Notes
         * The default value is an empty string.
         */
        get: function () {
            return TitlePrivate.textProperty.get(this);
        },
        /**
         * Set the text for the title.
         */
        set: function (value) {
            TitlePrivate.textProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Title.prototype, "icon", {
        /**
         * Get the icon class name for the title.
         *
         * #### Notes
         * The default value is an empty string.
         */
        get: function () {
            return TitlePrivate.iconProperty.get(this);
        },
        /**
         * Set the icon class name for the title.
         *
         * #### Notes
         * Multiple class names can be separated with whitespace.
         */
        set: function (value) {
            TitlePrivate.iconProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Title.prototype, "closable", {
        /**
         * Get the closable state for the title.
         *
         * #### Notes
         * The default value is `false`.
         */
        get: function () {
            return TitlePrivate.closableProperty.get(this);
        },
        /**
         * Set the closable state for the title.
         *
         * #### Notes
         * This controls the presence of a close icon when applicable.
         */
        set: function (value) {
            TitlePrivate.closableProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Title.prototype, "className", {
        /**
         * Get the extra class name for the title.
         *
         * #### Notes
         * The default value is an empty string.
         */
        get: function () {
            return TitlePrivate.classNameProperty.get(this);
        },
        /**
         * Set the extra class name for the title.
         *
         * #### Notes
         * Multiple class names can be separated with whitespace.
         */
        set: function (value) {
            TitlePrivate.classNameProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    return Title;
})();
exports.Title = Title;
/**
 * The namespace for the title private data.
 */
var TitlePrivate;
(function (TitlePrivate) {
    /**
     * A signal emitted when the title state changes.
     */
    TitlePrivate.changedSignal = new phosphor_signaling_1.Signal();
    /**
     * The property descriptor for the title text.
     */
    TitlePrivate.textProperty = new phosphor_properties_1.Property({
        name: 'text',
        value: '',
        notify: TitlePrivate.changedSignal,
    });
    /**
     * The property descriptor for the title icon class.
     */
    TitlePrivate.iconProperty = new phosphor_properties_1.Property({
        name: 'icon',
        value: '',
        notify: TitlePrivate.changedSignal,
    });
    /**
     * The property descriptor for the title closable state.
     */
    TitlePrivate.closableProperty = new phosphor_properties_1.Property({
        name: 'closable',
        value: false,
        notify: TitlePrivate.changedSignal,
    });
    /**
     * The property descriptor for the title extra class name.
     */
    TitlePrivate.classNameProperty = new phosphor_properties_1.Property({
        name: 'className',
        value: '',
        notify: TitlePrivate.changedSignal,
    });
    /**
     * Initialize a title from an options object.
     */
    function initFrom(title, options) {
        if (options.text !== void 0) {
            title.text = options.text;
        }
        if (options.icon !== void 0) {
            title.icon = options.icon;
        }
        if (options.closable !== void 0) {
            title.closable = options.closable;
        }
        if (options.className !== void 0) {
            title.className = options.className;
        }
    }
    TitlePrivate.initFrom = initFrom;
})(TitlePrivate || (TitlePrivate = {}));
