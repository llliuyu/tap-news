import { IDisposable } from 'phosphor-disposable';
import { IMessageHandler, Message } from 'phosphor-messaging';
import { NodeWrapper } from 'phosphor-nodewrapper';
import { Queue } from 'phosphor-queue';
import { ISignal } from 'phosphor-signaling';
import { Layout } from './layout';
import { Title } from './title';
/**
 * The base class of the Phosphor widget hierarchy.
 *
 * #### Notes
 * This class will typically be subclassed in order to create a useful
 * widget. However, it can be used directly to host externally created
 * content. Simply instantiate an empty widget and add the DOM content
 * directly to the widget's `.node`.
 */
export declare class Widget extends NodeWrapper implements IDisposable, IMessageHandler {
    /**
     * Construct a new widget.
     */
    constructor();
    /**
     * Dispose of the widget and its descendants.
     *
     * #### Notes
     * It is generally unsafe to use the widget after it is disposed.
     *
     * All calls made to this method after the first are a no-op.
     */
    dispose(): void;
    /**
     * A signal emitted when the widget is disposed.
     *
     * **See also:** [[dispose]], [[disposed]]
     */
    disposed: ISignal<Widget, void>;
    /**
     * Test whether the widget has been disposed.
     *
     * #### Notes
     * This is a read-only property.
     *
     * **See also:** [[dispose]], [[disposed]]
     */
    isDisposed: boolean;
    /**
     * Test whether the widget's node is attached to the DOM.
     *
     * #### Notes
     * This is a read-only property.
     *
     * **See also:** [[attach]], [[detach]]
     */
    isAttached: boolean;
    /**
     * Test whether the widget is explicitly hidden.
     *
     * #### Notes
     * This is a read-only property.
     *
     * **See also:** [[isVisible]], [[hide]], [[show]]
     */
    isHidden: boolean;
    /**
     * Test whether the widget is visible.
     *
     * #### Notes
     * A widget is visible when it is attached to the DOM, is not
     * explicitly hidden, and has no explicitly hidden ancestors.
     *
     * This is a read-only property.
     *
     * **See also:** [[isHidden]], [[hide]], [[show]]
     */
    isVisible: boolean;
    /**
     * Get the title data object for the widget.
     *
     * #### Notes
     * The title data is used by some container widgets when displaying
     * the widget along with a title, such as a tab panel or dock panel.
     *
     * Not all widgets will make use of the title data, so it is created
     * on-demand the first time it is accessed.
     */
    title: Title;
    /**
     * Get the parent of the widget.
     *
     * #### Notes
     * This will be `null` if the widget does not have a parent.
     */
    /**
     * Set the parent of the widget.
     *
     * #### Notes
     * The widget will be automatically removed from its current parent.
     *
     * This is a no-op if there is no effective parent change.
     */
    parent: Widget;
    /**
     * Get the layout for the widget.
     *
     * #### Notes
     * This will be `null` if the widget does not have a layout.
     */
    /**
     * Set the layout for the widget.
     *
     * #### Notes
     * The layout is single-use only. It cannot be set to `null` and it
     * cannot be changed after the first assignment.
     *
     * The layout is disposed automatically when the widget is disposed.
     */
    layout: Layout;
    /**
     * Test whether a widget is a descendant of this widget.
     *
     * @param widget - The widget of interest.
     *
     * @returns `true` if the widget is a descendant, `false` otherwise.
     */
    contains(widget: Widget): boolean;
    /**
     * Post an `'update-request'` message to the widget.
     *
     * **See also:** [[MsgUpdateRequest]]
     */
    update(): void;
    /**
     * Post a `'fit-request'` message to the widget.
     *
     * **See also:** [[MsgFitRequest]]
     */
    fit(): void;
    /**
     * Send a `'close-request'` message to the widget.
     *
     * **See also:** [[MsgCloseRequest]]
     */
    close(): void;
    /**
     * Show the widget and make it visible to its parent widget.
     *
     * #### Notes
     * This causes the [[isHidden]] property to be `false`.
     */
    show(): void;
    /**
     * Hide the widget and make it hidden to its parent widget.
     *
     * #### Notes
     * This causes the [[isHidden]] property to be `true`.
     */
    hide(): void;
    /**
     * Set whether the widget is hidden.
     *
     * @param hidden - `true` to hide the widget, or `false` to show it.
     *
     * #### Notes
     * `widget.setHidden(true)` is equivalent to `widget.hide()`, and
     * `widget.setHidden(false)` is equivalent to `widget.show()`.
     */
    setHidden(hidden: boolean): void;
    /**
     * Attach the widget to a host DOM node.
     *
     * @param host - The DOM node to use as the widget's host.
     *
     * @throws An error if the widget is not a root widget, if the widget
     *   is already attached, or if the host is not attached to the DOM.
     */
    attach(host: HTMLElement): void;
    /**
     * Detach the widget from its host DOM node.
     *
     * @throws An error if the widget is not a root widget, or if the
     *   widget is not attached.
     */
    detach(): void;
    /**
     * Test whether the given widget flag is set.
     *
     * #### Notes
     * This will not typically be consumed directly by user code.
     */
    testFlag(flag: WidgetFlag): boolean;
    /**
     * Set the given widget flag.
     *
     * #### Notes
     * This will not typically be consumed directly by user code.
     */
    setFlag(flag: WidgetFlag): void;
    /**
     * Clear the given widget flag.
     *
     * #### Notes
     * This will not typically be consumed directly by user code.
     */
    clearFlag(flag: WidgetFlag): void;
    /**
     * Compress a message posted to the widget.
     *
     * @param msg - The message posted to the widget.
     *
     * @param pending - The queue of pending messages for the widget.
     *
     * @returns `true` if the message should be ignored, or `false` if
     *   the message should be enqueued for delivery as normal.
     *
     * #### Notes
     * Subclasses may reimplement this method as needed.
     */
    compressMessage(msg: Message, pending: Queue<Message>): boolean;
    /**
     * Process a message sent to the widget.
     *
     * @param msg - The message sent to the widget.
     *
     * #### Notes
     * Subclasses may reimplement this method as needed.
     */
    processMessage(msg: Message): void;
    /**
     * Invoke the message processing routine of the widget's layout.
     *
     * @param msg - The message to dispatch to the layout.
     *
     * #### Notes
     * This is a no-op if the widget does not have a layout.
     */
    protected notifyLayout(msg: Message): void;
    /**
     * A message handler invoked on a `'close-request'` message.
     *
     * #### Notes
     * The default implementation of this handler detaches the widget.
     *
     * **See also:** [[close]], [[MsgCloseRequest]]
     */
    protected onCloseRequest(msg: Message): void;
    /**
     * A message handler invoked on a `'resize'` message.
     *
     * The default implementation of this handler is a no-op.
     *
     * **See also:** [[ResizeMessage]]
     */
    protected onResize(msg: ResizeMessage): void;
    /**
     * A message handler invoked on an `'update-request'` message.
     *
     * The default implementation of this handler is a no-op.
     *
     * **See also:** [[update]], [[MsgUpdateRequest]]
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * A message handler invoked on an `'after-show'` message.
     *
     * The default implementation of this handler is a no-op.
     *
     * **See also:** [[MsgAfterShow]]
     */
    protected onAfterShow(msg: Message): void;
    /**
     * A message handler invoked on a `'before-hide'` message.
     *
     * The default implementation of this handler is a no-op.
     *
     * **See also:** [[MsgBeforeHide]]
     */
    protected onBeforeHide(msg: Message): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     *
     * The default implementation of this handler is a no-op.
     *
     * **See also:** [[MsgAfterAttach]]
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'before-detach'` message.
     *
     * The default implementation of this handler is a no-op.
     *
     * **See also:** [[MsgBeforeDetach]]
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * A message handler invoked on a `'child-added'` message.
     *
     * The default implementation of this handler is a no-op.
     *
     * **See also:** [[ChildMessage]]
     */
    protected onChildAdded(msg: ChildMessage): void;
    /**
     * A message handler invoked on a `'child-removed'` message.
     *
     * The default implementation of this handler is a no-op.
     *
     * **See also:** [[ChildMessage]]
     */
    protected onChildRemoved(msg: ChildMessage): void;
    private _flags;
    private _layout;
    private _parent;
}
/**
 * The namespace for the `Widget` class statics.
 */
export declare namespace Widget {
    /**
     * A singleton `'update-request'` message.
     *
     * #### Notes
     * This message can be dispatched to supporting widgets in order to
     * update their content based on the current widget state. Not all
     * widgets will respond to messages of this type.
     *
     * For widgets with a layout, this message will inform the layout to
     * update the position and size of its child widgets.
     *
     * Messages of this type are compressed by default.
     *
     * **See also:** [[update]], [[onUpdateRequest]]
     */
    const MsgUpdateRequest: Message;
    /**
     * A singleton `'fit-request'` message.
     *
     * #### Notes
     * For widgets with a layout, this message will inform the layout to
     * recalculate its size constraints to fit the space requirements of
     * its child widgets, and to update their position and size. Not all
     * layouts will respond to messages of this type.
     *
     * Messages of this type are compressed by default.
     *
     * **See also:** [[fit]]
     */
    const MsgFitRequest: Message;
    /**
     * A singleton `'close-request'` message.
     *
     * #### Notes
     * This message should be dispatched to a widget when it should close
     * and remove itself from the widget hierarchy.
     *
     * Messages of this type are compressed by default.
     *
     * **See also:** [[close]], [[onCloseRequest]]
     */
    const MsgCloseRequest: Message;
    /**
     * A singleton `'after-show'` message.
     *
     * #### Notes
     * This message is sent to a widget after it becomes visible.
     *
     * This message is **not** sent when the widget is being attached.
     *
     * **See also:** [[isVisible]], [[onAfterShow]]
     */
    const MsgAfterShow: Message;
    /**
     * A singleton `'before-hide'` message.
     *
     * #### Notes
     * This message is sent to a widget before it becomes not-visible.
     *
     * This message is **not** sent when the widget is being detached.
     *
     * **See also:** [[isVisible]], [[onBeforeHide]]
     */
    const MsgBeforeHide: Message;
    /**
     * A singleton `'after-attach'` message.
     *
     * #### Notes
     * This message is sent to a widget after it is attached.
     *
     * **See also:** [[isAttached]], [[onAfterAttach]]
     */
    const MsgAfterAttach: Message;
    /**
     * A singleton `'before-detach'` message.
     *
     * #### Notes
     * This message is sent to a widget before it is detached.
     *
     * **See also:** [[isAttached]], [[onBeforeDetach]]
     */
    const MsgBeforeDetach: Message;
}
/**
 * An enum of widget bit flags.
 */
export declare enum WidgetFlag {
    /**
     * The widget has been disposed.
     */
    IsDisposed = 1,
    /**
     * The widget is attached to the DOM.
     */
    IsAttached = 2,
    /**
     * The widget is hidden.
     */
    IsHidden = 4,
    /**
     * The widget is visible.
     */
    IsVisible = 8,
}
/**
 * A message class for child related messages.
 */
export declare class ChildMessage extends Message {
    /**
     * Construct a new child message.
     *
     * @param type - The message type.
     *
     * @param child - The child widget for the message.
     */
    constructor(type: string, child: Widget);
    /**
     * The child widget for the message.
     *
     * #### Notes
     * This is a read-only property.
     */
    child: Widget;
    private _child;
}
/**
 * A message class for `'resize'` messages.
 */
export declare class ResizeMessage extends Message {
    /**
     * Construct a new resize message.
     *
     * @param width - The **offset width** of the widget, or `-1` if
     *   the width is not known.
     *
     * @param height - The **offset height** of the widget, or `-1` if
     *   the height is not known.
     */
    constructor(width: number, height: number);
    /**
     * The offset width of the widget.
     *
     * #### Notes
     * This will be `-1` if the width is unknown.
     *
     * This is a read-only property.
     */
    width: number;
    /**
     * The offset height of the widget.
     *
     * #### Notes
     * This will be `-1` if the height is unknown.
     *
     * This is a read-only property.
     */
    height: number;
    private _width;
    private _height;
}
/**
 * The namespace for the `ResizeMessage` class statics.
 */
export declare namespace ResizeMessage {
    /**
     * A singleton `'resize'` message with an unknown size.
     */
    const UnknownSize: ResizeMessage;
}
