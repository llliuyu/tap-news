/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2015, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var phosphor_panel_1 = require('phosphor-panel');
var phosphor_signaling_1 = require('phosphor-signaling');
var layout_1 = require('./layout');
/**
 * The class name added to StackedPanel instances.
 */
var STACKED_PANEL_CLASS = 'p-StackedPanel';
/**
 * The class name added to a StackedPanel child.
 */
var CHILD_CLASS = 'p-StackedPanel-child';
/**
 * A panel where visible children are stacked atop one another.
 *
 * #### Notes
 * This class provides a convenience wrapper around a [[StackedLayout]].
 */
var StackedPanel = (function (_super) {
    __extends(StackedPanel, _super);
    /**
     * Construct a new stacked panel.
     */
    function StackedPanel() {
        _super.call(this);
        this.addClass(STACKED_PANEL_CLASS);
    }
    /**
     * Create a stacked layout for a stacked panel.
     */
    StackedPanel.createLayout = function () {
        return new layout_1.StackedLayout();
    };
    Object.defineProperty(StackedPanel.prototype, "widgetRemoved", {
        /**
         * A signal emitted when a widget is removed from the panel.
         */
        get: function () {
            return StackedPanelPrivate.widgetRemovedSignal.bind(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * A message handler invoked on a `'child-added'` message.
     */
    StackedPanel.prototype.onChildAdded = function (msg) {
        msg.child.addClass(CHILD_CLASS);
    };
    /**
     * A message handler invoked on a `'child-removed'` message.
     */
    StackedPanel.prototype.onChildRemoved = function (msg) {
        msg.child.removeClass(CHILD_CLASS);
        this.widgetRemoved.emit(msg.child);
    };
    return StackedPanel;
})(phosphor_panel_1.Panel);
exports.StackedPanel = StackedPanel;
/**
 * The namespace for the `StackedPanel` class private data.
 */
var StackedPanelPrivate;
(function (StackedPanelPrivate) {
    /**
     * A signal emitted when a widget is removed from the panel.
     */
    StackedPanelPrivate.widgetRemovedSignal = new phosphor_signaling_1.Signal();
})(StackedPanelPrivate || (StackedPanelPrivate = {}));
