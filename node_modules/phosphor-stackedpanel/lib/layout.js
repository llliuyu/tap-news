/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2015, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var phosphor_domutil_1 = require('phosphor-domutil');
var phosphor_messaging_1 = require('phosphor-messaging');
var phosphor_panel_1 = require('phosphor-panel');
var phosphor_properties_1 = require('phosphor-properties');
var phosphor_widget_1 = require('phosphor-widget');
/**
 * A layout where visible children are stacked atop one another.
 *
 * #### Notes
 * The Z-order of the visible children follows their layout order.
 */
var StackedLayout = (function (_super) {
    __extends(StackedLayout, _super);
    function StackedLayout() {
        _super.apply(this, arguments);
        this._box = null;
    }
    /**
     * Attach a child widget to the parent's DOM node.
     *
     * @param index - The current index of the child in the layout.
     *
     * @param child - The child widget to attach to the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    StackedLayout.prototype.attachChild = function (index, child) {
        StackedLayoutPrivate.prepareGeometry(child);
        this.parent.node.appendChild(child.node);
        if (this.parent.isAttached)
            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgAfterAttach);
        this.parent.fit();
    };
    /**
     * Move a child widget in the parent's DOM node.
     *
     * @param fromIndex - The previous index of the child in the layout.
     *
     * @param toIndex - The current index of the child in the layout.
     *
     * @param child - The child widget to move in the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    StackedLayout.prototype.moveChild = function (fromIndex, toIndex, child) {
        this.parent.update();
    };
    /**
     * Detach a child widget from the parent's DOM node.
     *
     * @param index - The previous index of the child in the layout.
     *
     * @param child - The child widget to detach from the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    StackedLayout.prototype.detachChild = function (index, child) {
        if (this.parent.isAttached)
            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgBeforeDetach);
        this.parent.node.removeChild(child.node);
        StackedLayoutPrivate.resetGeometry(child);
        child.node.style.zIndex = '';
        this.parent.fit();
    };
    /**
     * A message handler invoked on an `'after-show'` message.
     */
    StackedLayout.prototype.onAfterShow = function (msg) {
        _super.prototype.onAfterShow.call(this, msg);
        this.parent.update();
    };
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    StackedLayout.prototype.onAfterAttach = function (msg) {
        _super.prototype.onAfterAttach.call(this, msg);
        this.parent.fit();
    };
    /**
     * A message handler invoked on a `'child-shown'` message.
     */
    StackedLayout.prototype.onChildShown = function (msg) {
        if (StackedLayoutPrivate.IsIE) {
            phosphor_messaging_1.sendMessage(this.parent, phosphor_widget_1.Widget.MsgFitRequest);
        }
        else {
            this.parent.fit();
        }
    };
    /**
     * A message handler invoked on a `'child-hidden'` message.
     */
    StackedLayout.prototype.onChildHidden = function (msg) {
        if (StackedLayoutPrivate.IsIE) {
            phosphor_messaging_1.sendMessage(this.parent, phosphor_widget_1.Widget.MsgFitRequest);
        }
        else {
            this.parent.fit();
        }
    };
    /**
     * A message handler invoked on a `'resize'` message.
     */
    StackedLayout.prototype.onResize = function (msg) {
        if (this.parent.isVisible) {
            this._update(msg.width, msg.height);
        }
    };
    /**
     * A message handler invoked on an `'update-request'` message.
     */
    StackedLayout.prototype.onUpdateRequest = function (msg) {
        if (this.parent.isVisible) {
            this._update(-1, -1);
        }
    };
    /**
     * A message handler invoked on a `'fit-request'` message.
     */
    StackedLayout.prototype.onFitRequest = function (msg) {
        if (this.parent.isAttached) {
            this._fit();
        }
    };
    /**
     * Fit the layout to the total size required by the child widgets.
     */
    StackedLayout.prototype._fit = function () {
        // Setup the initial size limits.
        var minW = 0;
        var minH = 0;
        var maxW = Infinity;
        var maxH = Infinity;
        // Update the computed size limits.
        for (var i = 0, n = this.childCount(); i < n; ++i) {
            var child = this.childAt(i);
            if (child.isHidden) {
                continue;
            }
            var limits = phosphor_domutil_1.sizeLimits(child.node);
            minW = Math.max(minW, limits.minWidth);
            minH = Math.max(minH, limits.minHeight);
            maxW = Math.min(maxW, limits.maxWidth);
            maxH = Math.min(maxH, limits.maxHeight);
        }
        // Ensure max limits >= min limits.
        maxW = Math.max(minW, maxW);
        maxH = Math.max(minH, maxH);
        // Update the box sizing and add it to the size constraints.
        var box = this._box = phosphor_domutil_1.boxSizing(this.parent.node);
        minW += box.horizontalSum;
        minH += box.verticalSum;
        maxW += box.horizontalSum;
        maxH += box.verticalSum;
        // Update the parent's size constraints.
        var style = this.parent.node.style;
        style.minWidth = minW + "px";
        style.minHeight = minH + "px";
        style.maxWidth = maxW === Infinity ? 'none' : maxW + "px";
        style.maxHeight = maxH === Infinity ? 'none' : maxH + "px";
        // Notify the ancestor that it should fit immediately.
        var ancestor = this.parent.parent;
        if (ancestor)
            phosphor_messaging_1.sendMessage(ancestor, phosphor_widget_1.Widget.MsgFitRequest);
        // Notify the parent that it should update immediately.
        phosphor_messaging_1.sendMessage(this.parent, phosphor_widget_1.Widget.MsgUpdateRequest);
    };
    /**
     * Update the layout position and size of the child widgets.
     *
     * The parent offset dimensions should be `-1` if unknown.
     */
    StackedLayout.prototype._update = function (offsetWidth, offsetHeight) {
        // Bail early if there are no children to layout.
        if (this.childCount() === 0) {
            return;
        }
        // Measure the parent if the offset dimensions are unknown.
        if (offsetWidth < 0) {
            offsetWidth = this.parent.node.offsetWidth;
        }
        if (offsetHeight < 0) {
            offsetHeight = this.parent.node.offsetHeight;
        }
        // Ensure the parent box sizing data is computed.
        var box = this._box || (this._box = phosphor_domutil_1.boxSizing(this.parent.node));
        // Compute the actual layout bounds adjusted for border and padding.
        var top = box.paddingTop;
        var left = box.paddingLeft;
        var width = offsetWidth - box.horizontalSum;
        var height = offsetHeight - box.verticalSum;
        // Update the child stacking order and layout geometry.
        for (var i = 0, n = this.childCount(); i < n; ++i) {
            var child = this.childAt(i);
            if (child.isHidden) {
                continue;
            }
            child.node.style.zIndex = "" + i;
            StackedLayoutPrivate.setGeometry(child, left, top, width, height);
        }
    };
    return StackedLayout;
})(phosphor_panel_1.PanelLayout);
exports.StackedLayout = StackedLayout;
/**
 * The namespace for the `StackedLayout` class private data.
 */
var StackedLayoutPrivate;
(function (StackedLayoutPrivate) {
    /**
     * A flag indicating whether the browser is IE.
     */
    StackedLayoutPrivate.IsIE = /Trident/.test(navigator.userAgent);
    /**
     * Prepare a child widget for absolute layout geometry.
     */
    function prepareGeometry(widget) {
        widget.node.style.position = 'absolute';
    }
    StackedLayoutPrivate.prepareGeometry = prepareGeometry;
    /**
     * Reset the layout geometry for the given child widget.
     */
    function resetGeometry(widget) {
        var rect = rectProperty.get(widget);
        var style = widget.node.style;
        rect.top = NaN;
        rect.left = NaN;
        rect.width = NaN;
        rect.height = NaN;
        style.position = '';
        style.top = '';
        style.left = '';
        style.width = '';
        style.height = '';
    }
    StackedLayoutPrivate.resetGeometry = resetGeometry;
    /**
     * Set the layout geometry for the given child widget.
     */
    function setGeometry(widget, left, top, width, height) {
        var resized = false;
        var style = widget.node.style;
        var rect = rectProperty.get(widget);
        if (rect.top !== top) {
            rect.top = top;
            style.top = top + "px";
        }
        if (rect.left !== left) {
            rect.left = left;
            style.left = left + "px";
        }
        if (rect.width !== width) {
            resized = true;
            rect.width = width;
            style.width = width + "px";
        }
        if (rect.height !== height) {
            resized = true;
            rect.height = height;
            style.height = height + "px";
        }
        if (resized) {
            phosphor_messaging_1.sendMessage(widget, new phosphor_widget_1.ResizeMessage(width, height));
        }
    }
    StackedLayoutPrivate.setGeometry = setGeometry;
    /**
     * A property descriptor for a widget offset rect.
     */
    var rectProperty = new phosphor_properties_1.Property({
        name: 'rect',
        create: function () { return ({ top: NaN, left: NaN, width: NaN, height: NaN }); },
    });
})(StackedLayoutPrivate || (StackedLayoutPrivate = {}));
