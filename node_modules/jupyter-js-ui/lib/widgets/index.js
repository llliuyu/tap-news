// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var jupyter_js_widgets_1 = require('jupyter-js-widgets');
var phosphor_panel_1 = require('phosphor-panel');
var phosphor_widget_1 = require('phosphor-widget');
require('jquery-ui/themes/smoothness/jquery-ui.min.css');
require('jupyter-js-widgets/css/widgets.min.css');
/**
 * The class name added to an BackboneViewWrapper widget.
 */
var BACKBONEVIEWWRAPPER_CLASS = 'jp-BackboneViewWrapper';
/**
 * A phosphor widget which wraps a `Backbone` view instance.
 */
var BackboneViewWrapper = (function (_super) {
    __extends(BackboneViewWrapper, _super);
    /**
     * Construct a new `Backbone` wrapper widget.
     *
     * @param view - The `Backbone.View` instance being wrapped.
     */
    function BackboneViewWrapper(view) {
        var _this = this;
        _super.call(this);
        view.on('remove', function () {
            _this.dispose();
            console.log('View removed', view);
        });
        this.addClass(BACKBONEVIEWWRAPPER_CLASS);
        this.node.appendChild(view.el);
    }
    return BackboneViewWrapper;
}(phosphor_widget_1.Widget));
exports.BackboneViewWrapper = BackboneViewWrapper;
/**
 * A widget manager that returns phosphor widgets.
 */
var WidgetManager = (function (_super) {
    __extends(WidgetManager, _super);
    function WidgetManager(context) {
        var _this = this;
        _super.call(this);
        this._context = context;
        var newKernel = function (kernel) {
            if (_this._commRegistration) {
                _this._commRegistration.dispose();
            }
            _this._commRegistration = kernel.registerCommTarget(_this.comm_target_name, function (comm, msg) { _this.handle_comm_open(comm, msg); });
        };
        context.kernelChanged.connect(function (sender, kernel) {
            _this.validateVersion();
            newKernel(kernel);
        });
        if (context.kernel) {
            this.validateVersion();
            newKernel(context.kernel);
        }
    }
    /**
     * Return a phosphor widget representing the view
     */
    WidgetManager.prototype.display_view = function (msg, view, options) {
        return new BackboneViewWrapper(view);
    };
    /**
     * Handle when a comm is opened.
     */
    WidgetManager.prototype.handle_comm_open = function (comm, msg) {
        // Convert jupyter-js-services comm to old comm
        // so that widget models use it compatibly
        var oldComm = new jupyter_js_widgets_1.shims.services.Comm(comm);
        return _super.prototype.handle_comm_open.call(this, oldComm, msg);
    };
    /**
     * Create a comm.
     */
    WidgetManager.prototype._create_comm = function (target_name, model_id, data) {
        var comm = this._context.kernel.connectToComm(target_name, model_id);
        comm.open(); // should we open it???
        return Promise.resolve(new jupyter_js_widgets_1.shims.services.Comm(comm));
    };
    /**
     * Get the currently-registered comms.
     */
    WidgetManager.prototype._get_comm_info = function () {
        return this._context.kernel.commInfo({ target: 'jupyter.widget' }).then(function (reply) {
            return reply.comms;
        });
    };
    Object.defineProperty(WidgetManager.prototype, "isDisposed", {
        /**
         * Get whether the manager is disposed.
         *
         * #### Notes
         * This is a read-only property.
         */
        get: function () {
            return this._context === null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose the resources held by the manager.
     */
    WidgetManager.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        if (this._commRegistration) {
            this._commRegistration.dispose();
        }
        this._context = null;
    };
    return WidgetManager;
}(jupyter_js_widgets_1.ManagerBase));
exports.WidgetManager = WidgetManager;
/**
 * A renderer for widgets.
 */
var WidgetRenderer = (function () {
    function WidgetRenderer(widgetManager) {
        this.mimetypes = ['application/vnd.jupyter.widget'];
        this._manager = widgetManager;
    }
    /**
     * Render a widget mimetype.
     */
    WidgetRenderer.prototype.render = function (mimetype, data) {
        var _this = this;
        // data is a model id
        var w = new phosphor_panel_1.Panel();
        this._manager.get_model(data).then(function (model) {
            return _this._manager.display_model(void 0, model, void 0);
        }).then(function (view) {
            w.addChild(view);
        });
        return w;
    };
    Object.defineProperty(WidgetRenderer.prototype, "isDisposed", {
        /**
         * Get whether the manager is disposed.
         *
         * #### Notes
         * This is a read-only property.
         */
        get: function () {
            return this._manager === null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose the resources held by the manager.
     */
    WidgetRenderer.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._manager = null;
    };
    return WidgetRenderer;
}());
exports.WidgetRenderer = WidgetRenderer;
