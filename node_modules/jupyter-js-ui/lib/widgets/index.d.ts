import * as Backbone from 'backbone';
import { IKernelIOPubCommOpenMessage, IComm } from 'jupyter-js-services';
import { ManagerBase } from 'jupyter-js-widgets';
import { IDisposable } from 'phosphor-disposable';
import { Widget } from 'phosphor-widget';
import { IRenderer } from '../rendermime';
import { IDocumentContext } from '../docmanager';
import 'jquery-ui/themes/smoothness/jquery-ui.min.css';
import 'jupyter-js-widgets/css/widgets.min.css';
/**
 * A phosphor widget which wraps a `Backbone` view instance.
 */
export declare class BackboneViewWrapper extends Widget {
    /**
     * Construct a new `Backbone` wrapper widget.
     *
     * @param view - The `Backbone.View` instance being wrapped.
     */
    constructor(view: Backbone.View<any>);
}
/**
 * A widget manager that returns phosphor widgets.
 */
export declare class WidgetManager extends ManagerBase<Widget> implements IDisposable {
    constructor(context: IDocumentContext);
    /**
     * Return a phosphor widget representing the view
     */
    display_view(msg: any, view: Backbone.View<Backbone.Model>, options: any): Widget;
    /**
     * Handle when a comm is opened.
     */
    handle_comm_open(comm: IComm, msg: IKernelIOPubCommOpenMessage): Promise<Backbone.Model>;
    /**
     * Create a comm.
     */
    _create_comm(target_name: string, model_id: string, data?: any): Promise<any>;
    /**
     * Get the currently-registered comms.
     */
    _get_comm_info(): Promise<any>;
    /**
     * Get whether the manager is disposed.
     *
     * #### Notes
     * This is a read-only property.
     */
    isDisposed: boolean;
    /**
     * Dispose the resources held by the manager.
     */
    dispose(): void;
    _context: IDocumentContext;
    _commRegistration: IDisposable;
}
/**
 * A renderer for widgets.
 */
export declare class WidgetRenderer implements IRenderer<Widget>, IDisposable {
    constructor(widgetManager: WidgetManager);
    /**
     * Render a widget mimetype.
     */
    render(mimetype: string, data: string): Widget;
    /**
     * Get whether the manager is disposed.
     *
     * #### Notes
     * This is a read-only property.
     */
    isDisposed: boolean;
    /**
     * Dispose the resources held by the manager.
     */
    dispose(): void;
    mimetypes: string[];
    private _manager;
}
