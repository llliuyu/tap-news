// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var phosphor_widget_1 = require('phosphor-widget');
var default_1 = require('./default');
/**
 * A widget for images.
 */
var ImageWidget = (function (_super) {
    __extends(ImageWidget, _super);
    /**
     * Construct a new image widget.
     */
    function ImageWidget(model, context) {
        var _this = this;
        _super.call(this);
        this._model = model;
        this._context = context;
        this.node.tabIndex = -1;
        this.node.style.overflowX = 'auto';
        this.node.style.overflowY = 'auto';
        if (model.toString()) {
            this.update();
        }
        context.pathChanged.connect(function () {
            _this.update();
        });
        model.contentChanged.connect(function () {
            _this.update();
        });
    }
    /**
     * Create the node for the image widget.
     */
    ImageWidget.createNode = function () {
        return document.createElement('img');
    };
    /**
     * Dispose of the resources used by the widget.
     */
    ImageWidget.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._model = null;
        this._context = null;
        _super.prototype.dispose.call(this);
    };
    /**
     * Handle `update-request` messages for the widget.
     */
    ImageWidget.prototype.onUpdateRequest = function (msg) {
        this.title.text = this._context.path.split('/').pop();
        var node = this.node;
        var content = this._model.toString();
        var model = this._context.contentsModel;
        node.src = "data:" + model.mimetype + ";" + model.format + "," + content;
    };
    return ImageWidget;
}(phosphor_widget_1.Widget));
exports.ImageWidget = ImageWidget;
/**
 * A widget factory for images.
 */
var ImageWidgetFactory = (function (_super) {
    __extends(ImageWidgetFactory, _super);
    function ImageWidgetFactory() {
        _super.apply(this, arguments);
    }
    /**
     * Create a new widget given a document model and a context.
     */
    ImageWidgetFactory.prototype.createNew = function (model, context, kernel) {
        return new ImageWidget(model, context);
    };
    return ImageWidgetFactory;
}(default_1.ABCWidgetFactory));
exports.ImageWidgetFactory = ImageWidgetFactory;
