import { IDisposable } from 'phosphor-disposable';
import { Widget } from 'phosphor-widget';
import { IModelFactory, IWidgetFactory, IWidgetFactoryOptions, IFileType, IKernelPreference, IFileCreator, IWidgetExtension } from './interfaces';
/**
 * The document registery.
 *
 * #### Notes
 * The document registry is used to register model and widget creators.
 */
export declare class DocumentRegistry implements IDisposable {
    /**
     * The name of the default widget factory.
     *
     * #### Notes
     * This is a read-only property.
     */
    defaultWidgetFactory: string;
    /**
     * Get whether the document registry has been disposed.
     */
    isDisposed: boolean;
    /**
     * Dispose of the resources held by the document registery.
     */
    dispose(): void;
    /**
     * Register a widget factory with the document registry.
     *
     * @param factory - The factory instance.
     *
     * @param options - The options used to register the factory.
     *
     * @returns A disposable used to unregister the factory.
     *
     * #### Notes
     * If a factory with the given `displayName` is already registered,
     * an error will be thrown.
     * If `'.*'` is given as a default extension, the factory will be registered
     * as the global default.
     * If a factory is already registered as a default for a given extension or
     * as the global default, this factory will override the existing default.
     */
    registerWidgetFactory(factory: IWidgetFactory<Widget>, options: IWidgetFactoryOptions): IDisposable;
    /**
     * Register a model factory.
     *
     * @param factory - The factory instance.
     *
     * @returns A disposable used to unregister the factory.
     *
     * #### Notes
     * If a factory with the given `name` is already registered, an error
     * will be thrown.
     */
    registerModelFactory(factory: IModelFactory): IDisposable;
    /**
     * Register a widget extension.
     *
     * @param extension - A widget extension.
     *
     * @returns A disposable that can be used to unregister the extension.
     */
    registerExtension(widgetName: string, extension: IWidgetExtension<Widget>): IDisposable;
    /**
     * Register a file type with the document registry.
     *
     * #### Notes
     * These are used to populate the "Create New" dialog.
     */
    registerFileType(fileType: IFileType): IDisposable;
    /**
     * Register a Create New handler.
     *
     * @params creator - The file creator object.
     *
     * @params after - The optional item name to insert after.
     *
     * #### Notes
     * If `after` is not given or not already registered, it will be moved
     * to the end.
     */
    registerCreator(creator: IFileCreator, after?: string): IDisposable;
    /**
     * Get the list of registered widget factory display names.
     *
     * @param path - An optional file path to filter the results.
     *
     * #### Notes
     * The first item in the list is considered the default.
     */
    listWidgetFactories(ext?: string): string[];
    /**
     * Get a list of file types that have been registered.
     */
    listFileTypes(): IFileType[];
    /**
     * Get the ordered list of file creator names.
     */
    listCreators(): IFileCreator[];
    /**
     * Get the kernel preference.
     */
    getKernelPreference(ext: string, widgetName: string): IKernelPreference;
    /**
     * Get the model factory registered for a given widget factory.
     *
     */
    getModelFactory(widgetName: string): IModelFactory;
    /**
     * Get a widget factory by name.
     */
    getWidgetFactory(widgetName: string): IWidgetFactory<Widget>;
    /**
     * Get the registered extensions for a given widget.
     */
    getWidgetExtensions(widgetName: string): IWidgetExtension<Widget>[];
    /**
     * Get the appropriate widget factory by name.
     */
    private _getWidgetFactoryEx(widgetName);
    private _modelFactories;
    private _widgetFactories;
    private _defaultWidgetFactory;
    private _defaultWidgetFactories;
    private _fileTypes;
    private _creators;
    private _extenders;
}
