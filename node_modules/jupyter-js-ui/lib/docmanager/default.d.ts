import { IKernelId, IContentsOpts } from 'jupyter-js-services';
import { IChangedArgs } from 'phosphor-properties';
import { ISignal } from 'phosphor-signaling';
import { Widget } from 'phosphor-widget';
import { IDocumentModel, IWidgetFactory, IDocumentContext, IModelFactory } from './index';
/**
 * The default implementation of a document model.
 */
export declare class DocumentModel implements IDocumentModel {
    /**
     * Construct a new document model.
     */
    constructor(languagePreference: string);
    /**
     * Get whether the model factory has been disposed.
     */
    isDisposed: boolean;
    /**
     * A signal emitted when the document content changes.
     */
    contentChanged: ISignal<IDocumentModel, void>;
    /**
     * A signal emitted when the document state changes.
     */
    stateChanged: ISignal<IDocumentModel, IChangedArgs<any>>;
    /**
     * The dirty state of the document.
     */
    dirty: boolean;
    /**
     * The read only state of the document.
     */
    readOnly: boolean;
    /**
     * The default kernel name of the document.
     *
     * #### Notes
     * This is a read-only property.
     */
    defaultKernelName: string;
    /**
     * The default kernel language of the document.
     *
     * #### Notes
     * This is a read-only property.
     */
    defaultKernelLanguage: string;
    /**
     * Dispose of the resources held by the document manager.
     */
    dispose(): void;
    /**
     * Serialize the model to a string.
     */
    toString(): string;
    /**
     * Deserialize the model from a string.
     *
     * #### Notes
     * Should emit a [contentChanged] signal.
     */
    fromString(value: string): void;
    /**
     * Serialize the model to JSON.
     */
    toJSON(): any;
    /**
     * Deserialize the model from JSON.
     *
     * #### Notes
     * Should emit a [contentChanged] signal.
     */
    fromJSON(value: any): void;
    /**
     * Initialize the model state.
     */
    initialize(): void;
    private _text;
    private _defaultLang;
    private _dirty;
    private _readOnly;
    private _isDisposed;
}
/**
 * An implementation of a model factory for text files.
 */
export declare class TextModelFactory implements IModelFactory {
    /**
     * The name of the model.
     *
     * #### Notes
     * This is a read-only property.
     */
    name: string;
    /**
     * The contents options used to fetch/save files.
     *
     * #### Notes
     * This is a read-only property.
     */
    contentsOptions: IContentsOpts;
    /**
     * Get whether the model factory has been disposed.
     */
    isDisposed: boolean;
    /**
     * Dispose of the resources held by the document manager.
     */
    dispose(): void;
    /**
     * Create a new model.
     *
     * @param languagePreference - An optional kernel language preference.
     *
     * @returns A new document model.
     */
    createNew(languagePreference?: string): IDocumentModel;
    /**
     * Get the preferred kernel language given an extension.
     */
    preferredLanguage(ext: string): string;
    private _isDisposed;
}
/**
 * An implementation of a model factory for base64 files.
 */
export declare class Base64ModelFactory extends TextModelFactory {
    /**
     * The name of the model.
     *
     * #### Notes
     * This is a read-only property.
     */
    name: string;
    /**
     * The contents options used to fetch/save files.
     *
     * #### Notes
     * This is a read-only property.
     */
    contentsOptions: IContentsOpts;
}
/**
 * The default implemetation of a widget factory.
 */
export declare abstract class ABCWidgetFactory implements IWidgetFactory<Widget> {
    /**
     * Get whether the model factory has been disposed.
     */
    isDisposed: boolean;
    /**
     * Dispose of the resources held by the document manager.
     */
    dispose(): void;
    /**
     * Create a new widget given a document model and a context.
     */
    abstract createNew(model: IDocumentModel, context: IDocumentContext, kernel?: IKernelId): Widget;
    /**
     * Take an action on a widget before closing it.
     *
     * @returns A promise that resolves to true if the document should close
     *   and false otherwise.
     */
    beforeClose(model: IDocumentModel, context: IDocumentContext, widget: Widget): Promise<boolean>;
    private _isDisposed;
}
