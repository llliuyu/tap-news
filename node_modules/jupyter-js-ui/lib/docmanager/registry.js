// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
'use strict';
var utils = require('jupyter-js-utils');
var phosphor_disposable_1 = require('phosphor-disposable');
/**
 * The document registery.
 *
 * #### Notes
 * The document registry is used to register model and widget creators.
 */
var DocumentRegistry = (function () {
    function DocumentRegistry() {
        this._modelFactories = Object.create(null);
        this._widgetFactories = Object.create(null);
        this._defaultWidgetFactory = '';
        this._defaultWidgetFactories = Object.create(null);
        this._fileTypes = [];
        this._creators = [];
        this._extenders = Object.create(null);
    }
    Object.defineProperty(DocumentRegistry.prototype, "defaultWidgetFactory", {
        /**
         * The name of the default widget factory.
         *
         * #### Notes
         * This is a read-only property.
         */
        get: function () {
            return this._defaultWidgetFactory;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DocumentRegistry.prototype, "isDisposed", {
        /**
         * Get whether the document registry has been disposed.
         */
        get: function () {
            return this._widgetFactories === null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources held by the document registery.
     */
    DocumentRegistry.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        for (var modelName in this._modelFactories) {
            this._modelFactories[modelName].dispose();
        }
        this._modelFactories = null;
        for (var widgetName in this._widgetFactories) {
            this._widgetFactories[widgetName].factory.dispose();
        }
        this._widgetFactories = null;
    };
    /**
     * Register a widget factory with the document registry.
     *
     * @param factory - The factory instance.
     *
     * @param options - The options used to register the factory.
     *
     * @returns A disposable used to unregister the factory.
     *
     * #### Notes
     * If a factory with the given `displayName` is already registered,
     * an error will be thrown.
     * If `'.*'` is given as a default extension, the factory will be registered
     * as the global default.
     * If a factory is already registered as a default for a given extension or
     * as the global default, this factory will override the existing default.
     */
    DocumentRegistry.prototype.registerWidgetFactory = function (factory, options) {
        var _this = this;
        var name = options.displayName;
        var exOpt = utils.copy(options);
        exOpt.factory = factory;
        if (this._widgetFactories[name]) {
            throw new Error("Duplicate registered factory " + name);
        }
        this._widgetFactories[name] = exOpt;
        if (options.defaultFor) {
            for (var _i = 0, _a = options.defaultFor; _i < _a.length; _i++) {
                var option = _a[_i];
                if (option === '.*') {
                    this._defaultWidgetFactory = name;
                }
                else if (options.fileExtensions.indexOf(option) !== -1) {
                    this._defaultWidgetFactories[option] = name;
                }
            }
        }
        return new phosphor_disposable_1.DisposableDelegate(function () {
            delete _this._widgetFactories[name];
            if (_this._defaultWidgetFactory === name) {
                _this._defaultWidgetFactory = '';
            }
            for (var _i = 0, _a = Object.keys(_this._defaultWidgetFactories); _i < _a.length; _i++) {
                var opt = _a[_i];
                var n = _this._defaultWidgetFactories[opt];
                if (n === name) {
                    delete _this._defaultWidgetFactories[opt];
                }
            }
        });
    };
    /**
     * Register a model factory.
     *
     * @param factory - The factory instance.
     *
     * @returns A disposable used to unregister the factory.
     *
     * #### Notes
     * If a factory with the given `name` is already registered, an error
     * will be thrown.
     */
    DocumentRegistry.prototype.registerModelFactory = function (factory) {
        var _this = this;
        var name = factory.name;
        if (this._modelFactories[name]) {
            throw new Error("Duplicate registered factory " + name);
        }
        this._modelFactories[name] = factory;
        return new phosphor_disposable_1.DisposableDelegate(function () {
            delete _this._modelFactories[name];
        });
    };
    /**
     * Register a widget extension.
     *
     * @param extension - A widget extension.
     *
     * @returns A disposable that can be used to unregister the extension.
     */
    DocumentRegistry.prototype.registerExtension = function (widgetName, extension) {
        var _this = this;
        if (!(widgetName in this._extenders)) {
            this._extenders[widgetName] = [];
        }
        this._extenders[widgetName].push(extension);
        return new phosphor_disposable_1.DisposableDelegate(function () {
            var index = _this._extenders[widgetName].indexOf(extension);
            _this._extenders[widgetName].splice(index, 1);
        });
    };
    /**
     * Register a file type with the document registry.
     *
     * #### Notes
     * These are used to populate the "Create New" dialog.
     */
    DocumentRegistry.prototype.registerFileType = function (fileType) {
        var _this = this;
        this._fileTypes.push(fileType);
        this._fileTypes.sort(function (a, b) { return a.name.localeCompare(b.name); });
        return new phosphor_disposable_1.DisposableDelegate(function () {
            var index = _this._fileTypes.indexOf(fileType);
            _this._fileTypes.splice(index, 1);
        });
    };
    /**
     * Register a Create New handler.
     *
     * @params creator - The file creator object.
     *
     * @params after - The optional item name to insert after.
     *
     * #### Notes
     * If `after` is not given or not already registered, it will be moved
     * to the end.
     */
    DocumentRegistry.prototype.registerCreator = function (creator, after) {
        var _this = this;
        var added = false;
        if (after) {
            for (var _i = 0, _a = this._creators; _i < _a.length; _i++) {
                var existing = _a[_i];
                if (existing.name === after) {
                    var index = this._creators.indexOf(existing);
                    this._creators.splice(index, 0, creator);
                    added = true;
                }
            }
        }
        if (!added) {
            this._creators.push(creator);
        }
        return new phosphor_disposable_1.DisposableDelegate(function () {
            var index = _this._creators.indexOf(creator);
            _this._creators.splice(index, 1);
        });
    };
    /**
     * Get the list of registered widget factory display names.
     *
     * @param path - An optional file path to filter the results.
     *
     * #### Notes
     * The first item in the list is considered the default.
     */
    DocumentRegistry.prototype.listWidgetFactories = function (ext) {
        ext = ext || '';
        var factories = [];
        var options;
        var name = '';
        // If an extension was given, filter by extension.
        // Make sure the modelFactory is registered.
        if (ext.length > 1) {
            if (ext in this._defaultWidgetFactories) {
                name = this._defaultWidgetFactories[ext];
                options = this._widgetFactories[name];
                if (options.modelName in this._modelFactories) {
                    factories.push(name);
                }
            }
        }
        // Add the rest of the valid widgetFactories that can open the path.
        for (name in this._widgetFactories) {
            if (factories.indexOf(name) !== -1) {
                continue;
            }
            options = this._widgetFactories[name];
            if (!(options.modelName in this._modelFactories)) {
                continue;
            }
            var exts = options.fileExtensions;
            if ((exts.indexOf(ext) !== -1) || (exts.indexOf('.*') !== -1)) {
                factories.push(name);
            }
        }
        // Add the default widget if it was not already added.
        name = this._defaultWidgetFactory;
        if (name && factories.indexOf(name) === -1) {
            options = this._widgetFactories[name];
            if (options.modelName in this._modelFactories) {
                factories.push(name);
            }
        }
        return factories;
    };
    /**
     * Get a list of file types that have been registered.
     */
    DocumentRegistry.prototype.listFileTypes = function () {
        return this._fileTypes.slice();
    };
    /**
     * Get the ordered list of file creator names.
     */
    DocumentRegistry.prototype.listCreators = function () {
        return this._creators.slice();
    };
    /**
     * Get the kernel preference.
     */
    DocumentRegistry.prototype.getKernelPreference = function (ext, widgetName) {
        var widgetFactoryEx = this._getWidgetFactoryEx(widgetName);
        var modelFactory = this.getModelFactory(widgetName);
        var language = modelFactory.preferredLanguage(ext);
        return {
            language: language,
            preferKernel: widgetFactoryEx.preferKernel,
            canStartKernel: widgetFactoryEx.canStartKernel
        };
    };
    /**
     * Get the model factory registered for a given widget factory.
     *
     */
    DocumentRegistry.prototype.getModelFactory = function (widgetName) {
        var wFactoryEx = this._getWidgetFactoryEx(widgetName);
        if (!wFactoryEx) {
            return;
        }
        return this._modelFactories[wFactoryEx.modelName];
    };
    /**
     * Get a widget factory by name.
     */
    DocumentRegistry.prototype.getWidgetFactory = function (widgetName) {
        return this._getWidgetFactoryEx(widgetName).factory;
    };
    /**
     * Get the registered extensions for a given widget.
     */
    DocumentRegistry.prototype.getWidgetExtensions = function (widgetName) {
        if (!(widgetName in this._extenders)) {
            return [];
        }
        return this._extenders[widgetName].slice();
    };
    /**
     * Get the appropriate widget factory by name.
     */
    DocumentRegistry.prototype._getWidgetFactoryEx = function (widgetName) {
        var options;
        if (widgetName === 'default') {
            options = this._widgetFactories[this._defaultWidgetFactory];
        }
        else {
            options = this._widgetFactories[widgetName];
        }
        return options;
    };
    return DocumentRegistry;
}());
exports.DocumentRegistry = DocumentRegistry;
