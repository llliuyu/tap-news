import { IContentsManager, IContentsModel, INotebookSessionManager, INotebookSession, ISessionId, IKernelSpecIds } from 'jupyter-js-services';
import { IDisposable } from 'phosphor-disposable';
import { IChangedArgs } from 'phosphor-properties';
import { ISignal } from 'phosphor-signaling';
/**
 * An implementation of a file browser view model.
 *
 * #### Notes
 * All paths parameters without a leading `'/'` are interpreted as relative to
 * the current directory.  Supports `'../'` syntax.
 */
export declare class FileBrowserModel implements IDisposable {
    /**
     * Construct a new file browser view model.
     */
    constructor(contentsManager: IContentsManager, sessionManager: INotebookSessionManager, specs: IKernelSpecIds);
    /**
     * Get the refreshed signal.
     */
    refreshed: ISignal<FileBrowserModel, void>;
    /**
     * Get the file path changed signal.
     */
    fileChanged: ISignal<FileBrowserModel, IChangedArgs<string>>;
    /**
     * Get the current path.
     *
     * #### Notes
     * This is a read-only property.
     */
    path: string;
    /**
     * Get the selection changed signal.
     */
    selectionChanged: ISignal<FileBrowserModel, void>;
    /**
     * Get whether the view model is disposed.
     */
    isDisposed: boolean;
    /**
     * Get the session ids for active notebooks.
     *
     * #### Notes
     * This is a read-only property.
     */
    sessionIds: ISessionId[];
    /**
     * Get the kernel specs.
     */
    kernelspecs: IKernelSpecIds;
    /**
     * Get whether the items are sorted in ascending order.
     */
    /**
     * Set whether the items are sorted in ascending order.
     */
    sortAscending: boolean;
    /**
     * Get which key the items are sorted on.
     */
    /**
     * Set which key the items are sorted on.
     */
    sortKey: string;
    /**
     * Get the sorted list of items.
     *
     * #### Notes
     * This is a read-only property and should be treated as immutable.
     */
    sortedItems: IContentsModel[];
    /**
     * Select an item by name.
     *
     * #### Notes
     * This is a no-op if the name is not valid or already selected.
     */
    select(name: string): void;
    /**
     * De-select an item by name.
     *
     * #### Notes
     * This is a no-op if the name is not valid or not selected.
     */
    deselect(name: string): void;
    /**
     * Check whether an item is selected.
     *
     * #### Notes
     * Returns `true` for a valid name that is selected, `false` otherwise.
     */
    isSelected(name: string): boolean;
    /**
     * Get the list of selected names.
     */
    getSelected(): string[];
    /**
     * Clear the selected items.
     */
    clearSelected(): void;
    /**
     * Dispose of the resources held by the view model.
     */
    dispose(): void;
    /**
     * Change directory.
     *
     * @param path - The path to the file or directory.
     *
     * @returns A promise with the contents of the directory.
     */
    cd(path?: string): Promise<void>;
    /**
     * Refresh the current directory.
     */
    refresh(): Promise<void>;
    /**
     * Copy a file.
     *
     * @param fromFile - The path of the original file.
     *
     * @param toDir - The path to the target directory.
     *
     * @returns A promise which resolves to the contents of the file.
     */
    copy(fromFile: string, toDir: string): Promise<IContentsModel>;
    /**
     * Delete a file.
     *
     * @param: path - The path to the file to be deleted.
     *
     * @returns A promise which resolves when the file is deleted.
     */
    delete(path: string): Promise<void>;
    /**
     * Download a file.
     *
     * @param - path - The path of the file to be downloaded.
     *
     * @returns - A promise which resolves to the file contents.
     */
    download(path: string): Promise<IContentsModel>;
    /**
     * Create a new untitled file or directory in the current directory.
     *
     * @param type - The type of file object to create. One of
     *  `['file', 'notebook', 'directory']`.
     *
     * @param ext - Optional extension for `'file'` types (defaults to `'.txt'`).
     *
     * @returns A promise containing the new file contents model.
     */
    newUntitled(type: string, ext?: string): Promise<IContentsModel>;
    /**
     * Rename a file or directory.
     *
     * @param path - The path to the original file.
     *
     * @param newPath - The path to the new file.
     *
     * @returns A promise containing the new file contents model.
     */
    rename(path: string, newPath: string): Promise<IContentsModel>;
    /**
     * Upload a `File` object.
     *
     * @param file - The `File` object to upload.
     *
     * @param overwrite - Whether to overwrite an existing file.
     *
     * @returns A promise containing the new file contents model.
     *
     * #### Notes
     * This will fail to upload files that are too big to be sent in one
     * request to the server.
     */
    upload(file: File, overwrite?: boolean): Promise<IContentsModel>;
    /**
     * Shut down a notebook session by session id.
     */
    shutdown(sessionId: ISessionId): Promise<void>;
    /**
     * Start a new session on a notebook.
     */
    startSession(path: string, kernel: string): Promise<INotebookSession>;
    /**
     * Sort the model items.
     */
    private _sort();
    /**
     * Perform the actual upload.
     */
    private _upload(file);
    /**
     * Get the notebook sessions for the current directory.
     */
    private _findSessions();
    private _maxUploadSizeMb;
    private _contentsManager;
    private _sessionIds;
    private _sessionManager;
    private _model;
    private _selection;
    private _sortKey;
    private _ascending;
    private _unsortedNames;
    private _specs;
}
