// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
'use strict';
var phosphor_domutil_1 = require('phosphor-domutil');
var dialog_1 = require('../dialog');
/**
 * The class name added to FileBrowser instances.
 */
exports.FILE_BROWSER_CLASS = 'jp-FileBrowser';
/**
 * The class name added to drop targets.
 */
exports.DROP_TARGET_CLASS = 'jp-mod-dropTarget';
/**
 * The class name added to selected rows.
 */
exports.SELECTED_CLASS = 'jp-mod-selected';
/**
 * The mime type for a contents drag object.
 */
exports.CONTENTS_MIME = 'application/x-jupyter-icontents';
/**
 * An error message dialog to show in the filebrowser widget.
 */
function showErrorMessage(host, title, error) {
    console.error(error);
    if (!host.isAttached) {
        return;
    }
    // Find the file browser node.
    var node = host.node;
    while (!node.classList.contains(exports.FILE_BROWSER_CLASS)) {
        node = node.parentElement;
    }
    var options = {
        title: title,
        host: node,
        body: error.message || "File " + title,
        buttons: [dialog_1.okButton],
        okText: 'DISMISS'
    };
    return dialog_1.showDialog(options).then(function () { });
}
exports.showErrorMessage = showErrorMessage;
/**
 * Get the index of the node at a client position, or `-1`.
 */
function hitTestNodes(nodes, x, y) {
    for (var i = 0, n = nodes.length; i < n; ++i) {
        if (phosphor_domutil_1.hitTest(nodes[i], x, y))
            return i;
    }
    return -1;
}
exports.hitTestNodes = hitTestNodes;
/**
 * Find the first element matching a class name.
 */
function findElement(parent, className) {
    var elements = parent.getElementsByClassName(className);
    if (elements.length)
        return elements[0];
}
exports.findElement = findElement;
