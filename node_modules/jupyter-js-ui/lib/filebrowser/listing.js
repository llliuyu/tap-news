// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var moment = require('moment');
var arrays = require('phosphor-arrays');
var phosphor_dragdrop_1 = require('phosphor-dragdrop');
var phosphor_widget_1 = require('phosphor-widget');
var dialog_1 = require('../dialog');
var utils = require('./utils');
var utils_1 = require('./utils');
/**
 * The class name added to DirListing widget.
 */
var DIR_LISTING_CLASS = 'jp-DirListing';
/**
 * The class name added to a dir listing header node.
 */
var HEADER_CLASS = 'jp-DirListing-header';
/**
 * The class name added to a dir listing list header cell.
 */
var HEADER_ITEM_CLASS = 'jp-DirListing-headerItem';
/**
 * The class name added to a header cell text node.
 */
var HEADER_ITEM_TEXT_CLASS = 'jp-DirListing-headerItemText';
/**
 * The class name added to a header cell icon node.
 */
var HEADER_ITEM_ICON_CLASS = 'jp-DirListing-headerItemIcon';
/**
 * The class name added to the dir listing content node.
 */
var CONTENT_CLASS = 'jp-DirListing-content';
/**
 * The class name added to dir listing content item.
 */
var ITEM_CLASS = 'jp-DirListing-item';
/**
 * The class name added to the listing item text cell.
 */
var ITEM_TEXT_CLASS = 'jp-DirListing-itemText';
/**
 * The class name added to the listing item icon cell.
 */
var ITEM_ICON_CLASS = 'jp-DirListing-itemIcon';
/**
 * The class name added to the listing item modified cell.
 */
var ITEM_MODIFIED_CLASS = 'jp-DirListing-itemModified';
/**
 * The class name added to the dir listing editor node.
 */
var EDITOR_CLASS = 'jp-DirListing-editor';
/**
 * The class name added to the name column header cell.
 */
var NAME_ID_CLASS = 'jp-id-name';
/**
 * The class name added to the modified column header cell.
 */
var MODIFIED_ID_CLASS = 'jp-id-modified';
/**
 * The class name added to a file type content item.
 */
var FILE_TYPE_CLASS = 'jp-type-file';
/**
 * The class name added to a folder type content item.
 */
var FOLDER_TYPE_CLASS = 'jp-type-folder';
/**
 * The class name added to a notebook type content item.
 */
var NOTEBOOK_TYPE_CLASS = 'jp-type-notebook';
/**
 * The class name added to the widget when there are items on the clipboard.
 */
var CLIPBOARD_CLASS = 'jp-mod-clipboard';
/**
 * The class name added to cut rows.
 */
var CUT_CLASS = 'jp-mod-cut';
/**
 * The class name added when there are more than one selected rows.
 */
var MULTI_SELECTED_CLASS = 'jp-mod-multiSelected';
/**
 * The class name added to indicate running notebook.
 */
var RUNNING_CLASS = 'jp-mod-running';
/**
 * The class name added for a decending sort.
 */
var DESCENDING_CLASS = 'jp-mod-descending';
/**
 * The minimum duration for a rename select in ms.
 */
var RENAME_DURATION = 500;
/**
 * The threshold in pixels to start a drag event.
 */
var DRAG_THRESHOLD = 5;
/**
 * The factory MIME type supported by phosphor dock panels.
 */
var FACTORY_MIME = 'application/x-phosphor-widget-factory';
/**
 * A widget which hosts a file list area.
 */
var DirListing = (function (_super) {
    __extends(DirListing, _super);
    /**
     * Construct a new file browser directory listing widget.
     *
     * @param model - The file browser view model.
     */
    function DirListing(model, manager, opener) {
        _super.call(this);
        this._model = null;
        this._editNode = null;
        this._items = [];
        this._drag = null;
        this._dragData = null;
        this._selectTimer = -1;
        this._noSelectTimer = -1;
        this._isCut = false;
        this._prevPath = '';
        this._clipboard = [];
        this._softSelection = '';
        this._manager = null;
        this._opener = null;
        this.addClass(DIR_LISTING_CLASS);
        this._model = model;
        this._model.refreshed.connect(this._onModelRefreshed, this);
        this._model.selectionChanged.connect(this._onSelectionChanged, this);
        this._editNode = document.createElement('input');
        this._editNode.className = EDITOR_CLASS;
        this._manager = manager;
        this._opener = opener;
    }
    /**
     * Create the DOM node for a dir listing.
     */
    DirListing.createNode = function () {
        var node = document.createElement('div');
        var content = document.createElement('ul');
        var header = this.createHeaderNode();
        content.className = CONTENT_CLASS;
        node.appendChild(header);
        node.appendChild(content);
        node.tabIndex = 1;
        return node;
    };
    /**
     * Create the header node for a dir listing.
     *
     * @returns A new DOM node to use as the dir listing header.
     *
     * #### Notes
     * This method may be reimplemented to create custom headers.
     */
    DirListing.createHeaderNode = function () {
        var node = document.createElement('div');
        var name = createItemNode('Name');
        var modified = createItemNode('Last Modified');
        node.className = HEADER_CLASS;
        name.classList.add(NAME_ID_CLASS);
        name.classList.add(utils_1.SELECTED_CLASS);
        modified.classList.add(MODIFIED_ID_CLASS);
        node.appendChild(name);
        node.appendChild(modified);
        return node;
        function createItemNode(label) {
            var node = document.createElement('div');
            var text = document.createElement('span');
            var icon = document.createElement('span');
            node.className = HEADER_ITEM_CLASS;
            text.className = HEADER_ITEM_TEXT_CLASS;
            icon.className = HEADER_ITEM_ICON_CLASS;
            text.textContent = label;
            node.appendChild(text);
            node.appendChild(icon);
            return node;
        }
    };
    /**
     * Create a new item node for a dir listing.
     *
     * @returns A new DOM node to use as a content item.
     *
     * #### Notes
     * This method may be reimplemented to create custom items.
     */
    DirListing.createItemNode = function () {
        var node = document.createElement('li');
        var icon = document.createElement('span');
        var text = document.createElement('span');
        var modified = document.createElement('span');
        node.className = ITEM_CLASS;
        icon.className = ITEM_ICON_CLASS;
        text.className = ITEM_TEXT_CLASS;
        modified.className = ITEM_MODIFIED_CLASS;
        node.appendChild(icon);
        node.appendChild(text);
        node.appendChild(modified);
        return node;
    };
    /**
     * Update an item node to reflect the current state of a model.
     *
     * @param node - A node created by a call to [[createItemNode]].
     *
     * @param model - The model object to use for the item state.
     *
     * #### Notes
     * This is called automatically when the item should be updated.
     *
     * If the [[createItemNode]] method is reimplemented, this method
     * should also be reimplemented so that the item state is properly
     * updated.
     */
    DirListing.updateItemNode = function (node, model) {
        var icon = node.firstChild;
        var text = icon.nextSibling;
        var modified = text.nextSibling;
        var type;
        switch (model.type) {
            case 'directory':
                type = FOLDER_TYPE_CLASS;
                break;
            case 'notebook':
                type = NOTEBOOK_TYPE_CLASS;
                break;
            default:
                type = FILE_TYPE_CLASS;
                break;
        }
        var modText = '';
        var modTitle = '';
        if (model.last_modified) {
            var time = moment(model.last_modified).fromNow();
            modText = time === 'a few seconds ago' ? 'seconds ago' : time;
            modTitle = moment(model.last_modified).format('YYYY-MM-DD HH:mm');
        }
        node.className = ITEM_CLASS + " " + type;
        text.textContent = model.name;
        modified.textContent = modText;
        modified.title = modTitle;
    };
    /**
     * Dispose of the resources held by the directory listing.
     */
    DirListing.prototype.dispose = function () {
        this._model = null;
        this._items = null;
        this._editNode = null;
        this._drag = null;
        this._dragData = null;
        this._manager = null;
        this._opener = null;
        _super.prototype.dispose.call(this);
    };
    Object.defineProperty(DirListing.prototype, "model", {
        /**
         * Get the model used by the listing.
         *
         * #### Notes
         * This is a read-only property.
         */
        get: function () {
            return this._model;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DirListing.prototype, "headerNode", {
        /**
         * Get the dir listing header node.
         *
         * #### Notes
         * This is the node which holds the header cells.
         *
         * Modifying this node directly can lead to undefined behavior.
         *
         * This is a read-only property.
         */
        get: function () {
            return utils.findElement(this.node, HEADER_CLASS);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DirListing.prototype, "contentNode", {
        /**
         * Get the dir listing content node.
         *
         * #### Notes
         * This is the node which holds the item nodes.
         *
         * Modifying this node directly can lead to undefined behavior.
         *
         * This is a read-only property.
         */
        get: function () {
            return utils.findElement(this.node, CONTENT_CLASS);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Rename the first currently selected item.
     */
    DirListing.prototype.rename = function () {
        return this._doRename();
    };
    /**
     * Cut the selected items.
     */
    DirListing.prototype.cut = function () {
        this._isCut = true;
        this._copy();
    };
    /**
     * Copy the selected items.
     */
    DirListing.prototype.copy = function () {
        this._copy();
    };
    /**
     * Paste the items from the clipboard.
     */
    DirListing.prototype.paste = function () {
        var _this = this;
        if (!this._clipboard.length) {
            return;
        }
        var promises = [];
        for (var _i = 0, _a = this._clipboard; _i < _a.length; _i++) {
            var path = _a[_i];
            if (this._isCut) {
                var parts = path.split('/');
                var name_1 = parts[parts.length - 1];
                promises.push(this._model.rename(path, name_1));
            }
            else {
                promises.push(this._model.copy(path, '.'));
            }
        }
        // Remove any cut modifiers.
        for (var _b = 0, _c = this._items; _b < _c.length; _b++) {
            var item = _c[_b];
            item.classList.remove(CUT_CLASS);
        }
        this._clipboard = [];
        this._isCut = false;
        this.removeClass(CLIPBOARD_CLASS);
        return Promise.all(promises).then(function () { return _this._model.refresh(); }, function (error) { return utils.showErrorMessage(_this, 'Paste Error', error); });
    };
    /**
     * Delete the currently selected item(s).
     */
    DirListing.prototype.delete = function () {
        var _this = this;
        var names = [];
        if (this._softSelection) {
            names.push(this._softSelection);
        }
        else {
            var items = this._model.sortedItems;
            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                var item = items_1[_i];
                if (this._model.isSelected(item.name)) {
                    names.push(item.name);
                }
            }
        }
        var message = "Permanantly delete these " + names.length + " files?";
        if (names.length === 1) {
            message = "Permanently delete file \"" + names[0] + "\"?";
        }
        if (names.length) {
            return dialog_1.showDialog({
                title: 'Delete file?',
                body: message,
                host: this.node.parentElement,
                okText: 'DELETE'
            }).then(function (result) {
                if (result.text === 'DELETE') {
                    return _this._delete(names);
                }
            });
        }
        return Promise.resolve(void 0);
    };
    /**
     * Duplicate the currently selected item(s).
     */
    DirListing.prototype.duplicate = function () {
        var _this = this;
        var promises = [];
        for (var _i = 0, _a = this._getSelectedItems(); _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.type !== 'directory') {
                promises.push(this._model.copy(item.path, this._model.path));
            }
        }
        return Promise.all(promises).then(function () { return _this._model.refresh(); }, function (error) { return utils.showErrorMessage(_this, 'Duplicate file', error); });
    };
    /**
     * Download the currently selected item(s).
     */
    DirListing.prototype.download = function () {
        var _this = this;
        for (var _i = 0, _a = this._getSelectedItems(); _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.type !== 'directory') {
                return this._model.download(item.path).catch(function (error) {
                    return utils.showErrorMessage(_this, 'Download file', error);
                });
            }
        }
    };
    /**
     * Shut down kernels on the applicable currently selected items.
     */
    DirListing.prototype.shutdownKernels = function () {
        var _this = this;
        var promises = [];
        var items = this._model.sortedItems;
        var paths = items.map(function (item) { return item.path; });
        for (var _i = 0, _a = this._model.sessionIds; _i < _a.length; _i++) {
            var sessionId = _a[_i];
            var index = paths.indexOf(sessionId.notebook.path);
            if (!this._softSelection && this._model.isSelected(items[index].name)) {
                promises.push(this._model.shutdown(sessionId));
            }
            else if (this._softSelection === items[index].name) {
                promises.push(this._model.shutdown(sessionId));
            }
        }
        return Promise.all(promises).then(function () { return _this._model.refresh(); }, function (error) { return utils.showErrorMessage(_this, 'Shutdown kernel', error); });
    };
    /**
     * Select next item.
     *
     * @param keepExisting - Whether to keep the current selection and add to it.
     */
    DirListing.prototype.selectNext = function (keepExisting) {
        if (keepExisting === void 0) { keepExisting = false; }
        var index = -1;
        var selected = this._model.getSelected();
        var items = this._model.sortedItems;
        if (selected.length === 1 || keepExisting) {
            // Select the next item.
            var name_2 = selected[selected.length - 1];
            index = arrays.findIndex(items, function (value, index) { return value.name === name_2; });
            index += 1;
            if (index === this._items.length)
                index = 0;
        }
        else if (selected.length === 0) {
            // Select the first item.
            index = 0;
        }
        else {
            // Select the last selected item.
            var name_3 = selected[selected.length - 1];
            index = arrays.findIndex(items, function (value, index) { return value.name === name_3; });
        }
        if (index !== -1)
            this._selectItem(index, keepExisting);
    };
    /**
     * Select previous item.
     *
     * @param keepExisting - Whether to keep the current selection and add to it.
     */
    DirListing.prototype.selectPrevious = function (keepExisting) {
        if (keepExisting === void 0) { keepExisting = false; }
        var index = -1;
        var selected = this._model.getSelected();
        var items = this._model.sortedItems;
        if (selected.length === 1 || keepExisting) {
            // Select the previous item.
            var name_4 = selected[0];
            index = arrays.findIndex(items, function (value, index) { return value.name === name_4; });
            index -= 1;
            if (index === -1)
                index = this._items.length - 1;
        }
        else if (selected.length === 0) {
            // Select the last item.
            index = this._items.length - 1;
        }
        else {
            // Select the first selected item.
            var name_5 = selected[0];
            index = arrays.findIndex(items, function (value, index) { return value.name === name_5; });
        }
        if (index !== -1)
            this._selectItem(index, keepExisting);
    };
    /**
     * Handle the DOM events for the directory listing.
     *
     * @param event - The DOM event sent to the widget.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the panel's DOM node. It should
     * not be called directly by user code.
     */
    DirListing.prototype.handleEvent = function (event) {
        switch (event.type) {
            case 'mousedown':
                this._evtMousedown(event);
                break;
            case 'mouseup':
                this._evtMouseup(event);
                break;
            case 'mousemove':
                this._evtMousemove(event);
                break;
            case 'keydown':
                this._evtKeydown(event);
                break;
            case 'click':
                this._evtClick(event);
                break;
            case 'dblclick':
                this._evtDblClick(event);
                break;
            case 'scroll':
                this._evtScroll(event);
                break;
            case 'p-dragenter':
                this._evtDragEnter(event);
                break;
            case 'p-dragleave':
                this._evtDragLeave(event);
                break;
            case 'p-dragover':
                this._evtDragOver(event);
                break;
            case 'p-drop':
                this._evtDrop(event);
                break;
        }
    };
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    DirListing.prototype.onAfterAttach = function (msg) {
        _super.prototype.onAfterAttach.call(this, msg);
        var node = this.node;
        var content = utils.findElement(node, CONTENT_CLASS);
        node.addEventListener('mousedown', this);
        node.addEventListener('keydown', this);
        node.addEventListener('click', this);
        node.addEventListener('dblclick', this);
        content.addEventListener('scroll', this);
        content.addEventListener('p-dragenter', this);
        content.addEventListener('p-dragleave', this);
        content.addEventListener('p-dragover', this);
        content.addEventListener('p-drop', this);
    };
    /**
     * A message handler invoked on a `'before-detach'` message.
     */
    DirListing.prototype.onBeforeDetach = function (msg) {
        _super.prototype.onBeforeDetach.call(this, msg);
        var node = this.node;
        var content = utils.findElement(node, CONTENT_CLASS);
        node.removeEventListener('mousedown', this);
        node.removeEventListener('keydown', this);
        node.removeEventListener('click', this);
        node.removeEventListener('dblclick', this);
        content.removeEventListener('scroll', this);
        content.removeEventListener('p-dragenter', this);
        content.removeEventListener('p-dragleave', this);
        content.removeEventListener('p-dragover', this);
        content.removeEventListener('p-drop', this);
        document.removeEventListener('mousemove', this, true);
        document.removeEventListener('mouseup', this, true);
    };
    /**
     * A handler invoked on an `'update-request'` message.
     */
    DirListing.prototype.onUpdateRequest = function (msg) {
        // Fetch common variables.
        var items = this._model.sortedItems;
        var nodes = this._items;
        var content = utils.findElement(this.node, CONTENT_CLASS);
        var subtype = this.constructor;
        this.removeClass(MULTI_SELECTED_CLASS);
        this.removeClass(utils_1.SELECTED_CLASS);
        // Remove any excess item nodes.
        while (nodes.length > items.length) {
            var node = nodes.pop();
            content.removeChild(node);
        }
        // Add any missing item nodes.
        while (nodes.length < items.length) {
            var node = subtype.createItemNode();
            nodes.push(node);
            content.appendChild(node);
        }
        // Update the node states to match the model contents.
        for (var i = 0, n = items.length; i < n; ++i) {
            subtype.updateItemNode(nodes[i], items[i]);
            if (this._model.isSelected(items[i].name)) {
                nodes[i].classList.add(utils_1.SELECTED_CLASS);
                if (this._isCut && this._model.path === this._prevPath) {
                    nodes[i].classList.add(CUT_CLASS);
                }
            }
        }
        // Handle the selectors on the widget node.
        var selectedNames = this._model.getSelected();
        if (selectedNames.length > 1) {
            this.addClass(MULTI_SELECTED_CLASS);
        }
        if (selectedNames.length) {
            this.addClass(utils_1.SELECTED_CLASS);
        }
        // Handle notebook session statuses.
        var paths = items.map(function (item) { return item.path; });
        var specs = this._model.kernelspecs;
        for (var _i = 0, _a = this._model.sessionIds; _i < _a.length; _i++) {
            var sessionId = _a[_i];
            var index = paths.indexOf(sessionId.notebook.path);
            var node = this._items[index];
            node.classList.add(RUNNING_CLASS);
            node.title = specs.kernelspecs[sessionId.kernel.name].spec.display_name;
        }
        this._prevPath = this._model.path;
    };
    /**
     * Handle the `'click'` event for the widget.
     */
    DirListing.prototype._evtClick = function (event) {
        this._softSelection = '';
        var target = event.target;
        var header = this.headerNode;
        if (header.contains(target)) {
            var children = header.getElementsByClassName(HEADER_ITEM_CLASS);
            var name_6 = children[0];
            var modified = children[1];
            if (name_6.contains(target)) {
                if (this._model.sortKey === 'name') {
                    var flag = !this._model.sortAscending;
                    this._model.sortAscending = flag;
                    if (flag)
                        name_6.classList.remove(DESCENDING_CLASS);
                    else
                        name_6.classList.add(DESCENDING_CLASS);
                }
                else {
                    this._model.sortKey = 'name';
                    this._model.sortAscending = true;
                    name_6.classList.remove(DESCENDING_CLASS);
                }
                name_6.classList.add(utils_1.SELECTED_CLASS);
                modified.classList.remove(utils_1.SELECTED_CLASS);
                modified.classList.remove(DESCENDING_CLASS);
            }
            else if (modified.contains(target)) {
                if (this._model.sortKey === 'last_modified') {
                    var flag = !this._model.sortAscending;
                    this._model.sortAscending = flag;
                    if (flag)
                        modified.classList.remove(DESCENDING_CLASS);
                    else
                        modified.classList.add(DESCENDING_CLASS);
                }
                else {
                    this._model.sortKey = 'last_modified';
                    this._model.sortAscending = true;
                    modified.classList.remove(DESCENDING_CLASS);
                }
                modified.classList.add(utils_1.SELECTED_CLASS);
                name_6.classList.remove(utils_1.SELECTED_CLASS);
                name_6.classList.remove(DESCENDING_CLASS);
            }
            this.update();
            return;
        }
        // Bail if editing.
        if (this._editNode.contains(target)) {
            return;
        }
        var content = this.contentNode;
        if (content.contains(target)) {
            this._handleFileSelect(event);
        }
    };
    /**
     * Handle the `'scroll'` event for the widget.
     */
    DirListing.prototype._evtScroll = function (event) {
        this.headerNode.scrollLeft = this.contentNode.scrollLeft;
    };
    /**
     * Handle the `'mousedown'` event for the widget.
     */
    DirListing.prototype._evtMousedown = function (event) {
        // Bail if clicking within the edit node
        if (event.target === this._editNode) {
            return;
        }
        // Blur the edit node if necessary.
        if (this._editNode.parentNode) {
            if (this._editNode !== event.target) {
                this._editNode.focus();
                this._editNode.blur();
                clearTimeout(this._selectTimer);
            }
            else {
                return;
            }
        }
        var index = utils.hitTestNodes(this._items, event.clientX, event.clientY);
        if (index === -1) {
            return;
        }
        this._softSelection = '';
        var items = this._model.sortedItems;
        var selected = this._model.getSelected();
        if (selected.indexOf(items[index].name) === -1) {
            this._softSelection = items[index].name;
        }
        // Left mouse press for drag start.
        if (event.button === 0) {
            this._dragData = { pressX: event.clientX, pressY: event.clientY,
                index: index };
            document.addEventListener('mouseup', this, true);
            document.addEventListener('mousemove', this, true);
        }
        if (event.button !== 0) {
            clearTimeout(this._selectTimer);
        }
    };
    /**
     * Handle the `'mouseup'` event for the widget.
     */
    DirListing.prototype._evtMouseup = function (event) {
        if (event.button !== 0 || !this._drag) {
            document.removeEventListener('mousemove', this, true);
            document.removeEventListener('mouseup', this, true);
            return;
        }
        event.preventDefault();
        event.stopPropagation();
    };
    /**
     * Handle the `'mousemove'` event for the widget.
     */
    DirListing.prototype._evtMousemove = function (event) {
        event.preventDefault();
        event.stopPropagation();
        // Bail if we are the one dragging.
        if (this._drag) {
            return;
        }
        // Check for a drag initialization.
        var data = this._dragData;
        var dx = Math.abs(event.clientX - data.pressX);
        var dy = Math.abs(event.clientY - data.pressY);
        if (dx < DRAG_THRESHOLD && dy < DRAG_THRESHOLD) {
            return;
        }
        this._startDrag(data.index, event.clientX, event.clientY);
    };
    /**
     * Handle the `'keydown'` event for the widget.
     */
    DirListing.prototype._evtKeydown = function (event) {
        switch (event.keyCode) {
            case 38:
                this.selectPrevious(event.shiftKey);
                event.stopPropagation();
                event.preventDefault();
                break;
            case 40:
                this.selectNext(event.shiftKey);
                event.stopPropagation();
                event.preventDefault();
                break;
        }
    };
    /**
     * Handle the `'dblclick'` event for the widget.
     */
    DirListing.prototype._evtDblClick = function (event) {
        var _this = this;
        // Do nothing if it's not a left mouse press.
        if (event.button !== 0) {
            return;
        }
        // Do nothing if any modifier keys are pressed.
        if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {
            return;
        }
        // Stop the event propagation.
        event.preventDefault();
        event.stopPropagation();
        clearTimeout(this._selectTimer);
        this._noSelectTimer = setTimeout(function () {
            _this._noSelectTimer = -1;
        }, RENAME_DURATION);
        this._editNode.blur();
        // Find a valid double click target.
        var target = event.target;
        var i = arrays.findIndex(this._items, function (node) { return node.contains(target); });
        if (i === -1) {
            return;
        }
        var item = this._model.sortedItems[i];
        if (item.type === 'directory') {
            this._model.cd(item.name).catch(function (error) {
                return utils_1.showErrorMessage(_this, 'Open directory', error);
            });
        }
        else {
            var path = item.path;
            var widget = this._manager.findWidget(path);
            if (!widget) {
                widget = this._manager.open(item.path);
                widget.populated.connect(function () { return _this.model.refresh(); });
                widget.context.kernelChanged.connect(function () { return _this.model.refresh(); });
            }
            this._opener.open(widget);
        }
    };
    /**
     * Handle the `'p-dragenter'` event for the widget.
     */
    DirListing.prototype._evtDragEnter = function (event) {
        if (event.mimeData.hasData(utils.CONTENTS_MIME)) {
            var index = utils.hitTestNodes(this._items, event.clientX, event.clientY);
            if (index === -1) {
                return;
            }
            var item = this._model.sortedItems[index];
            var target = this._items[index];
            if (!target.classList.contains(FOLDER_TYPE_CLASS)) {
                return;
            }
            if (!this._softSelection && this._model.isSelected(item.name)) {
                return;
            }
            target.classList.add(utils.DROP_TARGET_CLASS);
            event.preventDefault();
            event.stopPropagation();
        }
    };
    /**
     * Handle the `'p-dragleave'` event for the widget.
     */
    DirListing.prototype._evtDragLeave = function (event) {
        event.preventDefault();
        event.stopPropagation();
        var dropTarget = utils.findElement(this.node, utils.DROP_TARGET_CLASS);
        if (dropTarget)
            dropTarget.classList.remove(utils.DROP_TARGET_CLASS);
    };
    /**
     * Handle the `'p-dragover'` event for the widget.
     */
    DirListing.prototype._evtDragOver = function (event) {
        event.preventDefault();
        event.stopPropagation();
        event.dropAction = event.proposedAction;
        var dropTarget = utils.findElement(this.node, utils.DROP_TARGET_CLASS);
        if (dropTarget)
            dropTarget.classList.remove(utils.DROP_TARGET_CLASS);
        var index = utils.hitTestNodes(this._items, event.clientX, event.clientY);
        this._items[index].classList.add(utils.DROP_TARGET_CLASS);
    };
    /**
     * Handle the `'p-drop'` event for the widget.
     */
    DirListing.prototype._evtDrop = function (event) {
        var _this = this;
        event.preventDefault();
        event.stopPropagation();
        clearTimeout(this._selectTimer);
        if (event.proposedAction === phosphor_dragdrop_1.DropAction.None) {
            event.dropAction = phosphor_dragdrop_1.DropAction.None;
            return;
        }
        if (!event.mimeData.hasData(utils.CONTENTS_MIME)) {
            return;
        }
        event.dropAction = event.proposedAction;
        var target = event.target;
        while (target && target.parentElement) {
            if (target.classList.contains(utils.DROP_TARGET_CLASS)) {
                target.classList.remove(utils.DROP_TARGET_CLASS);
                break;
            }
            target = target.parentElement;
        }
        // Get the path based on the target node.
        var index = this._items.indexOf(target);
        var items = this._model.sortedItems;
        var path = items[index].name + '/';
        // Move all of the items.
        var promises = [];
        var names = event.mimeData.getData(utils.CONTENTS_MIME);
        var _loop_1 = function(name_7) {
            var newPath = path + name_7;
            promises.push(this_1._model.rename(name_7, newPath).catch(function (error) {
                if (error.xhr) {
                    error.message = error.xhr.statusText + " " + error.xhr.status;
                }
                if (error.message.indexOf('409') !== -1) {
                    var options = {
                        title: 'Overwrite file?',
                        host: _this.parent.node,
                        body: "\"" + newPath + "\" already exists, overwrite?",
                        okText: 'OVERWRITE'
                    };
                    return dialog_1.showDialog(options).then(function (button) {
                        if (button.text === 'OVERWRITE') {
                            return _this._model.delete(newPath).then(function () {
                                return _this._model.rename(name_7, newPath);
                            });
                        }
                    });
                }
            }));
        };
        var this_1 = this;
        for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
            var name_7 = names_1[_i];
            _loop_1(name_7);
        }
        Promise.all(promises).then(function () { return _this._model.refresh(); }, function (error) { return utils.showErrorMessage(_this, 'Move Error', error); });
    };
    /**
     * Start a drag event.
     */
    DirListing.prototype._startDrag = function (index, clientX, clientY) {
        var _this = this;
        var selectedNames = this._model.getSelected();
        var source = this._items[index];
        var items = this._model.sortedItems;
        var item = null;
        // If the source node is not selected, use just that node.
        if (!source.classList.contains(utils_1.SELECTED_CLASS)) {
            item = items[index];
            selectedNames = [item.name];
        }
        else if (selectedNames.length === 1) {
            var name_8 = selectedNames[0];
            item = arrays.find(items, function (value, index) { return value.name === name_8; });
        }
        // Create the drag image.
        var dragImage = source.cloneNode(true);
        dragImage.removeChild(dragImage.lastChild);
        if (selectedNames.length > 1) {
            var text = utils.findElement(dragImage, ITEM_TEXT_CLASS);
            text.textContent = '(' + selectedNames.length + ')';
        }
        // Set up the drag event.
        this._drag = new phosphor_dragdrop_1.Drag({
            dragImage: dragImage,
            mimeData: new phosphor_dragdrop_1.MimeData(),
            supportedActions: phosphor_dragdrop_1.DropActions.Move,
            proposedAction: phosphor_dragdrop_1.DropAction.Move
        });
        this._drag.mimeData.setData(utils.CONTENTS_MIME, selectedNames);
        if (item && item.type !== 'directory') {
            this._drag.mimeData.setData(FACTORY_MIME, function () {
                var path = item.path;
                var widget = _this._manager.findWidget(path);
                if (!widget) {
                    widget = _this._manager.open(item.path);
                    widget.populated.connect(function () { return _this.model.refresh(); });
                    widget.context.kernelChanged.connect(function () { return _this.model.refresh(); });
                }
            });
        }
        // Start the drag and remove the mousemove listener.
        this._drag.start(clientX, clientY).then(function (action) {
            _this._drag = null;
            clearTimeout(_this._selectTimer);
        });
        document.removeEventListener('mousemove', this, true);
    };
    /**
     * Handle selection on a file node.
     */
    DirListing.prototype._handleFileSelect = function (event) {
        var _this = this;
        // Fetch common variables.
        var items = this._model.sortedItems;
        var index = utils.hitTestNodes(this._items, event.clientX, event.clientY);
        clearTimeout(this._selectTimer);
        if (index == -1)
            return;
        var name = items[index].name;
        var selected = this._model.getSelected();
        // Handle toggling.
        if (event.metaKey || event.ctrlKey) {
            if (this._model.isSelected(name)) {
                this._model.deselect(name);
            }
            else {
                this._model.select(name);
            }
        }
        else if (event.shiftKey) {
            this._handleMultiSelect(selected, index);
        }
        else {
            // Handle a rename.
            if (selected.length === 1 && selected[0] === name) {
                this._selectTimer = setTimeout(function () {
                    if (_this._noSelectTimer === -1) {
                        _this._doRename();
                    }
                }, RENAME_DURATION);
            }
            this._model.clearSelected();
            this._model.select(name);
        }
        this._isCut = false;
        this.update();
    };
    /**
     * Handle a multiple select on a file item node.
     */
    DirListing.prototype._handleMultiSelect = function (selected, index) {
        // Find the "nearest selected".
        var items = this._model.sortedItems;
        var nearestIndex = -1;
        for (var i = 0; i < this._items.length; i++) {
            if (i === index) {
                continue;
            }
            var name_9 = items[i].name;
            if (selected.indexOf(name_9) !== -1) {
                if (nearestIndex === -1) {
                    nearestIndex = i;
                }
                else {
                    if (Math.abs(index - i) < Math.abs(nearestIndex - i)) {
                        nearestIndex = i;
                    }
                }
            }
        }
        // Default to the first element (and fill down).
        if (nearestIndex === -1) {
            nearestIndex = 0;
        }
        // Select the rows between the current and the nearest selected.
        for (var i = 0; i < this._items.length; i++) {
            if (nearestIndex >= i && index <= i ||
                nearestIndex <= i && index >= i) {
                this._model.select(items[i].name);
            }
        }
    };
    /**
     * Get the currently selected items.
     */
    DirListing.prototype._getSelectedItems = function () {
        var _this = this;
        var items = this._model.sortedItems;
        if (!this._softSelection) {
            return items.filter(function (item) { return _this._model.isSelected(item.name); });
        }
        return items.filter(function (item) { return item.name === _this._softSelection; });
    };
    /**
     * Copy the selected items, and optionally cut as well.
     */
    DirListing.prototype._copy = function () {
        this._clipboard = [];
        for (var _i = 0, _a = this._getSelectedItems(); _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.type !== 'directory') {
                // Store the absolute path of the item.
                this._clipboard.push('/' + item.path);
            }
        }
        this.update();
    };
    /**
     * Delete the files with the given names.
     */
    DirListing.prototype._delete = function (names) {
        var _this = this;
        var promises = [];
        for (var _i = 0, names_2 = names; _i < names_2.length; _i++) {
            var name_10 = names_2[_i];
            promises.push(this._model.delete(name_10));
        }
        return Promise.all(promises).then(function () { return _this._model.refresh(); }, function (error) { return utils.showErrorMessage(_this, 'Delete file', error); });
    };
    /**
     * Allow the user to rename item on a given row.
     */
    DirListing.prototype._doRename = function () {
        var _this = this;
        var items = this._model.sortedItems;
        var name = this._softSelection || this._model.getSelected()[0];
        var index = arrays.findIndex(items, function (value, index) { return value.name === name; });
        var row = this._items[index];
        var text = utils.findElement(row, ITEM_TEXT_CLASS);
        var original = text.textContent;
        return Private.doRename(row, text, this._editNode).then(function (changed) {
            if (!changed) {
                return original;
            }
            var newPath = text.textContent;
            return _this._model.rename(original, newPath).catch(function (error) {
                if (error.xhr) {
                    error.message = error.xhr.status + ": error.statusText";
                }
                if (error.message.indexOf('409') !== -1 ||
                    error.message.indexOf('already exists') !== -1) {
                    var options = {
                        title: 'Overwrite file?',
                        host: _this.parent.node,
                        body: "\"" + newPath + "\" already exists, overwrite?",
                        okText: 'OVERWRITE'
                    };
                    return dialog_1.showDialog(options).then(function (button) {
                        if (button.text === 'OVERWRITE') {
                            return _this._model.delete(newPath).then(function () {
                                return _this._model.rename(original, newPath).then(function () {
                                    _this._model.refresh();
                                });
                            });
                        }
                        else {
                            text.textContent = original;
                        }
                    });
                }
            }).catch(function (error) {
                utils.showErrorMessage(_this, 'Rename Error', error);
                return original;
            }).then(function () {
                _this._model.refresh();
                return text.textContent;
            });
        });
    };
    /**
     * Select a given item.
     */
    DirListing.prototype._selectItem = function (index, keepExisting) {
        // Selected the given row(s)
        var items = this._model.sortedItems;
        if (!keepExisting) {
            this._model.clearSelected();
        }
        var name = items[index].name;
        this._model.select(name);
        Private.scrollIfNeeded(this.contentNode, this._items[index]);
        this._isCut = false;
    };
    /**
     * Handle the `refreshed` signal from the model.
     */
    DirListing.prototype._onModelRefreshed = function () {
        this.update();
    };
    /**
     * Handle the `selectionChanged` signal from the model.
     */
    DirListing.prototype._onSelectionChanged = function () {
        this.update();
    };
    return DirListing;
}(phosphor_widget_1.Widget));
exports.DirListing = DirListing;
/**
 * The namespace for the listing private data.
 */
var Private;
(function (Private) {
    /**
     * Handle editing text on a node.
     *
     * @returns Boolean indicating whether the name changed.
     */
    function doRename(parent, text, edit) {
        var changed = true;
        parent.replaceChild(edit, text);
        edit.value = text.textContent;
        edit.focus();
        var index = edit.value.lastIndexOf('.');
        if (index === -1) {
            edit.setSelectionRange(0, edit.value.length);
        }
        else {
            edit.setSelectionRange(0, index);
        }
        return new Promise(function (resolve, reject) {
            edit.onblur = function () {
                parent.replaceChild(text, edit);
                if (text.textContent === edit.value) {
                    changed = false;
                }
                if (changed)
                    text.textContent = edit.value;
                resolve(changed);
            };
            edit.onkeydown = function (event) {
                switch (event.keyCode) {
                    case 13:
                        event.stopPropagation();
                        event.preventDefault();
                        edit.blur();
                        break;
                    case 27:
                        event.stopPropagation();
                        event.preventDefault();
                        changed = false;
                        edit.blur();
                        break;
                }
            };
        });
    }
    Private.doRename = doRename;
    /**
     * Scroll an element into view if needed.
     *
     * @param area - The scroll area element.
     *
     * @param elem - The element of interest.
     */
    function scrollIfNeeded(area, elem) {
        var ar = area.getBoundingClientRect();
        var er = elem.getBoundingClientRect();
        if (er.top < ar.top) {
            area.scrollTop -= ar.top - er.top;
        }
        else if (er.bottom > ar.bottom) {
            area.scrollTop += er.bottom - ar.bottom;
        }
    }
    Private.scrollIfNeeded = scrollIfNeeded;
})(Private || (Private = {}));
