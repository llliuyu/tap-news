/**
 * The interface for a renderer.
 */
export interface IRenderer<T> {
    /**
     * The function that will render a mimebundle.
     *
     * @param mimetype - the mimetype for the data
     * @param data - the data to render
     */
    render(mimetype: string, data: string): T;
    /**
     * The mimetypes this renderer accepts.
     */
    mimetypes: string[];
}
/**
 * A map of mimetypes to types.
 */
export declare type MimeMap<T> = {
    [mimetype: string]: T;
};
/**
 * A composite renderer.
 *
 * #### Notes
 * When rendering a mimebundle, a mimetype is selected from the mimetypes by
 * searching through the `this.order` list. The first mimetype found in the bundle
 * determines the renderer that will be used.
 *
 * You can add a renderer by adding it to the `renderers` object and registering
 * the mimetype in the `order` array.
 */
export declare class RenderMime<T> {
    /**
     * Construct a renderer.
     *
     * @param renderers - a map of mimetypes to renderers.
     * @param order - a list of mimetypes in order of precedence (earliest one has precedence).
     */
    constructor(renderers: MimeMap<IRenderer<T>>, order: string[]);
    /**
     * Render a mimebundle.
     *
     * @param bundle - the mimebundle to render.
     */
    render(bundle: MimeMap<string>): T;
    /**
     * Find the preferred mimetype in a mimebundle.
     *
     * @param bundle - the mimebundle giving available mimetype content.
     */
    preferredMimetype(bundle: MimeMap<string>): string;
    /**
     * Clone the rendermime instance with shallow copies of data.
     */
    clone(): RenderMime<T>;
    /**
     * Get a renderer by mimetype.
     */
    getRenderer(mimetype: string): IRenderer<T>;
    /**
     * Add a renderer by mimetype.
     *
     * @param mimetype - The mimetype of the renderer.
     * @param renderer - The renderer instance.
     * @param index - The optional order index.
     *
     * ####Notes
     * Negative indices count from the end, so -1 refers to the penultimate index.
     * Use the index of `.order.length` to add to the end of the render precedence list,
     * which would make the new renderer the last choice.
     */
    addRenderer(mimetype: string, renderer: IRenderer<T>, index?: number): void;
    /**
     * Remove a renderer by mimetype.
     */
    removeRenderer(mimetype: string): void;
    /**
     * Get the ordered list of mimetypes.
     *
     * #### Notes
     * These mimetypes are searched from beginning to end, and the first matching
     * mimetype is used.
     */
    /**
     * Set the ordered list of mimetypes.
     */
    order: string[];
    private _renderers;
    private _order;
}
