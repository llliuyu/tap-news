// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
/**
 * A composite renderer.
 *
 * #### Notes
 * When rendering a mimebundle, a mimetype is selected from the mimetypes by
 * searching through the `this.order` list. The first mimetype found in the bundle
 * determines the renderer that will be used.
 *
 * You can add a renderer by adding it to the `renderers` object and registering
 * the mimetype in the `order` array.
 */
var RenderMime = (function () {
    /**
     * Construct a renderer.
     *
     * @param renderers - a map of mimetypes to renderers.
     * @param order - a list of mimetypes in order of precedence (earliest one has precedence).
     */
    function RenderMime(renderers, order) {
        this._renderers = {};
        for (var i in renderers) {
            this._renderers[i] = renderers[i];
        }
        this._order = order.slice();
    }
    /**
     * Render a mimebundle.
     *
     * @param bundle - the mimebundle to render.
     */
    RenderMime.prototype.render = function (bundle) {
        var mimetype = this.preferredMimetype(bundle);
        if (mimetype) {
            return this._renderers[mimetype].render(mimetype, bundle[mimetype]);
        }
    };
    /**
     * Find the preferred mimetype in a mimebundle.
     *
     * @param bundle - the mimebundle giving available mimetype content.
     */
    RenderMime.prototype.preferredMimetype = function (bundle) {
        for (var _i = 0, _a = this.order; _i < _a.length; _i++) {
            var m = _a[_i];
            if (bundle.hasOwnProperty(m)) {
                return m;
            }
        }
    };
    /**
     * Clone the rendermime instance with shallow copies of data.
     */
    RenderMime.prototype.clone = function () {
        return new RenderMime(this._renderers, this.order);
    };
    /**
     * Get a renderer by mimetype.
     */
    RenderMime.prototype.getRenderer = function (mimetype) {
        return this._renderers[mimetype];
    };
    /**
     * Add a renderer by mimetype.
     *
     * @param mimetype - The mimetype of the renderer.
     * @param renderer - The renderer instance.
     * @param index - The optional order index.
     *
     * ####Notes
     * Negative indices count from the end, so -1 refers to the penultimate index.
     * Use the index of `.order.length` to add to the end of the render precedence list,
     * which would make the new renderer the last choice.
     */
    RenderMime.prototype.addRenderer = function (mimetype, renderer, index) {
        if (index === void 0) { index = 0; }
        this._renderers[mimetype] = renderer;
        this._order.splice(index, 0, mimetype);
    };
    /**
     * Remove a renderer by mimetype.
     */
    RenderMime.prototype.removeRenderer = function (mimetype) {
        delete this._renderers[mimetype];
        var index = this._order.indexOf(mimetype);
        if (index !== -1) {
            this._order.splice(index, 1);
        }
    };
    Object.defineProperty(RenderMime.prototype, "order", {
        /**
         * Get the ordered list of mimetypes.
         *
         * #### Notes
         * These mimetypes are searched from beginning to end, and the first matching
         * mimetype is used.
         */
        get: function () {
            return this._order.slice();
        },
        /**
         * Set the ordered list of mimetypes.
         */
        set: function (value) {
            this._order = value.slice();
        },
        enumerable: true,
        configurable: true
    });
    return RenderMime;
}());
exports.RenderMime = RenderMime;
