// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var marked = require('marked');
var ansi_up_1 = require('ansi_up');
var phosphor_widget_1 = require('phosphor-widget');
var latex_1 = require('./latex');
/**
 * A widget for displaying HTML and rendering math.
 */
var HTMLWidget = (function (_super) {
    __extends(HTMLWidget, _super);
    function HTMLWidget(html) {
        _super.call(this);
        try {
            var range = document.createRange();
            this.node.appendChild(range.createContextualFragment(html));
        }
        catch (error) {
            console.warn('Environment does not support Range ' +
                'createContextualFragment, falling back on innerHTML');
            this.node.innerHTML = html;
        }
    }
    /**
     * A message handler invoked on an `'after-attach'` message.
     *
     * ####Notes
     * If the node is visible, it is typeset.
     */
    HTMLWidget.prototype.onAfterAttach = function (msg) {
        latex_1.typeset(this.node);
    };
    return HTMLWidget;
}(phosphor_widget_1.Widget));
exports.HTMLWidget = HTMLWidget;
/**
 * A widget for displaying text and rendering math.
 */
var LatexWidget = (function (_super) {
    __extends(LatexWidget, _super);
    function LatexWidget(text) {
        _super.call(this);
        text = text.replace(/<br>|\$\$|^\$|\$$|\\\(|\\\)|\\\[|\\\]/g, '');
        this.node.innerHTML = text;
    }
    /**
     * A message handler invoked on an `'after-attach'` message.
     *
     * ####Notes
     * If the node is visible, it is typeset.
     */
    LatexWidget.prototype.onAfterAttach = function (msg) {
        latex_1.typeset(this.node);
    };
    return LatexWidget;
}(phosphor_widget_1.Widget));
exports.LatexWidget = LatexWidget;
/**
 * A renderer for raw html.
 */
var HTMLRenderer = (function () {
    function HTMLRenderer() {
        this.mimetypes = ['text/html'];
    }
    HTMLRenderer.prototype.render = function (mimetype, data) {
        return new HTMLWidget(data);
    };
    return HTMLRenderer;
}());
exports.HTMLRenderer = HTMLRenderer;
/**
 * A renderer for `<img>` data.
 */
var ImageRenderer = (function () {
    function ImageRenderer() {
        this.mimetypes = ['image/png', 'image/jpeg', 'image/gif'];
    }
    ImageRenderer.prototype.render = function (mimetype, data) {
        var w = new phosphor_widget_1.Widget();
        var img = document.createElement('img');
        img.src = "data:" + mimetype + ";base64," + data;
        w.node.appendChild(img);
        return w;
    };
    return ImageRenderer;
}());
exports.ImageRenderer = ImageRenderer;
/**
 * A renderer for plain text and Jupyter console text data.
 */
var TextRenderer = (function () {
    function TextRenderer() {
        this.mimetypes = ['text/plain', 'application/vnd.jupyter.console-text'];
    }
    TextRenderer.prototype.render = function (mimetype, data) {
        var w = new phosphor_widget_1.Widget();
        var el = document.createElement('pre');
        var esc = ansi_up_1.escape_for_html(data);
        el.innerHTML = ansi_up_1.ansi_to_html(esc);
        w.node.appendChild(el);
        return w;
    };
    return TextRenderer;
}());
exports.TextRenderer = TextRenderer;
/**
 * A renderer for raw `<script>` data.
 */
var JavascriptRenderer = (function () {
    function JavascriptRenderer() {
        this.mimetypes = ['text/javascript', 'application/javascript'];
    }
    JavascriptRenderer.prototype.render = function (mimetype, data) {
        var w = new phosphor_widget_1.Widget();
        var s = document.createElement('script');
        s.type = mimetype;
        s.textContent = data;
        w.node.appendChild(s);
        return w;
    };
    return JavascriptRenderer;
}());
exports.JavascriptRenderer = JavascriptRenderer;
/**
 * A renderer for `<svg>` data.
 */
var SVGRenderer = (function () {
    function SVGRenderer() {
        this.mimetypes = ['image/svg+xml'];
    }
    SVGRenderer.prototype.render = function (mimetype, data) {
        var w = new phosphor_widget_1.Widget();
        w.node.innerHTML = data;
        var svgElement = w.node.getElementsByTagName('svg')[0];
        if (!svgElement) {
            throw new Error('SVGRender: Error: Failed to create <svg> element');
        }
        return w;
    };
    return SVGRenderer;
}());
exports.SVGRenderer = SVGRenderer;
/**
 * A renderer for PDF data.
 */
var PDFRenderer = (function () {
    function PDFRenderer() {
        this.mimetypes = ['application/pdf'];
    }
    PDFRenderer.prototype.render = function (mimetype, data) {
        var w = new phosphor_widget_1.Widget();
        var a = document.createElement('a');
        a.target = '_blank';
        a.textContent = "View PDF";
        a.href = 'data:application/pdf;base64,' + data;
        w.node.appendChild(a);
        return w;
    };
    return PDFRenderer;
}());
exports.PDFRenderer = PDFRenderer;
/**
 * A renderer for LateX data.
 */
var LatexRenderer = (function () {
    function LatexRenderer() {
        this.mimetypes = ['text/latex'];
    }
    LatexRenderer.prototype.render = function (mimetype, data) {
        return new LatexWidget(data);
    };
    return LatexRenderer;
}());
exports.LatexRenderer = LatexRenderer;
/**
 * A renderer for Jupyter Markdown data.
 */
var MarkdownRenderer = (function () {
    function MarkdownRenderer() {
        this.mimetypes = ['text/markdown'];
    }
    MarkdownRenderer.prototype.render = function (mimetype, text) {
        var data = latex_1.removeMath(text);
        var html = marked(data['text']);
        return new HTMLWidget(latex_1.replaceMath(html, data['math']));
    };
    return MarkdownRenderer;
}());
exports.MarkdownRenderer = MarkdownRenderer;
