import { IRenderer } from '../rendermime';
import { Widget } from 'phosphor-widget';
import { Message } from 'phosphor-messaging';
/**
 * A widget for displaying HTML and rendering math.
 */
export declare class HTMLWidget extends Widget {
    constructor(html: string);
    /**
     * A message handler invoked on an `'after-attach'` message.
     *
     * ####Notes
     * If the node is visible, it is typeset.
     */
    onAfterAttach(msg: Message): void;
}
/**
 * A widget for displaying text and rendering math.
 */
export declare class LatexWidget extends Widget {
    constructor(text: string);
    /**
     * A message handler invoked on an `'after-attach'` message.
     *
     * ####Notes
     * If the node is visible, it is typeset.
     */
    onAfterAttach(msg: Message): void;
}
/**
 * A renderer for raw html.
 */
export declare class HTMLRenderer implements IRenderer<Widget> {
    mimetypes: string[];
    render(mimetype: string, data: string): Widget;
}
/**
 * A renderer for `<img>` data.
 */
export declare class ImageRenderer implements IRenderer<Widget> {
    mimetypes: string[];
    render(mimetype: string, data: string): Widget;
}
/**
 * A renderer for plain text and Jupyter console text data.
 */
export declare class TextRenderer implements IRenderer<Widget> {
    mimetypes: string[];
    render(mimetype: string, data: string): Widget;
}
/**
 * A renderer for raw `<script>` data.
 */
export declare class JavascriptRenderer implements IRenderer<Widget> {
    mimetypes: string[];
    render(mimetype: string, data: string): Widget;
}
/**
 * A renderer for `<svg>` data.
 */
export declare class SVGRenderer implements IRenderer<Widget> {
    mimetypes: string[];
    render(mimetype: string, data: string): Widget;
}
/**
 * A renderer for PDF data.
 */
export declare class PDFRenderer implements IRenderer<Widget> {
    mimetypes: string[];
    render(mimetype: string, data: string): Widget;
}
/**
 * A renderer for LateX data.
 */
export declare class LatexRenderer implements IRenderer<Widget> {
    mimetypes: string[];
    render(mimetype: string, data: string): Widget;
}
/**
 * A renderer for Jupyter Markdown data.
 */
export declare class MarkdownRenderer implements IRenderer<Widget> {
    mimetypes: string[];
    render(mimetype: string, text: string): Widget;
}
