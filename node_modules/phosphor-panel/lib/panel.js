/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2015, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var phosphor_widget_1 = require('phosphor-widget');
var layout_1 = require('./layout');
/**
 * The class name added to Panel instances.
 */
var PANEL_CLASS = 'p-Panel';
/**
 * A simple and convenient panel widget class.
 *
 * #### Notes
 * This class is suitable as a base class for implementing a variety of
 * convenience panels, but can also be used directly along with CSS to
 * arrange a collection of widgets.
 *
 * This class provides a convenience wrapper around a [[PanelLayout]].
 */
var Panel = (function (_super) {
    __extends(Panel, _super);
    /**
     * Construct a new panel.
     */
    function Panel() {
        _super.call(this);
        this.addClass(PANEL_CLASS);
        this.layout = this.constructor.createLayout();
    }
    /**
     * Create a panel layout to use with a panel.
     *
     * @returns A new panel layout to use with a panel.
     *
     * #### Notes
     * This may be reimplemented by a subclass to create custom layouts.
     */
    Panel.createLayout = function () {
        return new layout_1.PanelLayout();
    };
    /**
     * Get the number of child widgets in the panel.
     *
     * @returns The number of child widgets in the panel.
     */
    Panel.prototype.childCount = function () {
        return this.layout.childCount();
    };
    /**
     * Get the child widget at the specified index.
     *
     * @param index - The index of the child widget of interest.
     *
     * @returns The child at the specified index, or `undefined`.
     */
    Panel.prototype.childAt = function (index) {
        return this.layout.childAt(index);
    };
    /**
     * Get the index of the specified child widget.
     *
     * @param child - The child widget of interest.
     *
     * @returns The index of the specified child, or `-1`.
     */
    Panel.prototype.childIndex = function (child) {
        return this.layout.childIndex(child);
    };
    /**
     * Add a child widget to the end of the panel.
     *
     * @param child - The child widget to add to the panel.
     *
     * #### Notes
     * If the child is already contained in the panel, it will be moved.
     */
    Panel.prototype.addChild = function (child) {
        this.layout.addChild(child);
    };
    /**
     * Insert a child widget at the specified index.
     *
     * @param index - The index at which to insert the child.
     *
     * @param child - The child widget to insert into to the panel.
     *
     * #### Notes
     * If the child is already contained in the panel, it will be moved.
     */
    Panel.prototype.insertChild = function (index, child) {
        this.layout.insertChild(index, child);
    };
    return Panel;
})(phosphor_widget_1.Widget);
exports.Panel = Panel;
