/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2015, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var arrays = require('phosphor-arrays');
var phosphor_messaging_1 = require('phosphor-messaging');
var phosphor_widget_1 = require('phosphor-widget');
/**
 * A concrete layout implementation suitable for many use cases.
 *
 * #### Notes
 * This class is suitable as a base class for implementing a variety of
 * layouts, but can also be used directly with standard CSS to layout a
 * collection of widgets.
 */
var PanelLayout = (function (_super) {
    __extends(PanelLayout, _super);
    function PanelLayout() {
        _super.apply(this, arguments);
        this._children = [];
    }
    /**
     * Dispose of the resources held by the layout.
     *
     * #### Notes
     * This will dispose all current child widgets of the layout.
     */
    PanelLayout.prototype.dispose = function () {
        while (this._children.length > 0) {
            this._children.pop().dispose();
        }
        _super.prototype.dispose.call(this);
    };
    /**
     * Get the number of child widgets in the layout.
     *
     * @returns The number of child widgets in the layout.
     */
    PanelLayout.prototype.childCount = function () {
        return this._children.length;
    };
    /**
     * Get the child widget at the specified index.
     *
     * @param index - The index of the child widget of interest.
     *
     * @returns The child at the specified index, or `undefined`.
     */
    PanelLayout.prototype.childAt = function (index) {
        return this._children[index];
    };
    /**
     * Add a child widget to the end of the layout.
     *
     * @param child - The child widget to add to the layout.
     *
     * #### Notes
     * If the child is already contained in the layout, it will be moved.
     */
    PanelLayout.prototype.addChild = function (child) {
        this.insertChild(this.childCount(), child);
    };
    /**
     * Insert a child widget into the layout at the specified index.
     *
     * @param index - The index at which to insert the child widget.
     *
     * @param child - The child widget to insert into the layout.
     *
     * #### Notes
     * If the child is already contained in the layout, it will be moved.
     */
    PanelLayout.prototype.insertChild = function (index, child) {
        child.parent = this.parent;
        var n = this._children.length;
        var i = this._children.indexOf(child);
        var j = Math.max(0, Math.min(index | 0, n));
        if (i !== -1) {
            if (j === n)
                j--;
            if (i === j)
                return;
            arrays.move(this._children, i, j);
            if (this.parent)
                this.moveChild(i, j, child);
        }
        else {
            arrays.insert(this._children, j, child);
            if (this.parent)
                this.attachChild(j, child);
        }
    };
    /**
     * Remove a child widget from the layout.
     *
     * @param child - The child widget to remove from the layout.
     *
     * #### Notes
     * A child widget will be removed from the layout automatically when
     * its `parent` is set to `null`. This method should only be invoked
     * directly when removing a widget from a layout which has yet to be
     * installed on a parent widget.
     *
     * This method does *not* modify the widget's `parent`.
     *
     * If the child is not contained in the layout, this is a no-op.
     */
    PanelLayout.prototype.removeChild = function (child) {
        var i = arrays.remove(this._children, child);
        if (i !== -1 && this.parent)
            this.detachChild(i, child);
    };
    /**
     * Initialize the children of the layout.
     *
     * #### Notes
     * This method is called automatically when the layout is installed
     * on its parent widget.
     *
     * This may be reimplemented by subclasses as needed.
     */
    PanelLayout.prototype.initialize = function () {
        for (var i = 0; i < this.childCount(); ++i) {
            var child = this.childAt(i);
            child.parent = this.parent;
            this.attachChild(i, child);
        }
    };
    /**
     * Attach a child widget to the parent's DOM node.
     *
     * @param index - The current index of the child in the layout.
     *
     * @param child - The child widget to attach to the parent.
     *
     * #### Notes
     * This method is called automatically by the panel layout at the
     * appropriate time. It should not be called directly by user code.
     *
     * The default implementation adds the child's node to the parent's
     * node at the proper location, and sends an `'after-attach'` message
     * to the child if the parent is attached to the DOM.
     *
     * Subclasses may reimplement this method to control how the child's
     * node is added to the parent's node, but the reimplementation must
     * send an `'after-attach'` message to the child if the parent is
     * attached to the DOM.
     */
    PanelLayout.prototype.attachChild = function (index, child) {
        var ref = this.parent.node.children[index];
        this.parent.node.insertBefore(child.node, ref);
        if (this.parent.isAttached)
            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgAfterAttach);
    };
    /**
     * Move a child widget in the parent's DOM node.
     *
     * @param fromIndex - The previous index of the child in the layout.
     *
     * @param toIndex - The current index of the child in the layout.
     *
     * @param child - The child widget to move in the parent.
     *
     * #### Notes
     * This method is called automatically by the panel layout at the
     * appropriate time. It should not be called directly by user code.
     *
     * The default implementation moves the child's node to the proper
     * location in the parent's node and sends both a `'before-detach'`
     * and an `'after-attach'` message to the child if the parent is
     * attached to the DOM.
     *
     * Subclasses may reimplement this method to control how the child's
     * node is moved in the parent's node, but the reimplementation must
     * send both a `'before-detach'` and an `'after-attach'` message to
     * the child if the parent is attached to the DOM.
     */
    PanelLayout.prototype.moveChild = function (fromIndex, toIndex, child) {
        if (this.parent.isAttached)
            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgBeforeDetach);
        this.parent.node.removeChild(child.node);
        var ref = this.parent.node.children[toIndex];
        this.parent.node.insertBefore(child.node, ref);
        if (this.parent.isAttached)
            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgAfterAttach);
    };
    /**
     * Detach a child widget from the parent's DOM node.
     *
     * @param index - The previous index of the child in the layout.
     *
     * @param child - The child widget to detach from the parent.
     *
     * #### Notes
     * This method is called automatically by the panel layout at the
     * appropriate time. It should not be called directly by user code.
     *
     * The default implementation removes the child's node from the
     * parent's node, and sends a `'before-detach'` message to the child
     * if the parent is attached to the DOM.
     *
     * Subclasses may reimplement this method to control how the child's
     * node is removed from the parent's node, but the reimplementation
     * must send a `'before-detach'` message to the child if the parent
     * is attached to the DOM.
     */
    PanelLayout.prototype.detachChild = function (index, child) {
        if (this.parent.isAttached)
            phosphor_messaging_1.sendMessage(child, phosphor_widget_1.Widget.MsgBeforeDetach);
        this.parent.node.removeChild(child.node);
    };
    /**
     * A message handler invoked on a `'child-removed'` message.
     *
     * #### Notes
     * This will remove the child from the layout.
     *
     * Subclasses should **not** typically reimplement this method.
     */
    PanelLayout.prototype.onChildRemoved = function (msg) {
        this.removeChild(msg.child);
    };
    return PanelLayout;
})(phosphor_widget_1.AbstractLayout);
exports.PanelLayout = PanelLayout;
