/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2015, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var phosphor_boxpanel_1 = require('phosphor-boxpanel');
var phosphor_stackedpanel_1 = require('phosphor-stackedpanel');
var phosphor_widget_1 = require('phosphor-widget');
var tabbar_1 = require('./tabbar');
/**
 * The class name added to TabPanel instances.
 */
var TAB_PANEL_CLASS = 'p-TabPanel';
/**
 * The class name added to a TabPanel's tab bar.
 */
var TAB_BAR_CLASS = 'p-TabPanel-tabBar';
/**
 * The class name added to a TabPanel's stacked panel.
 */
var STACKED_PANEL_CLASS = 'p-TabPanel-stackedPanel';
/**
 * A widget which combines a `TabBar` and a `StackedPanel`.
 *
 * #### Notes
 * This is a simple panel which handles the common case of a tab bar
 * placed above a content area. The selected tab controls the widget
 * which is shown in the content area.
 *
 * For use cases which require more control than is provided by this
 * panel, the `TabBar` widget may be used independently.
 */
var TabPanel = (function (_super) {
    __extends(TabPanel, _super);
    /**
     * Construct a new tab panel.
     */
    function TabPanel() {
        _super.call(this);
        this._currentWidget = null;
        this.addClass(TAB_PANEL_CLASS);
        var constructor = this.constructor;
        this._tabBar = constructor.createTabBar();
        this._stackedPanel = constructor.createStackedPanel();
        this._tabBar.tabMoved.connect(this._onTabMoved, this);
        this._tabBar.currentChanged.connect(this._onCurrentChanged, this);
        this._tabBar.tabCloseRequested.connect(this._onTabCloseRequested, this);
        this._stackedPanel.widgetRemoved.connect(this._onWidgetRemoved, this);
        var layout = new phosphor_boxpanel_1.BoxLayout();
        layout.direction = phosphor_boxpanel_1.BoxLayout.TopToBottom;
        layout.spacing = 0;
        phosphor_boxpanel_1.BoxLayout.setStretch(this._tabBar, 0);
        phosphor_boxpanel_1.BoxLayout.setStretch(this._stackedPanel, 1);
        layout.addChild(this._tabBar);
        layout.addChild(this._stackedPanel);
        this.layout = layout;
    }
    /**
     * Create a `TabBar` for a tab panel.
     *
     * @returns A new tab bar to use with a tab panel.
     *
     * #### Notes
     * This may be reimplemented by subclasses for custom tab bars.
     */
    TabPanel.createTabBar = function () {
        var tabBar = new tabbar_1.TabBar();
        tabBar.addClass(TAB_BAR_CLASS);
        return tabBar;
    };
    /**
     * Create a `StackedPanel` for a tab panel.
     *
     * @returns A new stacked panel to use with a tab panel.
     *
     * #### Notes
     * This may be reimplemented by subclasses for custom stacks.
     */
    TabPanel.createStackedPanel = function () {
        var stackedPanel = new phosphor_stackedpanel_1.StackedPanel();
        stackedPanel.addClass(STACKED_PANEL_CLASS);
        return stackedPanel;
    };
    /**
     * Dispose of the resources held by the widget.
     */
    TabPanel.prototype.dispose = function () {
        this._tabBar = null;
        this._stackedPanel = null;
        this._currentWidget = null;
        _super.prototype.dispose.call(this);
    };
    Object.defineProperty(TabPanel.prototype, "currentWidget", {
        /**
         * Get the currently selected widget.
         */
        get: function () {
            return this._tabBar.currentItem;
        },
        /**
         * Set the currently selected widget.
         */
        set: function (value) {
            this._tabBar.currentItem = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabPanel.prototype, "tabsMovable", {
        /**
         * Get whether the tabs are movable by the user.
         */
        get: function () {
            return this._tabBar.tabsMovable;
        },
        /**
         * Set whether the tabs are movable by the user.
         */
        set: function (value) {
            this._tabBar.tabsMovable = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabPanel.prototype, "tabBar", {
        /**
         * Get the tab bar associated with the tab panel.
         *
         * #### Notes
         * Modifying the tab bar directly can lead to undefined behavior.
         *
         * This is a read-only property.
         */
        get: function () {
            return this._tabBar;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabPanel.prototype, "stackedPanel", {
        /**
         * Get the stacked panel associated with the tab panel.
         *
         * #### Notes
         * Modifying the stack directly can lead to undefined behavior.
         *
         * This is a read-only property.
         */
        get: function () {
            return this._stackedPanel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get the number of child widgets in the tab panel.
     *
     * @returns The number of child widgets in the tab panel.
     *
     * #### Notes
     * This delegates to the `childCount` method of the stacked panel.
     */
    TabPanel.prototype.childCount = function () {
        return this._stackedPanel.childCount();
    };
    /**
     * Get the child widget at the specified index.
     *
     * @param index - The index of the child widget of interest.
     *
     * @returns The child at the specified index, or `undefined`.
     *
     * #### Notes
     * This delegates to the `childAt` method of the stacked panel.
     */
    TabPanel.prototype.childAt = function (index) {
        return this._stackedPanel.childAt(index);
    };
    /**
     * Get the index of the specified child widget.
     *
     * @param child - The child widget of interest.
     *
     * @returns The index of the specified child, or `-1`.
     *
     * #### Notes
     * This delegates to the `childIndex` method of the stacked panel.
     */
    TabPanel.prototype.childIndex = function (child) {
        return this._stackedPanel.childIndex(child);
    };
    /**
     * Add a child widget to the end of the tab panel.
     *
     * @param child - The child widget to add to the tab panel.
     *
     * #### Notes
     * If the child is already contained in the panel, it will be moved.
     */
    TabPanel.prototype.addChild = function (child) {
        this.insertChild(this.childCount(), child);
    };
    /**
     * Insert a child widget at the specified index.
     *
     * @param index - The index at which to insert the child.
     *
     * @param child - The child widget to insert into to the tab panel.
     *
     * #### Notes
     * If the child is already contained in the panel, it will be moved.
     */
    TabPanel.prototype.insertChild = function (index, child) {
        if (child !== this._currentWidget)
            child.hide();
        this._stackedPanel.insertChild(index, child);
        this._tabBar.insertItem(index, child);
    };
    /**
     * Handle the `currentChanged` signal from the tab bar.
     */
    TabPanel.prototype._onCurrentChanged = function (sender, args) {
        var oldWidget = this._currentWidget;
        var newWidget = args.item;
        if (oldWidget === newWidget)
            return;
        this._currentWidget = newWidget;
        if (oldWidget)
            oldWidget.hide();
        if (newWidget)
            newWidget.show();
    };
    /**
     * Handle the `tabCloseRequested` signal from the tab bar.
     */
    TabPanel.prototype._onTabCloseRequested = function (sender, args) {
        args.item.close();
    };
    /**
     * Handle the `tabMoved` signal from the tab bar.
     */
    TabPanel.prototype._onTabMoved = function (sender, args) {
        this._stackedPanel.insertChild(args.toIndex, args.item);
    };
    /**
     * Handle the `widgetRemoved` signal from the stacked panel.
     */
    TabPanel.prototype._onWidgetRemoved = function (sender, widget) {
        if (this._currentWidget === widget)
            this._currentWidget = null;
        this._tabBar.removeItem(widget);
    };
    return TabPanel;
})(phosphor_widget_1.Widget);
exports.TabPanel = TabPanel;
