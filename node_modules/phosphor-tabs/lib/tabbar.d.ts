import { Message } from 'phosphor-messaging';
import { ISignal } from 'phosphor-signaling';
import { Title, Widget } from 'phosphor-widget';
/**
 * An object which can be added to a tab bar.
 */
export interface ITabItem {
    /**
     * The title object which supplies the data for a tab.
     */
    title: Title;
}
/**
 * The arguments object for various tab bar signals.
 */
export interface ITabIndexArgs {
    /**
     * The index of the tab.
     */
    index: number;
    /**
     * The tab item for the tab.
     */
    item: ITabItem;
}
/**
 * The arguments object for a `tabMoved` signal.
 */
export interface ITabMovedArgs {
    /**
     * The previous index of the tab.
     */
    fromIndex: number;
    /**
     * The current index of the tab.
     */
    toIndex: number;
    /**
     * The tab item for the tab.
     */
    item: ITabItem;
}
/**
 * The arguments object for a `tabDetachRequested` signal.
 */
export interface ITabDetachArgs extends ITabIndexArgs {
    /**
     * The current client X position of the mouse.
     */
    clientX: number;
    /**
     * The current client Y position of the mouse.
     */
    clientY: number;
}
/**
 * A widget which displays tab items as a row of tabs.
 */
export declare class TabBar extends Widget {
    /**
     * Create the DOM node for a tab bar.
     */
    static createNode(): HTMLElement;
    /**
     * Create and initialize a tab node for a tab bar.
     *
     * @param title - The title to use for the initial tab state.
     *
     * @returns A new DOM node to use as a tab in a tab bar.
     *
     * #### Notes
     * It is not necessary to subscribe to the `changed` signal of the
     * title. The tab bar subscribes to that signal and will call the
     * [[updateTab]] static method automatically as needed.
     *
     * This method may be reimplemented to create custom tabs.
     */
    static createTab(title: Title): HTMLElement;
    /**
     * Update a tab node to reflect the current state of a title.
     *
     * @param tab - A tab node created by a call to [[createTab]].
     *
     * @param title - The title object to use for the tab state.
     *
     * #### Notes
     * This is called automatically when the title state changes.
     *
     * If the [[createTab]] method is reimplemented, this method should
     * also be reimplemented so that the tab state is properly updated.
     */
    static updateTab(tab: HTMLElement, title: Title): void;
    /**
     * Get the close icon node for a given tab node.
     *
     * @param tab - A tab node created by a call to [[createTab]].
     *
     * @returns The close icon node for the tab node.
     *
     * #### Notes
     * The close icon node is used to correctly process click events.
     *
     * If the [[createTab]] method is reimplemented, this method should
     * also be reimplemented so that the correct icon node is returned.
     */
    static tabCloseIcon(tab: HTMLElement): HTMLElement;
    /**
     * Construct a new tab bar.
     */
    constructor();
    /**
     * Dispose of the resources held by the widget.
     */
    dispose(): void;
    /**
     * A signal emitted when the current tab is changed.
     */
    currentChanged: ISignal<TabBar, ITabIndexArgs>;
    /**
     * A signal emitted when a tab is moved by the user.
     */
    tabMoved: ISignal<TabBar, ITabMovedArgs>;
    /**
     * A signal emitted when the user clicks a tab's close icon.
     */
    tabCloseRequested: ISignal<TabBar, ITabIndexArgs>;
    /**
     * A signal emitted when a tab is dragged beyond the detach threshold.
     */
    tabDetachRequested: ISignal<TabBar, ITabDetachArgs>;
    /**
     * Get the currently selected tab item.
     */
    /**
     * Set the currently selected tab item.
     */
    currentItem: ITabItem;
    /**
     * Get whether the tabs are movable by the user.
     */
    /**
     * Set whether the tabs are movable by the user.
     */
    tabsMovable: boolean;
    /**
     * Get the tab bar header node.
     *
     * #### Notes
     * This node can be used to add extra content to the tab bar header.
     *
     * This is a read-only property.
     */
    headerNode: HTMLElement;
    /**
     * Get the tab bar body node.
     *
     * #### Notes
     * This node can be used to add extra content to the tab bar.
     *
     * This is a read-only property.
     */
    bodyNode: HTMLElement;
    /**
     * Get the tab bar footer node.
     *
     * #### Notes
     * This node can be used to add extra content to the tab bar footer.
     *
     * This is a read-only property.
     */
    footerNode: HTMLElement;
    /**
     * Get the tab bar content node.
     *
     * #### Notes
     * This is the node which holds the tab nodes.
     *
     * Modifying this node directly can lead to undefined behavior.
     *
     * This is a read-only property.
     */
    contentNode: HTMLElement;
    /**
     * Get the number of tab items in the tab bar.
     *
     * @returns The number of tab items in the tab bar.
     */
    itemCount(): number;
    /**
     * Get the tab item at the specified index.
     *
     * @param index - The index of the tab item of interest.
     *
     * @returns The tab item at the specified index, or `undefined`.
     */
    itemAt(index: number): ITabItem;
    /**
     * Get the index of the specified tab item.
     *
     * @param item - The tab item of interest.
     *
     * @returns The index of the specified item, or `-1`.
     */
    itemIndex(item: ITabItem): number;
    /**
     * Add a tab item to the end of the tab bar.
     *
     * @param item - The tab item to add to the tab bar.
     *
     * #### Notes
     * If the item is already added to the tab bar, it will be moved.
     */
    addItem(item: ITabItem): void;
    /**
     * Insert a tab item at the specified index.
     *
     * @param index - The index at which to insert the item.
     *
     * @param item - The tab item to insert into the tab bar.
     *
     * #### Notes
     * If the item is already added to the tab bar, it will be moved.
     */
    insertItem(index: number, item: ITabItem): void;
    /**
     * Remove a tab item from the tab bar.
     *
     * @param item - The tab item to remove from the tab bar.
     *
     * #### Notes
     * If the item is not in the tab bar, this is a no-op.
     */
    removeItem(item: ITabItem): void;
    /**
     * Get the tab node for the item at the given index.
     *
     * @param index - The index of the tab item of interest.
     *
     * @returns The tab node for the item, or `undefined`.
     */
    tabAt(index: number): HTMLElement;
    /**
     * Release the mouse and restore the non-dragged tab positions.
     *
     * #### Notes
     * This will cause the tab bar to stop handling mouse events and to
     * restore the tabs to their non-dragged positions.
     */
    releaseMouse(): void;
    /**
     * Handle the DOM events for the tab bar.
     *
     * @param event - The DOM event sent to the tab bar.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the tab bar's DOM node. It should
     * not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'before-detach'` message.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * A message handler invoked on an `'update-request'` message.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * Handle the `'keydown'` event for the tab bar.
     */
    private _evtKeyDown(event);
    /**
     * Handle the `'click'` event for the tab bar.
     */
    private _evtClick(event);
    /**
     * Handle the `'mousedown'` event for the tab bar.
     */
    private _evtMouseDown(event);
    /**
     * Handle the `'mousemove'` event for the tab bar.
     */
    private _evtMouseMove(event);
    /**
     * Handle the `'mouseup'` event for the tab bar.
     */
    private _evtMouseUp(event);
    /**
     * Release the mouse and restore the non-dragged tab positions.
     */
    private _releaseMouse();
    /**
     * Handle the `changed` signal of a title object.
     */
    private _onTitleChanged(sender);
    private _tabsMovable;
    private _items;
    private _tabs;
    private _dirtySet;
    private _currentItem;
    private _dragData;
}
