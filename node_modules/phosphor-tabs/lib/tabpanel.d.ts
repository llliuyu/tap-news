import { StackedPanel } from 'phosphor-stackedpanel';
import { Widget } from 'phosphor-widget';
import { TabBar } from './tabbar';
/**
 * A widget which combines a `TabBar` and a `StackedPanel`.
 *
 * #### Notes
 * This is a simple panel which handles the common case of a tab bar
 * placed above a content area. The selected tab controls the widget
 * which is shown in the content area.
 *
 * For use cases which require more control than is provided by this
 * panel, the `TabBar` widget may be used independently.
 */
export declare class TabPanel extends Widget {
    /**
     * Create a `TabBar` for a tab panel.
     *
     * @returns A new tab bar to use with a tab panel.
     *
     * #### Notes
     * This may be reimplemented by subclasses for custom tab bars.
     */
    static createTabBar(): TabBar;
    /**
     * Create a `StackedPanel` for a tab panel.
     *
     * @returns A new stacked panel to use with a tab panel.
     *
     * #### Notes
     * This may be reimplemented by subclasses for custom stacks.
     */
    static createStackedPanel(): StackedPanel;
    /**
     * Construct a new tab panel.
     */
    constructor();
    /**
     * Dispose of the resources held by the widget.
     */
    dispose(): void;
    /**
     * Get the currently selected widget.
     */
    /**
     * Set the currently selected widget.
     */
    currentWidget: Widget;
    /**
     * Get whether the tabs are movable by the user.
     */
    /**
     * Set whether the tabs are movable by the user.
     */
    tabsMovable: boolean;
    /**
     * Get the tab bar associated with the tab panel.
     *
     * #### Notes
     * Modifying the tab bar directly can lead to undefined behavior.
     *
     * This is a read-only property.
     */
    tabBar: TabBar;
    /**
     * Get the stacked panel associated with the tab panel.
     *
     * #### Notes
     * Modifying the stack directly can lead to undefined behavior.
     *
     * This is a read-only property.
     */
    stackedPanel: StackedPanel;
    /**
     * Get the number of child widgets in the tab panel.
     *
     * @returns The number of child widgets in the tab panel.
     *
     * #### Notes
     * This delegates to the `childCount` method of the stacked panel.
     */
    childCount(): number;
    /**
     * Get the child widget at the specified index.
     *
     * @param index - The index of the child widget of interest.
     *
     * @returns The child at the specified index, or `undefined`.
     *
     * #### Notes
     * This delegates to the `childAt` method of the stacked panel.
     */
    childAt(index: number): Widget;
    /**
     * Get the index of the specified child widget.
     *
     * @param child - The child widget of interest.
     *
     * @returns The index of the specified child, or `-1`.
     *
     * #### Notes
     * This delegates to the `childIndex` method of the stacked panel.
     */
    childIndex(child: Widget): number;
    /**
     * Add a child widget to the end of the tab panel.
     *
     * @param child - The child widget to add to the tab panel.
     *
     * #### Notes
     * If the child is already contained in the panel, it will be moved.
     */
    addChild(child: Widget): void;
    /**
     * Insert a child widget at the specified index.
     *
     * @param index - The index at which to insert the child.
     *
     * @param child - The child widget to insert into to the tab panel.
     *
     * #### Notes
     * If the child is already contained in the panel, it will be moved.
     */
    insertChild(index: number, child: Widget): void;
    /**
     * Handle the `currentChanged` signal from the tab bar.
     */
    private _onCurrentChanged(sender, args);
    /**
     * Handle the `tabCloseRequested` signal from the tab bar.
     */
    private _onTabCloseRequested(sender, args);
    /**
     * Handle the `tabMoved` signal from the tab bar.
     */
    private _onTabMoved(sender, args);
    /**
     * Handle the `widgetRemoved` signal from the stacked panel.
     */
    private _onWidgetRemoved(sender, widget);
    private _tabBar;
    private _stackedPanel;
    private _currentWidget;
}
