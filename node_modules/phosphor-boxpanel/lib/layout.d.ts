import { Message } from 'phosphor-messaging';
import { PanelLayout } from 'phosphor-panel';
import { ChildMessage, ResizeMessage, Widget } from 'phosphor-widget';
/**
 * The layout direction of a box layout.
 */
export declare enum Direction {
    /**
     * Left to right direction.
     */
    LeftToRight = 0,
    /**
     * Right to left direction.
     */
    RightToLeft = 1,
    /**
     * Top to bottom direction.
     */
    TopToBottom = 2,
    /**
     * Bottom to top direction.
     */
    BottomToTop = 3,
}
/**
 * A layout which arranges its children in a single row or column.
 */
export declare class BoxLayout extends PanelLayout {
    /**
     * Get the layout direction for the box layout.
     */
    /**
     * Set the layout direction for the box layout.
     */
    direction: Direction;
    /**
     * Get the inter-element spacing for the box layout.
     */
    /**
     * Set the inter-element spacing for the box layout.
     */
    spacing: number;
    /**
     * Initialize the children of the layout.
     *
     * #### Notes
     * This method is called automatically when the layout is installed
     * on its parent widget.
     */
    protected initialize(): void;
    /**
     * Attach a child widget to the parent's DOM node.
     *
     * @param index - The current index of the child in the layout.
     *
     * @param child - The child widget to attach to the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    protected attachChild(index: number, child: Widget): void;
    /**
     * Move a child widget in the parent's DOM node.
     *
     * @param fromIndex - The previous index of the child in the layout.
     *
     * @param toIndex - The current index of the child in the layout.
     *
     * @param child - The child widget to move in the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    protected moveChild(fromIndex: number, toIndex: number, child: Widget): void;
    /**
     * Detach a child widget from the parent's DOM node.
     *
     * @param index - The previous index of the child in the layout.
     *
     * @param child - The child widget to detach from the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    protected detachChild(index: number, child: Widget): void;
    /**
     * A message handler invoked on an `'after-show'` message.
     */
    protected onAfterShow(msg: Message): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'child-shown'` message.
     */
    protected onChildShown(msg: ChildMessage): void;
    /**
     * A message handler invoked on a `'child-hidden'` message.
     */
    protected onChildHidden(msg: ChildMessage): void;
    /**
     * A message handler invoked on a `'resize'` message.
     */
    protected onResize(msg: ResizeMessage): void;
    /**
     * A message handler invoked on an `'update-request'` message.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * A message handler invoked on a `'fit-request'` message.
     */
    protected onFitRequest(msg: Message): void;
    /**
     * Fit the layout to the total size required by the child widgets.
     */
    private _fit();
    /**
     * Update the layout position and size of the child widgets.
     *
     * The parent offset dimensions should be `-1` if unknown.
     */
    private _update(offsetWidth, offsetHeight);
    private _fixed;
    private _spacing;
    private _box;
    private _sizers;
    private _direction;
}
/**
 * The namespace for the `BoxLayout` class statics.
 */
export declare namespace BoxLayout {
    /**
     * A convenience alias of the `LeftToRight` [[Direction]].
     */
    const LeftToRight: Direction;
    /**
     * A convenience alias of the `RightToLeft` [[Direction]].
     */
    const RightToLeft: Direction;
    /**
     * A convenience alias of the `TopToBottom` [[Direction]].
     */
    const TopToBottom: Direction;
    /**
     * A convenience alias of the `BottomToTop` [[Direction]].
     */
    const BottomToTop: Direction;
    /**
     * Get the box layout stretch factor for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @returns The box layout stretch factor for the widget.
     */
    function getStretch(widget: Widget): number;
    /**
     * Set the box layout stretch factor for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @param value - The value for the stretch factor.
     */
    function setStretch(widget: Widget, value: number): void;
    /**
     * Get the box layout size basis for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @returns The box layout size basis for the widget.
     */
    function getSizeBasis(widget: Widget): number;
    /**
     * Set the box layout size basis for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @param value - The value for the size basis.
     */
    function setSizeBasis(widget: Widget, value: number): void;
}
