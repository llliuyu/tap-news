import { IChangedArgs } from 'phosphor-properties';
import { ISignal } from 'phosphor-signaling';
import { Menu } from './menu';
/**
 * An enum of the supported menu item types.
 */
export declare enum MenuItemType {
    /**
     * A normal non-checkable menu item.
     */
    Normal = 0,
    /**
     * A checkable menu item.
     */
    Check = 1,
    /**
     * A separator menu item.
     */
    Separator = 2,
    /**
     * A submenu menu item.
     */
    Submenu = 3,
}
/**
 * A type alias for a menu item handler function.
 */
export declare type MenuItemHandler = (item: MenuItem) => void;
/**
 * An options object for initializing a menu item.
 */
export interface IMenuItemOptions {
    /**
     * The type of the menu item.
     */
    type?: MenuItemType;
    /**
     * The text for the menu item.
     */
    text?: string;
    /**
     * The icon class for the menu item.
     */
    icon?: string;
    /**
     * The keyboard shortcut for the menu item.
     */
    shortcut?: string;
    /**
     * The checked state for the menu item.
     */
    checked?: boolean;
    /**
     * The disabled state for the menu item.
     */
    disabled?: boolean;
    /**
     * The extra class name to associate with the menu item.
     */
    className?: string;
    /**
     * The handler function for the menu item.
     */
    handler?: MenuItemHandler;
    /**
     * The submenu for the menu item.
     */
    submenu?: Menu;
}
/**
 * An item which can be added to a menu widget.
 */
export declare class MenuItem {
    /**
     * Construct a new menu item.
     *
     * @param options - The initialization options for the menu item.
     */
    constructor(options?: IMenuItemOptions);
    /**
     * A signal emitted when the menu item state changes.
     */
    changed: ISignal<MenuItem, IChangedArgs<any>>;
    /**
     * Get the type of the menu item.
     *
     * #### Notes
     * The default value is `MenuItemType.Normal`.
     */
    /**
     * Set the type of the menu item.
     *
     * #### Notes
     * Items with submenus are forced to `MenuItemType.Submenu`.
     */
    type: MenuItemType;
    /**
     * Get the text for the menu item.
     *
     * #### Notes
     * The default value is an empty string.
     *
     * An ampersand (`&`) before a character denotes the item mnemonic.
     */
    /**
     * Set the text for the menu item.
     *
     * #### Notes
     * An ampersand (`&`) before a character denotes the item mnemonic.
     */
    text: string;
    /**
     * Get the icon class for the menu item.
     *
     * #### Notes
     * The default value is an empty string.
     *
     * This is the class name(s) added to a menu item icon node.
     */
    /**
     * Set the icon class for the menu item.
     *
     * #### Notes
     * Multiple class names can be separated with whitespace.
     */
    icon: string;
    /**
     * Get the shortcut key for the menu item.
     *
     * #### Notes
     * The default value is an empty string.
     *
     * The shortcut string is for decoration only.
     */
    /**
     * Set the shortcut key for the menu item.
     *
     * #### Notes
     * The shortcut string is for decoration only.
     */
    shortcut: string;
    /**
     * Get the checked state for the menu item.
     *
     * #### Notes
     * The default value is `false`.
     */
    /**
     * Set the checked state for the menu item.
     *
     * #### Notes
     * Only a `Check` type menu item can be checked.
     */
    checked: boolean;
    /**
     * Get the disabled state for the menu item.
     *
     * #### Notes
     * The default value is `false`.
     */
    /**
     * Set the disabled state for the menu item.
     *
     * #### Notes
     * The handler of a disabled menu item will not be invoked.
     */
    disabled: boolean;
    /**
     * Get the extra class name for the menu item.
     *
     * #### Notes
     * The default value is an empty string.
     *
     * This is the class name(s) added to a menu item node.
     */
    /**
     * Set the extra class name for the menu item.
     *
     * #### Notes
     * Multiple class names can be separated with whitespace.
     */
    className: string;
    /**
     * Get the handler function for the menu item.
     *
     * #### Notes
     * The default value is `null`.
     *
     * The handler will be invoked when the menu item is clicked.
     */
    /**
     * Set the handler function for the menu item.
     *
     * #### Notes
     * The handler will be invoked when the menu item is clicked.
     */
    handler: MenuItemHandler;
    /**
     * Get the submenu for the menu item.
     *
     * #### Notes
     * The default value is null.
     *
     * An item with a submenu will have type `MenuItemType.Submenu`.
     */
    /**
     * Set the submenu for the menu item.
     *
     * #### Notes
     * The `type` will be automatically set to `MenuItemType.Submenu`.
     */
    submenu: Menu;
}
/**
 * The namespace for the `MenuItem` class statics.
 */
export declare namespace MenuItem {
    /**
     * A convenience alias of the `Normal` [[MenuItemType]].
     */
    const Normal: MenuItemType;
    /**
     * A convenience alias of the `Check` [[MenuItemType]].
     */
    const Check: MenuItemType;
    /**
     * A convenience alias of the `Separator` [[MenuItemType]].
     */
    const Separator: MenuItemType;
    /**
     * A convenience alias of the `Submenu` [[MenuItemType]].
     */
    const Submenu: MenuItemType;
}
