import { Widget } from 'phosphor-widget';
import { MenuItem } from './menuitem';
/**
 * An abstract base class for implementing menu widgets.
 *
 * #### Notes
 * This class must be subclassed to create a useful menu.
 */
export declare abstract class AbstractMenu extends Widget {
    /**
     * A method invoked to test whether an item is selectable.
     *
     * @param item - The menu item of interest.
     *
     * @returns `true` if the item is selectable, `false` otherwise.
     *
     * #### Notes
     * This method must be implemented by a subclass.
     */
    protected abstract isSelectable(item: MenuItem): boolean;
    /**
     * A method invoked when the menu items change.
     *
     * @param oldItems - The old menu items.
     *
     * @param newItems - The new menu items.
     *
     * #### Notes
     * This method must be implemented by a subclass.
     *
     * The active index is reset to `-1` before this method is called.
     */
    protected abstract onItemsChanged(oldItems: MenuItem[], newItems: MenuItem[]): void;
    /**
     * A method invoked when the active index changes.
     *
     * @param oldIndex - The old active index.
     *
     * @param newIndex - The new active index.
     *
     * #### Notes
     * This method must be implemented by a subclass.
     *
     * This method will not be called when the menu items are changed.
     */
    protected abstract onActiveIndexChanged(oldIndex: number, newIndex: number): void;
    /**
     * Get the array of menu items for the menu.
     *
     * #### Notes
     * The items array is frozen and cannot be modified in-place.
     */
    /**
     * Set the array of menu items for the menu.
     *
     * #### Notes
     * This creates a shallow copy of the assigned menu items.
     */
    items: MenuItem[];
    /**
     * Get the index of the currently active menu item.
     *
     * #### Notes
     * This will be `-1` if there is no active item.
     */
    /**
     * Set the index of the currently active menu item.
     *
     * #### Notes
     * If the index is out of range, or points to a menu item which is
     * not selectable, the index will be set to `-1`.
     *
     * Setting the active index has O(1) complexity.
     */
    activeIndex: number;
    /**
     * Get the currently active menu item.
     *
     * #### Notes
     * This will be `null` if there is no active item.
     */
    /**
     * Set the currently active menu item.
     *
     * #### Notes
     * If the item is not contained in the menu, or is not a selectable
     * item, the active item will be set to `null`.
     *
     * Setting the active item has O(n) complexity.
     */
    activeItem: MenuItem;
    /**
     * Activate the next selectable menu item.
     *
     * #### Notes
     * The search starts with the currently active item, and progresses
     * forward until the next selectable item is found. The search will
     * wrap around at the end of the menu.
     */
    activateNextItem(): void;
    /**
     * Activate the previous selectable menu item.
     *
     * #### Notes
     * The search starts with the currently active item, and progresses
     * backward until the next selectable item is found. The search will
     * wrap around at the front of the menu.
     */
    activatePreviousItem(): void;
    /**
     * Activate the next selectable menu item with the given mnemonic.
     *
     * #### Notes
     * The search starts with the currently active item, and progresses
     * forward until the next selectable item with the given mnemonic is
     * found. The search will wrap around at the end of the menu, and the
     * mnemonic matching is case-insensitive.
     */
    activateMnemonicItem(char: string): void;
    private _activeIndex;
    private _items;
}
