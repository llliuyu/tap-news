import { Message } from 'phosphor-messaging';
import { AbstractMenu } from './base';
import { Menu } from './menu';
import { MenuItem } from './menuitem';
/**
 * A widget which displays menu items as a menu bar.
 */
export declare class MenuBar extends AbstractMenu {
    /**
     * Create the DOM node for a menu bar.
     */
    static createNode(): HTMLElement;
    /**
     * Create a new item node for a menu bar.
     *
     * @returns A new DOM node to use as an item in a menu bar.
     *
     * #### Notes
     * This method may be reimplemented to create custom items.
     */
    static createItemNode(): HTMLElement;
    /**
     * Update an item node to reflect the current state of a menu item.
     *
     * @param node - A node created by a call to [[createItemNode]].
     *
     * @param item - The menu item to use for the item state.
     *
     * #### Notes
     * This is called automatically when the item should be updated.
     *
     * If the [[createItemNode]] method is reimplemented, this method
     * should also be reimplemented so that the item state is properly
     * updated.
     */
    static updateItemNode(node: HTMLElement, item: MenuItem): void;
    /**
     * Construct a new menu bar.
     *
     * @param items - The menu items to initialize the menu bar.
     *
     * #### Notes
     * Subclasses should not pass menu items to `super`. The subclass
     * should set its own items after it has been fully initialized.
     */
    constructor(items?: MenuItem[]);
    /**
     * Dispose of the resources held by the menu bar.
     */
    dispose(): void;
    /**
     * Get the child menu of the menu bar.
     *
     * #### Notes
     * This will be `null` if the menu bar does not have an open menu.
     *
     * This is a read-only property.
     */
    childMenu: Menu;
    /**
     * Get the menu bar content node.
     *
     * #### Notes
     * This is the node which holds the menu item nodes.
     *
     * Modifying this node directly can lead to undefined behavior.
     *
     * This is a read-only property.
     */
    contentNode: HTMLElement;
    /**
     * Open the submenu of the active item, if possible.
     *
     * #### Notes
     * This is a no-op if the menu bar is not visible, if there is no
     * active item, or if the active item is disabled or has no submenu.
     */
    openActiveItem(): void;
    /**
     * Handle the DOM events for the menu bar.
     *
     * @param event - The DOM event sent to the menu bar.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the menu bar's DOM nodes. It
     * should not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * A method invoked to test whether an item is selectable.
     *
     * @param item - The menu item of interest.
     *
     * @returns `true` if the item is selectable, `false` otherwise.
     */
    protected isSelectable(item: MenuItem): boolean;
    /**
     * A method invoked when the menu items change.
     *
     * @param oldItems - The old menu items.
     *
     * @param newItems - The new menu items.
     */
    protected onItemsChanged(oldItems: MenuItem[], newItems: MenuItem[]): void;
    /**
     * A method invoked when the active index changes.
     *
     * @param oldIndex - The old active index.
     *
     * @param newIndex - The new active index.
     */
    protected onActiveIndexChanged(oldIndex: number, newIndex: number): void;
    /**
     * A handler invoked on an `'update-request'` message.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'before-detach'` message.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * Handle the `'mousedown'` event for the menu bar.
     */
    private _evtMouseDown(event);
    /**
     * Handle the `'mousemove'` event for the menu bar.
     */
    private _evtMouseMove(event);
    /**
     * Handle the `'mouseleave'` event for the menu bar.
     */
    private _evtMouseLeave(event);
    /**
     * Handle the `'keydown'` event for the menu bar.
     */
    private _evtKeyDown(event);
    /**
     * Handle the `'keypress'` event for the menu bar.
     */
    private _evtKeyPress(event);
    /**
     * Activate the menu bar and install the document listeners.
     */
    private _activate();
    /**
     * Deactivate the menu bar and remove the document listeners.
     */
    private _deactivate();
    /**
     * Open the child menu using the given item node for location.
     */
    private _openChildMenu(menu, node);
    /**
     * Close the current child menu, if one exists.
     */
    private _closeChildMenu();
    /**
     * Reset the menu bar to its default state.
     */
    private _reset();
    /**
     * Handle the `changed` signal from a menu item.
     */
    private _onItemChanged();
    /**
     * Handle the `closed` signal from the child menu.
     */
    private _onMenuClosed(sender);
    private _active;
    private _childMenu;
    private _nodes;
}
