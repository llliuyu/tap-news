/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2015, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
'use strict';
var phosphor_properties_1 = require('phosphor-properties');
var phosphor_signaling_1 = require('phosphor-signaling');
/**
 * An enum of the supported menu item types.
 */
(function (MenuItemType) {
    /**
     * A normal non-checkable menu item.
     */
    MenuItemType[MenuItemType["Normal"] = 0] = "Normal";
    /**
     * A checkable menu item.
     */
    MenuItemType[MenuItemType["Check"] = 1] = "Check";
    /**
     * A separator menu item.
     */
    MenuItemType[MenuItemType["Separator"] = 2] = "Separator";
    /**
     * A submenu menu item.
     */
    MenuItemType[MenuItemType["Submenu"] = 3] = "Submenu";
})(exports.MenuItemType || (exports.MenuItemType = {}));
var MenuItemType = exports.MenuItemType;
/**
 * An item which can be added to a menu widget.
 */
var MenuItem = (function () {
    /**
     * Construct a new menu item.
     *
     * @param options - The initialization options for the menu item.
     */
    function MenuItem(options) {
        if (options)
            MenuItemPrivate.initFrom(this, options);
    }
    Object.defineProperty(MenuItem.prototype, "changed", {
        /**
         * A signal emitted when the menu item state changes.
         */
        get: function () {
            return MenuItemPrivate.changedSignal.bind(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "type", {
        /**
         * Get the type of the menu item.
         *
         * #### Notes
         * The default value is `MenuItemType.Normal`.
         */
        get: function () {
            return MenuItemPrivate.typeProperty.get(this);
        },
        /**
         * Set the type of the menu item.
         *
         * #### Notes
         * Items with submenus are forced to `MenuItemType.Submenu`.
         */
        set: function (value) {
            MenuItemPrivate.typeProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "text", {
        /**
         * Get the text for the menu item.
         *
         * #### Notes
         * The default value is an empty string.
         *
         * An ampersand (`&`) before a character denotes the item mnemonic.
         */
        get: function () {
            return MenuItemPrivate.textProperty.get(this);
        },
        /**
         * Set the text for the menu item.
         *
         * #### Notes
         * An ampersand (`&`) before a character denotes the item mnemonic.
         */
        set: function (value) {
            MenuItemPrivate.textProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "icon", {
        /**
         * Get the icon class for the menu item.
         *
         * #### Notes
         * The default value is an empty string.
         *
         * This is the class name(s) added to a menu item icon node.
         */
        get: function () {
            return MenuItemPrivate.iconProperty.get(this);
        },
        /**
         * Set the icon class for the menu item.
         *
         * #### Notes
         * Multiple class names can be separated with whitespace.
         */
        set: function (value) {
            MenuItemPrivate.iconProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "shortcut", {
        /**
         * Get the shortcut key for the menu item.
         *
         * #### Notes
         * The default value is an empty string.
         *
         * The shortcut string is for decoration only.
         */
        get: function () {
            return MenuItemPrivate.shortcutProperty.get(this);
        },
        /**
         * Set the shortcut key for the menu item.
         *
         * #### Notes
         * The shortcut string is for decoration only.
         */
        set: function (value) {
            MenuItemPrivate.shortcutProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "checked", {
        /**
         * Get the checked state for the menu item.
         *
         * #### Notes
         * The default value is `false`.
         */
        get: function () {
            return MenuItemPrivate.checkedProperty.get(this);
        },
        /**
         * Set the checked state for the menu item.
         *
         * #### Notes
         * Only a `Check` type menu item can be checked.
         */
        set: function (value) {
            MenuItemPrivate.checkedProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "disabled", {
        /**
         * Get the disabled state for the menu item.
         *
         * #### Notes
         * The default value is `false`.
         */
        get: function () {
            return MenuItemPrivate.disabledProperty.get(this);
        },
        /**
         * Set the disabled state for the menu item.
         *
         * #### Notes
         * The handler of a disabled menu item will not be invoked.
         */
        set: function (value) {
            MenuItemPrivate.disabledProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "className", {
        /**
         * Get the extra class name for the menu item.
         *
         * #### Notes
         * The default value is an empty string.
         *
         * This is the class name(s) added to a menu item node.
         */
        get: function () {
            return MenuItemPrivate.classNameProperty.get(this);
        },
        /**
         * Set the extra class name for the menu item.
         *
         * #### Notes
         * Multiple class names can be separated with whitespace.
         */
        set: function (value) {
            MenuItemPrivate.classNameProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "handler", {
        /**
         * Get the handler function for the menu item.
         *
         * #### Notes
         * The default value is `null`.
         *
         * The handler will be invoked when the menu item is clicked.
         */
        get: function () {
            return MenuItemPrivate.handlerProperty.get(this);
        },
        /**
         * Set the handler function for the menu item.
         *
         * #### Notes
         * The handler will be invoked when the menu item is clicked.
         */
        set: function (value) {
            MenuItemPrivate.handlerProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "submenu", {
        /**
         * Get the submenu for the menu item.
         *
         * #### Notes
         * The default value is null.
         *
         * An item with a submenu will have type `MenuItemType.Submenu`.
         */
        get: function () {
            return MenuItemPrivate.submenuProperty.get(this);
        },
        /**
         * Set the submenu for the menu item.
         *
         * #### Notes
         * The `type` will be automatically set to `MenuItemType.Submenu`.
         */
        set: function (value) {
            MenuItemPrivate.submenuProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    return MenuItem;
})();
exports.MenuItem = MenuItem;
/**
 * The namespace for the `MenuItem` class statics.
 */
var MenuItem;
(function (MenuItem) {
    /**
     * A convenience alias of the `Normal` [[MenuItemType]].
     */
    MenuItem.Normal = MenuItemType.Normal;
    /**
     * A convenience alias of the `Check` [[MenuItemType]].
     */
    MenuItem.Check = MenuItemType.Check;
    /**
     * A convenience alias of the `Separator` [[MenuItemType]].
     */
    MenuItem.Separator = MenuItemType.Separator;
    /**
     * A convenience alias of the `Submenu` [[MenuItemType]].
     */
    MenuItem.Submenu = MenuItemType.Submenu;
})(MenuItem = exports.MenuItem || (exports.MenuItem = {}));
/**
 * The namespace for the menu item private data.
 */
var MenuItemPrivate;
(function (MenuItemPrivate) {
    /**
     * A signal emitted when the menu item state changes.
     */
    MenuItemPrivate.changedSignal = new phosphor_signaling_1.Signal();
    /**
     * The property descriptor for the menu item type.
     */
    MenuItemPrivate.typeProperty = new phosphor_properties_1.Property({
        name: 'type',
        value: MenuItemType.Normal,
        coerce: function (owner, value) { return owner.submenu ? MenuItemType.Submenu : value; },
        changed: function (owner) { MenuItemPrivate.checkedProperty.coerce(owner); },
        notify: MenuItemPrivate.changedSignal,
    });
    /**
     * The property descriptor for the menu item text.
     */
    MenuItemPrivate.textProperty = new phosphor_properties_1.Property({
        name: 'text',
        value: '',
        notify: MenuItemPrivate.changedSignal,
    });
    /**
     * The property descriptor for the menu item icon class.
     */
    MenuItemPrivate.iconProperty = new phosphor_properties_1.Property({
        name: 'icon',
        value: '',
        notify: MenuItemPrivate.changedSignal,
    });
    /**
     * The property descriptor for the menu item shortcut.
     */
    MenuItemPrivate.shortcutProperty = new phosphor_properties_1.Property({
        name: 'shortcut',
        value: '',
        notify: MenuItemPrivate.changedSignal,
    });
    /**
     * The property descriptor for the menu item checked state.
     */
    MenuItemPrivate.checkedProperty = new phosphor_properties_1.Property({
        name: 'checked',
        value: false,
        coerce: function (owner, value) { return owner.type === MenuItemType.Check ? value : false; },
        notify: MenuItemPrivate.changedSignal,
    });
    /**
     * The property descriptor for the menu item disabled state.
     */
    MenuItemPrivate.disabledProperty = new phosphor_properties_1.Property({
        name: 'disabled',
        value: false,
        notify: MenuItemPrivate.changedSignal,
    });
    /**
     * The property descriptor for the menu item class name.
     */
    MenuItemPrivate.classNameProperty = new phosphor_properties_1.Property({
        name: 'className',
        value: '',
        notify: MenuItemPrivate.changedSignal,
    });
    /**
     * The property descriptor for the menu item handler.
     */
    MenuItemPrivate.handlerProperty = new phosphor_properties_1.Property({
        name: 'handler',
        value: null,
        coerce: function (owner, value) { return value || null; },
        notify: MenuItemPrivate.changedSignal,
    });
    /**
     * The property descriptor for the menu item submenu.
     */
    MenuItemPrivate.submenuProperty = new phosphor_properties_1.Property({
        name: 'submenu',
        value: null,
        coerce: function (owner, value) { return value || null; },
        changed: function (owner) { MenuItemPrivate.typeProperty.coerce(owner); },
        notify: MenuItemPrivate.changedSignal,
    });
    /**
     * Initialize a menu item from an options object.
     */
    function initFrom(item, options) {
        if (options.type !== void 0) {
            item.type = options.type;
        }
        if (options.text !== void 0) {
            item.text = options.text;
        }
        if (options.icon !== void 0) {
            item.icon = options.icon;
        }
        if (options.shortcut !== void 0) {
            item.shortcut = options.shortcut;
        }
        if (options.checked !== void 0) {
            item.checked = options.checked;
        }
        if (options.disabled !== void 0) {
            item.disabled = options.disabled;
        }
        if (options.className !== void 0) {
            item.className = options.className;
        }
        if (options.handler !== void 0) {
            item.handler = options.handler;
        }
        if (options.submenu !== void 0) {
            item.submenu = options.submenu;
        }
    }
    MenuItemPrivate.initFrom = initFrom;
})(MenuItemPrivate || (MenuItemPrivate = {}));
