/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2015, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var arrays = require('phosphor-arrays');
var phosphor_widget_1 = require('phosphor-widget');
/**
 * An abstract base class for implementing menu widgets.
 *
 * #### Notes
 * This class must be subclassed to create a useful menu.
 */
var AbstractMenu = (function (_super) {
    __extends(AbstractMenu, _super);
    function AbstractMenu() {
        _super.apply(this, arguments);
        this._activeIndex = -1;
        this._items = Object.freeze([]);
    }
    Object.defineProperty(AbstractMenu.prototype, "items", {
        /**
         * Get the array of menu items for the menu.
         *
         * #### Notes
         * The items array is frozen and cannot be modified in-place.
         */
        get: function () {
            return this._items;
        },
        /**
         * Set the array of menu items for the menu.
         *
         * #### Notes
         * This creates a shallow copy of the assigned menu items.
         */
        set: function (value) {
            if (this._items === value) {
                return;
            }
            this._activeIndex = -1;
            var oldItems = this._items;
            this._items = Object.freeze(value.slice());
            this.onItemsChanged(oldItems, this._items);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractMenu.prototype, "activeIndex", {
        /**
         * Get the index of the currently active menu item.
         *
         * #### Notes
         * This will be `-1` if there is no active item.
         */
        get: function () {
            return this._activeIndex;
        },
        /**
         * Set the index of the currently active menu item.
         *
         * #### Notes
         * If the index is out of range, or points to a menu item which is
         * not selectable, the index will be set to `-1`.
         *
         * Setting the active index has O(1) complexity.
         */
        set: function (value) {
            var newIndex = value | 0;
            var item = this._items[newIndex];
            if (!item || !this.isSelectable(item)) {
                newIndex = -1;
            }
            var oldIndex = this._activeIndex;
            if (oldIndex === newIndex) {
                return;
            }
            this._activeIndex = newIndex;
            this.onActiveIndexChanged(oldIndex, newIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractMenu.prototype, "activeItem", {
        /**
         * Get the currently active menu item.
         *
         * #### Notes
         * This will be `null` if there is no active item.
         */
        get: function () {
            return this._items[this._activeIndex] || null;
        },
        /**
         * Set the currently active menu item.
         *
         * #### Notes
         * If the item is not contained in the menu, or is not a selectable
         * item, the active item will be set to `null`.
         *
         * Setting the active item has O(n) complexity.
         */
        set: function (value) {
            this.activeIndex = this._items.indexOf(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Activate the next selectable menu item.
     *
     * #### Notes
     * The search starts with the currently active item, and progresses
     * forward until the next selectable item is found. The search will
     * wrap around at the end of the menu.
     */
    AbstractMenu.prototype.activateNextItem = function () {
        var _this = this;
        var k = this.activeIndex + 1;
        var i = k >= this.items.length ? 0 : k;
        var pred = function (item) { return _this.isSelectable(item); };
        this.activeIndex = arrays.findIndex(this.items, pred, i, true);
    };
    /**
     * Activate the previous selectable menu item.
     *
     * #### Notes
     * The search starts with the currently active item, and progresses
     * backward until the next selectable item is found. The search will
     * wrap around at the front of the menu.
     */
    AbstractMenu.prototype.activatePreviousItem = function () {
        var _this = this;
        var k = this.activeIndex;
        var i = k <= 0 ? this.items.length - 1 : k - 1;
        var pred = function (item) { return _this.isSelectable(item); };
        this.activeIndex = arrays.rfindIndex(this.items, pred, i, true);
    };
    /**
     * Activate the next selectable menu item with the given mnemonic.
     *
     * #### Notes
     * The search starts with the currently active item, and progresses
     * forward until the next selectable item with the given mnemonic is
     * found. The search will wrap around at the end of the menu, and the
     * mnemonic matching is case-insensitive.
     */
    AbstractMenu.prototype.activateMnemonicItem = function (char) {
        var _this = this;
        var c = char.toUpperCase();
        var k = this.activeIndex + 1;
        var i = k >= this.items.length ? 0 : k;
        this.activeIndex = arrays.findIndex(this.items, function (item) {
            if (!_this.isSelectable(item)) {
                return false;
            }
            var match = item.text.match(/&\w/);
            if (!match) {
                return false;
            }
            return match[0][1].toUpperCase() === c;
        }, i, true);
    };
    return AbstractMenu;
})(phosphor_widget_1.Widget);
exports.AbstractMenu = AbstractMenu;
